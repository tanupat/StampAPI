//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Parking.Entity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class WarpsystemEntities : DbContext
    {
        public WarpsystemEntities()
            : base("name=WarpsystemEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Adminsystem_Canteen> Adminsystem_Canteen { get; set; }
        public virtual DbSet<Adminsystem_level_Canteen> Adminsystem_level_Canteen { get; set; }
        public virtual DbSet<Adminsystem_levelsub_canteen> Adminsystem_levelsub_canteen { get; set; }
        public virtual DbSet<Adminsystemlog_canteen> Adminsystemlog_canteen { get; set; }
        public virtual DbSet<Alarm> Alarms { get; set; }
        public virtual DbSet<AlarmEmail> AlarmEmails { get; set; }
        public virtual DbSet<AlarmIO> AlarmIOs { get; set; }
        public virtual DbSet<AlarmIOLink> AlarmIOLinks { get; set; }
        public virtual DbSet<AlarmSM> AlarmSMS { get; set; }
        public virtual DbSet<AlarmSound> AlarmSounds { get; set; }
        public virtual DbSet<AlarmZone> AlarmZones { get; set; }
        public virtual DbSet<AlarmZoneList> AlarmZoneLists { get; set; }
        public virtual DbSet<ATTPARAM> ATTPARAMs { get; set; }
        public virtual DbSet<Canteen_device> Canteen_device { get; set; }
        public virtual DbSet<Canteen_Editdata> Canteen_Editdata { get; set; }
        public virtual DbSet<Canteen_Location> Canteen_Location { get; set; }
        public virtual DbSet<canteen_store> canteen_store { get; set; }
        public virtual DbSet<Card_history> Card_history { get; set; }
        public virtual DbSet<Card_history_De> Card_history_De { get; set; }
        public virtual DbSet<CCTV> CCTVs { get; set; }
        public virtual DbSet<CCTV_Zone> CCTV_Zone { get; set; }
        public virtual DbSet<CCTV_Zone_Detail> CCTV_Zone_Detail { get; set; }
        public virtual DbSet<CHECKEXACT> CHECKEXACTs { get; set; }
        public virtual DbSet<CHECKINOUT> CHECKINOUTs { get; set; }
        public virtual DbSet<CHECKINOUT1> CHECKINOUT1 { get; set; }
        public virtual DbSet<CHECKINOUTCARD> CHECKINOUTCARDs { get; set; }
        public virtual DbSet<Device_Pic> Device_Pic { get; set; }
        public virtual DbSet<DoorList> DoorLists { get; set; }
        public virtual DbSet<Ftpserver> Ftpservers { get; set; }
        public virtual DbSet<FTPServer1> FTPServer1 { get; set; }
        public virtual DbSet<FunctionKey> FunctionKeys { get; set; }
        public virtual DbSet<GroupAttendance> GroupAttendances { get; set; }
        public virtual DbSet<HOLIDAY> HOLIDAYS { get; set; }
        public virtual DbSet<ImportFormat> ImportFormats { get; set; }
        public virtual DbSet<includevacation> includevacations { get; set; }
        public virtual DbSet<LEAVECLASS> LEAVECLASSes { get; set; }
        public virtual DbSet<LEAVECLASS1> LEAVECLASS1 { get; set; }
        public virtual DbSet<LeaveID> LeaveIDs { get; set; }
        public virtual DbSet<LeavePay> LeavePays { get; set; }
        public virtual DbSet<LeaveRecord> LeaveRecords { get; set; }
        public virtual DbSet<LogForuse> LogForuses { get; set; }
        public virtual DbSet<Machinedetail1> Machinedetail1 { get; set; }
        public virtual DbSet<MachineDetail2> MachineDetail2 { get; set; }
        public virtual DbSet<MachineList> MachineLists { get; set; }
        public virtual DbSet<MapZone> MapZones { get; set; }
        public virtual DbSet<Mapzonedetail> Mapzonedetails { get; set; }
        public virtual DbSet<MapZoneDetail2> MapZoneDetail2 { get; set; }
        public virtual DbSet<MSLog> MSLogs { get; set; }
        public virtual DbSet<MSticker> MStickers { get; set; }
        public virtual DbSet<MSTopup> MSTopups { get; set; }
        public virtual DbSet<NUM_RUN> NUM_RUN { get; set; }
        public virtual DbSet<NUM_RUN_DEIL> NUM_RUN_DEIL { get; set; }
        public virtual DbSet<NUM_RUN_HOL> NUM_RUN_HOL { get; set; }
        public virtual DbSet<PayPeriod> PayPeriods { get; set; }
        public virtual DbSet<PK_ErrorLog> PK_ErrorLog { get; set; }
        public virtual DbSet<PK_retailStore> PK_retailStore { get; set; }
        public virtual DbSet<PK_StampConditionCode> PK_StampConditionCode { get; set; }
        public virtual DbSet<PK_stampConditionCodeSub> PK_stampConditionCodeSub { get; set; }
        public virtual DbSet<PkAdminsystem> PkAdminsystems { get; set; }
        public virtual DbSet<PKAdminsystem_levelsub> PKAdminsystem_levelsub { get; set; }
        public virtual DbSet<Pkadminsystemlog> Pkadminsystemlogs { get; set; }
        public virtual DbSet<PkAdminweb> PkAdminwebs { get; set; }
        public virtual DbSet<Pkadminweb_levelsub> Pkadminweb_levelsub { get; set; }
        public virtual DbSet<Pkadminweblog> Pkadminweblogs { get; set; }
        public virtual DbSet<Pkcar_contact> Pkcar_contact { get; set; }
        public virtual DbSet<Pkcar_motor_ofcompanyovernight> Pkcar_motor_ofcompanyovernight { get; set; }
        public virtual DbSet<PkCard> PkCards { get; set; }
        public virtual DbSet<PkCardHist> PkCardHists { get; set; }
        public virtual DbSet<PkCardType> PkCardTypes { get; set; }
        public virtual DbSet<Pkchecktime_operation> Pkchecktime_operation { get; set; }
        public virtual DbSet<Pkcontactarea> Pkcontactareas { get; set; }
        public virtual DbSet<Pkdepartment_Groupaccess> Pkdepartment_Groupaccess { get; set; }
        public virtual DbSet<PkDepartment> PkDepartments { get; set; }
        public virtual DbSet<Pkdeposit> Pkdeposits { get; set; }
        public virtual DbSet<Pkemaillessor> Pkemaillessors { get; set; }
        public virtual DbSet<Pkemaillist> Pkemaillists { get; set; }
        public virtual DbSet<Pkemailtenant> Pkemailtenants { get; set; }
        public virtual DbSet<Pkenabledevicetype> Pkenabledevicetypes { get; set; }
        public virtual DbSet<PkEquip> PkEquips { get; set; }
        public virtual DbSet<PkFareMedia> PkFareMedias { get; set; }
        public virtual DbSet<PkFaremedia_Cardtype> PkFaremedia_Cardtype { get; set; }
        public virtual DbSet<Pkfee> Pkfees { get; set; }
        public virtual DbSet<Pkfeechangedata> Pkfeechangedatas { get; set; }
        public virtual DbSet<PkGroupaccess> PkGroupaccesses { get; set; }
        public virtual DbSet<Pkgroupbill> Pkgroupbills { get; set; }
        public virtual DbSet<PkHoliday> PkHolidays { get; set; }
        public virtual DbSet<PkHolidayD> PkHolidayDs { get; set; }
        public virtual DbSet<Pkholidayparking> Pkholidayparkings { get; set; }
        public virtual DbSet<PkInoutTran> PkInoutTrans { get; set; }
        public virtual DbSet<pkinouttranstamp> pkinouttranstamps { get; set; }
        public virtual DbSet<PKINVOICETemp> PKINVOICETemps { get; set; }
        public virtual DbSet<Pkliftserver> Pkliftservers { get; set; }
        public virtual DbSet<PkLocation> PkLocations { get; set; }
        public virtual DbSet<Pklocationparkingzone> Pklocationparkingzones { get; set; }
        public virtual DbSet<Pklocationparkingzonede> Pklocationparkingzonedes { get; set; }
        public virtual DbSet<Pkmessageweb> Pkmessagewebs { get; set; }
        public virtual DbSet<Pkmonthlychangedata> Pkmonthlychangedatas { get; set; }
        public virtual DbSet<Pkmonthlyperiod> Pkmonthlyperiods { get; set; }
        public virtual DbSet<PkMonthlyservice> PkMonthlyservices { get; set; }
        public virtual DbSet<PkNegativeCard> PkNegativeCards { get; set; }
        public virtual DbSet<Pkopengateemergency> Pkopengateemergencies { get; set; }
        public virtual DbSet<Pkparking> Pkparkings { get; set; }
        public virtual DbSet<Pkparkingpermitovernight> Pkparkingpermitovernights { get; set; }
        public virtual DbSet<Pkrequirechangemember> Pkrequirechangemembers { get; set; }
        public virtual DbSet<Pkrequirechangememberdoc> Pkrequirechangememberdocs { get; set; }
        public virtual DbSet<Pksite> Pksites { get; set; }
        public virtual DbSet<PkStamp> PkStamps { get; set; }
        public virtual DbSet<Pkstamptemplate> Pkstamptemplates { get; set; }
        public virtual DbSet<Pksummaryincome_bymonth> Pksummaryincome_bymonth { get; set; }
        public virtual DbSet<Pkterminalstamp> Pkterminalstamps { get; set; }
        public virtual DbSet<PkTern> PkTerns { get; set; }
        public virtual DbSet<PkTernSub> PkTernSubs { get; set; }
        public virtual DbSet<PkTimesetparking> PkTimesetparkings { get; set; }
        public virtual DbSet<PkTimetable> PkTimetables { get; set; }
        public virtual DbSet<PkTimezoneparking> PkTimezoneparkings { get; set; }
        public virtual DbSet<Pkuser_flooraccess> Pkuser_flooraccess { get; set; }
        public virtual DbSet<Pkvisitorgroup> Pkvisitorgroups { get; set; }
        public virtual DbSet<PkWeekend> PkWeekends { get; set; }
        public virtual DbSet<Positioninfo> Positioninfoes { get; set; }
        public virtual DbSet<Printer> Printers { get; set; }
        public virtual DbSet<QR_ER_log> QR_ER_log { get; set; }
        public virtual DbSet<QR_Push_LPN> QR_Push_LPN { get; set; }
        public virtual DbSet<QR_Push_VUID> QR_Push_VUID { get; set; }
        public virtual DbSet<RealTime> RealTimes { get; set; }
        public virtual DbSet<RealTimeLog> RealTimeLogs { get; set; }
        public virtual DbSet<SCHCLASS> SCHCLASSes { get; set; }
        public virtual DbSet<SCHCLASSMINI> SCHCLASSMINIs { get; set; }
        public virtual DbSet<SECURITYDETAIL> SECURITYDETAILS { get; set; }
        public virtual DbSet<SHIFT> SHIFTs { get; set; }
        public virtual DbSet<SiteCode> SiteCodes { get; set; }
        public virtual DbSet<SiteCode_D> SiteCode_D { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Tb_Door> Tb_Door { get; set; }
        public virtual DbSet<tb_doorzone> tb_doorzone { get; set; }
        public virtual DbSet<tb_doorzone_set> tb_doorzone_set { get; set; }
        public virtual DbSet<tb_holidays> tb_holidays { get; set; }
        public virtual DbSet<tb_titlecode> tb_titlecode { get; set; }
        public virtual DbSet<TEMPLATE> TEMPLATEs { get; set; }
        public virtual DbSet<TemplateFace> TemplateFaces { get; set; }
        public virtual DbSet<TemplateFingerVein> TemplateFingerVeins { get; set; }
        public virtual DbSet<TimeGdoor> TimeGdoors { get; set; }
        public virtual DbSet<TimeGDoorD> TimeGDoorDs { get; set; }
        public virtual DbSet<TimeGroup> TimeGroups { get; set; }
        public virtual DbSet<TimeGroupLift> TimeGroupLifts { get; set; }
        public virtual DbSet<TimeGroupSet> TimeGroupSets { get; set; }
        public virtual DbSet<TimeSet> TimeSets { get; set; }
        public virtual DbSet<TimeZone> TimeZones { get; set; }
        public virtual DbSet<USER_OF_RUN> USER_OF_RUN { get; set; }
        public virtual DbSet<USER_SPEDAY> USER_SPEDAY { get; set; }
        public virtual DbSet<USER_TEMP_SCH> USER_TEMP_SCH { get; set; }
        public virtual DbSet<UserEmail> UserEmails { get; set; }
        public virtual DbSet<USERINFO> USERINFOes { get; set; }
        public virtual DbSet<UserSm> UserSms { get; set; }
        public virtual DbSet<VCadmin> VCadmins { get; set; }
        public virtual DbSet<VCadminlog> VCadminlogs { get; set; }
        public virtual DbSet<VCard> VCards { get; set; }
        public virtual DbSet<Vcardtype> Vcardtypes { get; set; }
        public virtual DbSet<VCBox> VCBoxes { get; set; }
        public virtual DbSet<VCFloor> VCFloors { get; set; }
        public virtual DbSet<VCGate> VCGates { get; set; }
        public virtual DbSet<VcLog> VcLogs { get; set; }
        public virtual DbSet<VContact> VContacts { get; set; }
        public virtual DbSet<VCpanel> VCpanels { get; set; }
        public virtual DbSet<VCPurpose> VCPurposes { get; set; }
        public virtual DbSet<VerifyCode> VerifyCodes { get; set; }
        public virtual DbSet<VvisitorDetail> VvisitorDetails { get; set; }
        public virtual DbSet<AlarmEvent> AlarmEvents { get; set; }
        public virtual DbSet<EventStamp> EventStamps { get; set; }
        public virtual DbSet<FormatTextfile> FormatTextfiles { get; set; }
        public virtual DbSet<HolidayType> HolidayTypes { get; set; }
        public virtual DbSet<MSLogCredit> MSLogCredits { get; set; }
        public virtual DbSet<PklogIO_Notworking> PklogIO_Notworking { get; set; }
        public virtual DbSet<Pkmemberfinelog> Pkmemberfinelogs { get; set; }
        public virtual DbSet<PKParkingShift> PKParkingShifts { get; set; }
        public virtual DbSet<QR_rq_log> QR_rq_log { get; set; }
        public virtual DbSet<tb_device> tb_device { get; set; }
        public virtual DbSet<test1> test1 { get; set; }
        public virtual DbSet<Vallovernight_cash> Vallovernight_cash { get; set; }
        public virtual DbSet<VBilling_memberfee> VBilling_memberfee { get; set; }
        public virtual DbSet<VCar_ofcompany> VCar_ofcompany { get; set; }
        public virtual DbSet<Vcheckinout> Vcheckinouts { get; set; }
        public virtual DbSet<Vcomparecontactanduser_Car> Vcomparecontactanduser_Car { get; set; }
        public virtual DbSet<Vcomparecontactanduser_Motor> Vcomparecontactanduser_Motor { get; set; }
        public virtual DbSet<Vlocationzoneparking_Friday> Vlocationzoneparking_Friday { get; set; }
        public virtual DbSet<vlocationzoneparking_Holiday> vlocationzoneparking_Holiday { get; set; }
        public virtual DbSet<VLocationzoneparking_Monday> VLocationzoneparking_Monday { get; set; }
        public virtual DbSet<Vlocationzoneparking_Saturday> Vlocationzoneparking_Saturday { get; set; }
        public virtual DbSet<Vlocationzoneparking_Sunday> Vlocationzoneparking_Sunday { get; set; }
        public virtual DbSet<Vlocationzoneparking_Thursday> Vlocationzoneparking_Thursday { get; set; }
        public virtual DbSet<Vlocationzoneparking_Tuesday> Vlocationzoneparking_Tuesday { get; set; }
        public virtual DbSet<Vlocationzoneparking_Wednesday> Vlocationzoneparking_Wednesday { get; set; }
        public virtual DbSet<Vmembersummary> Vmembersummaries { get; set; }
        public virtual DbSet<VMotor_ofcompany> VMotor_ofcompany { get; set; }
        public virtual DbSet<Vparking_detail> Vparking_detail { get; set; }
        public virtual DbSet<VStamplistbytransaction> VStamplistbytransactions { get; set; }
        public virtual DbSet<Vsumcarcontact> Vsumcarcontacts { get; set; }
        public virtual DbSet<Vsummaryallincome_byyear> Vsummaryallincome_byyear { get; set; }
        public virtual DbSet<Vsummaryallincome_byyear_horizontal> Vsummaryallincome_byyear_horizontal { get; set; }
        public virtual DbSet<Vsummarycontact_tenant_car> Vsummarycontact_tenant_car { get; set; }
        public virtual DbSet<Vsummarycontact_tenant_motor> Vsummarycontact_tenant_motor { get; set; }
        public virtual DbSet<VSummaryfee_type> VSummaryfee_type { get; set; }
        public virtual DbSet<VSummarymemberlogdetail> VSummarymemberlogdetails { get; set; }
        public virtual DbSet<VSummarystampbytransaction> VSummarystampbytransactions { get; set; }
        public virtual DbSet<Vsummarystampdepart_byhour_car> Vsummarystampdepart_byhour_car { get; set; }
        public virtual DbSet<Vsummarystampdepart_byhour_motor> Vsummarystampdepart_byhour_motor { get; set; }
        public virtual DbSet<VSummarystampdetail> VSummarystampdetails { get; set; }
        public virtual DbSet<VSummarystampdetail_car> VSummarystampdetail_car { get; set; }
        public virtual DbSet<VSummarystampdetail_motor> VSummarystampdetail_motor { get; set; }
        public virtual DbSet<VSummarytenant> VSummarytenants { get; set; }
        public virtual DbSet<VSummarytenant_car> VSummarytenant_car { get; set; }
        public virtual DbSet<VSummarytenant_motor> VSummarytenant_motor { get; set; }
        public virtual DbSet<VSummarytenantbydepartment> VSummarytenantbydepartments { get; set; }
        public virtual DbSet<VSummarytenantbydepartment_car> VSummarytenantbydepartment_car { get; set; }
        public virtual DbSet<VSummarytenantbydepartment_motor> VSummarytenantbydepartment_motor { get; set; }
        public virtual DbSet<Vsummarytenantbystamp> Vsummarytenantbystamps { get; set; }
        public virtual DbSet<Vsummarytenantbystamp_car> Vsummarytenantbystamp_car { get; set; }
        public virtual DbSet<Vsummarytenantbystamp_motor> Vsummarytenantbystamp_motor { get; set; }
        public virtual DbSet<VSummaryvisitornostamp> VSummaryvisitornostamps { get; set; }
        public virtual DbSet<VSummaryvisitornostamp_car> VSummaryvisitornostamp_car { get; set; }
        public virtual DbSet<Vsummaryvisitornostamp_lostcard_overnight> Vsummaryvisitornostamp_lostcard_overnight { get; set; }
        public virtual DbSet<VSummaryvisitornostamp_motor> VSummaryvisitornostamp_motor { get; set; }
        public virtual DbSet<Vtotalcard_car> Vtotalcard_car { get; set; }
        public virtual DbSet<Vtotalcard_motor> Vtotalcard_motor { get; set; }
        public virtual DbSet<Vuserinout> Vuserinouts { get; set; }
        public virtual DbSet<Vvisitor> Vvisitors { get; set; }
        public virtual DbSet<Vvisitor_remain> Vvisitor_remain { get; set; }
        public virtual DbSet<Pk_api_function> Pk_api_function { get; set; }
        public virtual DbSet<PkAPI_Parking> PkAPI_Parking { get; set; }
        public virtual DbSet<tree> trees { get; set; }
    
        public virtual int Add_Requirechangemember(string no1, string terncode, Nullable<int> statustype, string fname, string lname, string memberType, Nullable<int> contacttype_New, Nullable<int> paytype, string carID_New, string carModel_New, string carcolor_New, string carID1_New, string carModel1_New, string carcolor1_New, string carID2_New, string carModel2_New, string carcolor2_New, Nullable<System.DateTime> dateactive, string updateby, string telephone)
        {
            var no1Parameter = no1 != null ?
                new ObjectParameter("No1", no1) :
                new ObjectParameter("No1", typeof(string));
    
            var terncodeParameter = terncode != null ?
                new ObjectParameter("terncode", terncode) :
                new ObjectParameter("terncode", typeof(string));
    
            var statustypeParameter = statustype.HasValue ?
                new ObjectParameter("Statustype", statustype) :
                new ObjectParameter("Statustype", typeof(int));
    
            var fnameParameter = fname != null ?
                new ObjectParameter("Fname", fname) :
                new ObjectParameter("Fname", typeof(string));
    
            var lnameParameter = lname != null ?
                new ObjectParameter("Lname", lname) :
                new ObjectParameter("Lname", typeof(string));
    
            var memberTypeParameter = memberType != null ?
                new ObjectParameter("MemberType", memberType) :
                new ObjectParameter("MemberType", typeof(string));
    
            var contacttype_NewParameter = contacttype_New.HasValue ?
                new ObjectParameter("Contacttype_New", contacttype_New) :
                new ObjectParameter("Contacttype_New", typeof(int));
    
            var paytypeParameter = paytype.HasValue ?
                new ObjectParameter("Paytype", paytype) :
                new ObjectParameter("Paytype", typeof(int));
    
            var carID_NewParameter = carID_New != null ?
                new ObjectParameter("CarID_New", carID_New) :
                new ObjectParameter("CarID_New", typeof(string));
    
            var carModel_NewParameter = carModel_New != null ?
                new ObjectParameter("CarModel_New", carModel_New) :
                new ObjectParameter("CarModel_New", typeof(string));
    
            var carcolor_NewParameter = carcolor_New != null ?
                new ObjectParameter("Carcolor_New", carcolor_New) :
                new ObjectParameter("Carcolor_New", typeof(string));
    
            var carID1_NewParameter = carID1_New != null ?
                new ObjectParameter("CarID1_New", carID1_New) :
                new ObjectParameter("CarID1_New", typeof(string));
    
            var carModel1_NewParameter = carModel1_New != null ?
                new ObjectParameter("CarModel1_New", carModel1_New) :
                new ObjectParameter("CarModel1_New", typeof(string));
    
            var carcolor1_NewParameter = carcolor1_New != null ?
                new ObjectParameter("Carcolor1_New", carcolor1_New) :
                new ObjectParameter("Carcolor1_New", typeof(string));
    
            var carID2_NewParameter = carID2_New != null ?
                new ObjectParameter("CarID2_New", carID2_New) :
                new ObjectParameter("CarID2_New", typeof(string));
    
            var carModel2_NewParameter = carModel2_New != null ?
                new ObjectParameter("CarModel2_New", carModel2_New) :
                new ObjectParameter("CarModel2_New", typeof(string));
    
            var carcolor2_NewParameter = carcolor2_New != null ?
                new ObjectParameter("Carcolor2_New", carcolor2_New) :
                new ObjectParameter("Carcolor2_New", typeof(string));
    
            var dateactiveParameter = dateactive.HasValue ?
                new ObjectParameter("Dateactive", dateactive) :
                new ObjectParameter("Dateactive", typeof(System.DateTime));
    
            var updatebyParameter = updateby != null ?
                new ObjectParameter("Updateby", updateby) :
                new ObjectParameter("Updateby", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Add_Requirechangemember", no1Parameter, terncodeParameter, statustypeParameter, fnameParameter, lnameParameter, memberTypeParameter, contacttype_NewParameter, paytypeParameter, carID_NewParameter, carModel_NewParameter, carcolor_NewParameter, carID1_NewParameter, carModel1_NewParameter, carcolor1_NewParameter, carID2_NewParameter, carModel2_NewParameter, carcolor2_NewParameter, dateactiveParameter, updatebyParameter, telephoneParameter);
        }
    
        public virtual int Adminsystemlog_Canteen_FrontEnd_insert(string adminname1, string userName1, Nullable<System.DateTime> logdate1, string prg1, string topic1, string subtopic1, Nullable<int> actionFlag1, string oldvalue1, string newvalue1, string memo1, string deviceno1, Nullable<int> adminlevel1, Nullable<int> sf, Nullable<System.DateTime> syndate, string table1, string keyid)
        {
            var adminname1Parameter = adminname1 != null ?
                new ObjectParameter("adminname1", adminname1) :
                new ObjectParameter("adminname1", typeof(string));
    
            var userName1Parameter = userName1 != null ?
                new ObjectParameter("userName1", userName1) :
                new ObjectParameter("userName1", typeof(string));
    
            var logdate1Parameter = logdate1.HasValue ?
                new ObjectParameter("logdate1", logdate1) :
                new ObjectParameter("logdate1", typeof(System.DateTime));
    
            var prg1Parameter = prg1 != null ?
                new ObjectParameter("prg1", prg1) :
                new ObjectParameter("prg1", typeof(string));
    
            var topic1Parameter = topic1 != null ?
                new ObjectParameter("topic1", topic1) :
                new ObjectParameter("topic1", typeof(string));
    
            var subtopic1Parameter = subtopic1 != null ?
                new ObjectParameter("subtopic1", subtopic1) :
                new ObjectParameter("subtopic1", typeof(string));
    
            var actionFlag1Parameter = actionFlag1.HasValue ?
                new ObjectParameter("actionFlag1", actionFlag1) :
                new ObjectParameter("actionFlag1", typeof(int));
    
            var oldvalue1Parameter = oldvalue1 != null ?
                new ObjectParameter("oldvalue1", oldvalue1) :
                new ObjectParameter("oldvalue1", typeof(string));
    
            var newvalue1Parameter = newvalue1 != null ?
                new ObjectParameter("newvalue1", newvalue1) :
                new ObjectParameter("newvalue1", typeof(string));
    
            var memo1Parameter = memo1 != null ?
                new ObjectParameter("memo1", memo1) :
                new ObjectParameter("memo1", typeof(string));
    
            var deviceno1Parameter = deviceno1 != null ?
                new ObjectParameter("deviceno1", deviceno1) :
                new ObjectParameter("deviceno1", typeof(string));
    
            var adminlevel1Parameter = adminlevel1.HasValue ?
                new ObjectParameter("Adminlevel1", adminlevel1) :
                new ObjectParameter("Adminlevel1", typeof(int));
    
            var sfParameter = sf.HasValue ?
                new ObjectParameter("sf", sf) :
                new ObjectParameter("sf", typeof(int));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            var table1Parameter = table1 != null ?
                new ObjectParameter("table1", table1) :
                new ObjectParameter("table1", typeof(string));
    
            var keyidParameter = keyid != null ?
                new ObjectParameter("keyid", keyid) :
                new ObjectParameter("keyid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Adminsystemlog_Canteen_FrontEnd_insert", adminname1Parameter, userName1Parameter, logdate1Parameter, prg1Parameter, topic1Parameter, subtopic1Parameter, actionFlag1Parameter, oldvalue1Parameter, newvalue1Parameter, memo1Parameter, deviceno1Parameter, adminlevel1Parameter, sfParameter, syndateParameter, table1Parameter, keyidParameter);
        }
    
        public virtual int Adminsystemlog_Canteen_insert(string adminname1, string userName1, Nullable<System.DateTime> logdate1, string prg1, string topic1, string subtopic1, Nullable<int> actionFlag1, string oldvalue1, string newvalue1, string memo1, string deviceno1, Nullable<int> adminlevel1, Nullable<int> sf, Nullable<System.DateTime> syndate, string table1, string keyid)
        {
            var adminname1Parameter = adminname1 != null ?
                new ObjectParameter("adminname1", adminname1) :
                new ObjectParameter("adminname1", typeof(string));
    
            var userName1Parameter = userName1 != null ?
                new ObjectParameter("userName1", userName1) :
                new ObjectParameter("userName1", typeof(string));
    
            var logdate1Parameter = logdate1.HasValue ?
                new ObjectParameter("logdate1", logdate1) :
                new ObjectParameter("logdate1", typeof(System.DateTime));
    
            var prg1Parameter = prg1 != null ?
                new ObjectParameter("prg1", prg1) :
                new ObjectParameter("prg1", typeof(string));
    
            var topic1Parameter = topic1 != null ?
                new ObjectParameter("topic1", topic1) :
                new ObjectParameter("topic1", typeof(string));
    
            var subtopic1Parameter = subtopic1 != null ?
                new ObjectParameter("subtopic1", subtopic1) :
                new ObjectParameter("subtopic1", typeof(string));
    
            var actionFlag1Parameter = actionFlag1.HasValue ?
                new ObjectParameter("actionFlag1", actionFlag1) :
                new ObjectParameter("actionFlag1", typeof(int));
    
            var oldvalue1Parameter = oldvalue1 != null ?
                new ObjectParameter("oldvalue1", oldvalue1) :
                new ObjectParameter("oldvalue1", typeof(string));
    
            var newvalue1Parameter = newvalue1 != null ?
                new ObjectParameter("newvalue1", newvalue1) :
                new ObjectParameter("newvalue1", typeof(string));
    
            var memo1Parameter = memo1 != null ?
                new ObjectParameter("memo1", memo1) :
                new ObjectParameter("memo1", typeof(string));
    
            var deviceno1Parameter = deviceno1 != null ?
                new ObjectParameter("deviceno1", deviceno1) :
                new ObjectParameter("deviceno1", typeof(string));
    
            var adminlevel1Parameter = adminlevel1.HasValue ?
                new ObjectParameter("Adminlevel1", adminlevel1) :
                new ObjectParameter("Adminlevel1", typeof(int));
    
            var sfParameter = sf.HasValue ?
                new ObjectParameter("sf", sf) :
                new ObjectParameter("sf", typeof(int));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            var table1Parameter = table1 != null ?
                new ObjectParameter("table1", table1) :
                new ObjectParameter("table1", typeof(string));
    
            var keyidParameter = keyid != null ?
                new ObjectParameter("keyid", keyid) :
                new ObjectParameter("keyid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Adminsystemlog_Canteen_insert", adminname1Parameter, userName1Parameter, logdate1Parameter, prg1Parameter, topic1Parameter, subtopic1Parameter, actionFlag1Parameter, oldvalue1Parameter, newvalue1Parameter, memo1Parameter, deviceno1Parameter, adminlevel1Parameter, sfParameter, syndateParameter, table1Parameter, keyidParameter);
        }
    
        public virtual ObjectResult<string> GetMessageMail(string p_No1)
        {
            var p_No1Parameter = p_No1 != null ?
                new ObjectParameter("p_No1", p_No1) :
                new ObjectParameter("p_No1", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetMessageMail", p_No1Parameter);
        }
    
        public virtual ObjectResult<GetMessageWeb_Result> GetMessageWeb()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMessageWeb_Result>("GetMessageWeb");
        }
    
        public virtual int GPP_AutoAddTopup(Nullable<int> sDate, Nullable<int> sMonth, Nullable<int> sYear)
        {
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("SDate", sDate) :
                new ObjectParameter("SDate", typeof(int));
    
            var sMonthParameter = sMonth.HasValue ?
                new ObjectParameter("SMonth", sMonth) :
                new ObjectParameter("SMonth", typeof(int));
    
            var sYearParameter = sYear.HasValue ?
                new ObjectParameter("SYear", sYear) :
                new ObjectParameter("SYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GPP_AutoAddTopup", sDateParameter, sMonthParameter, sYearParameter);
        }
    
        public virtual int GPP_AutoAddTopup_aorv1(Nullable<int> sDate, Nullable<int> sMonth, Nullable<int> sYear)
        {
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("SDate", sDate) :
                new ObjectParameter("SDate", typeof(int));
    
            var sMonthParameter = sMonth.HasValue ?
                new ObjectParameter("SMonth", sMonth) :
                new ObjectParameter("SMonth", typeof(int));
    
            var sYearParameter = sYear.HasValue ?
                new ObjectParameter("SYear", sYear) :
                new ObjectParameter("SYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GPP_AutoAddTopup_aorv1", sDateParameter, sMonthParameter, sYearParameter);
        }
    
        public virtual int GPP_AutoAddTopup_OK(Nullable<int> sDate, Nullable<int> sMonth, Nullable<int> sYear)
        {
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("SDate", sDate) :
                new ObjectParameter("SDate", typeof(int));
    
            var sMonthParameter = sMonth.HasValue ?
                new ObjectParameter("SMonth", sMonth) :
                new ObjectParameter("SMonth", typeof(int));
    
            var sYearParameter = sYear.HasValue ?
                new ObjectParameter("SYear", sYear) :
                new ObjectParameter("SYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GPP_AutoAddTopup_OK", sDateParameter, sMonthParameter, sYearParameter);
        }
    
        public virtual int GPP_AutoAddTopup_ton(Nullable<int> sDate, Nullable<int> sMonth, Nullable<int> sYear)
        {
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("SDate", sDate) :
                new ObjectParameter("SDate", typeof(int));
    
            var sMonthParameter = sMonth.HasValue ?
                new ObjectParameter("SMonth", sMonth) :
                new ObjectParameter("SMonth", typeof(int));
    
            var sYearParameter = sYear.HasValue ?
                new ObjectParameter("SYear", sYear) :
                new ObjectParameter("SYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GPP_AutoAddTopup_ton", sDateParameter, sMonthParameter, sYearParameter);
        }
    
        public virtual int GPP_ClearPic(Nullable<int> flag, string inOutTran_ID)
        {
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(int));
    
            var inOutTran_IDParameter = inOutTran_ID != null ?
                new ObjectParameter("InOutTran_ID", inOutTran_ID) :
                new ObjectParameter("InOutTran_ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GPP_ClearPic", flagParameter, inOutTran_IDParameter);
        }
    
        public virtual int GPP_GetCardnobyCardID(string cscmain_id, ObjectParameter userID, ObjectParameter empID, ObjectParameter cardtype_id, ObjectParameter cardtype)
        {
            var cscmain_idParameter = cscmain_id != null ?
                new ObjectParameter("Cscmain_id", cscmain_id) :
                new ObjectParameter("Cscmain_id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GPP_GetCardnobyCardID", cscmain_idParameter, userID, empID, cardtype_id, cardtype);
        }
    
        public virtual int GPP_GetDoorID(Nullable<int> serverID, Nullable<int> subDoor, ObjectParameter doorID, ObjectParameter status, ObjectParameter type)
        {
            var serverIDParameter = serverID.HasValue ?
                new ObjectParameter("ServerID", serverID) :
                new ObjectParameter("ServerID", typeof(int));
    
            var subDoorParameter = subDoor.HasValue ?
                new ObjectParameter("SubDoor", subDoor) :
                new ObjectParameter("SubDoor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GPP_GetDoorID", serverIDParameter, subDoorParameter, doorID, status, type);
        }
    
        public virtual int GPP_GetEmpIDByCardID(string userID, ObjectParameter empID)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GPP_GetEmpIDByCardID", userIDParameter, empID);
        }
    
        public virtual int GPP_GetFunctionKey(Nullable<int> functionkey, ObjectParameter functionName)
        {
            var functionkeyParameter = functionkey.HasValue ?
                new ObjectParameter("Functionkey", functionkey) :
                new ObjectParameter("Functionkey", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GPP_GetFunctionKey", functionkeyParameter, functionName);
        }
    
        public virtual int GPP_GetMachineList_IPAddress(Nullable<int> m_ServerID, ObjectParameter m_Dstatus, ObjectParameter m_IPAddress)
        {
            var m_ServerIDParameter = m_ServerID.HasValue ?
                new ObjectParameter("M_ServerID", m_ServerID) :
                new ObjectParameter("M_ServerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GPP_GetMachineList_IPAddress", m_ServerIDParameter, m_Dstatus, m_IPAddress);
        }
    
        public virtual int GPP_GetVerifyID(Nullable<int> verifyCode, ObjectParameter verifyName)
        {
            var verifyCodeParameter = verifyCode.HasValue ?
                new ObjectParameter("VerifyCode", verifyCode) :
                new ObjectParameter("VerifyCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GPP_GetVerifyID", verifyCodeParameter, verifyName);
        }
    
        public virtual int GPP_InserFineLog(string inOuttran_id, string scr_No, Nullable<System.DateTime> logTimeStamp, Nullable<int> completeflag, Nullable<int> gateID, string fname, string lname, string carid, string cscmain_id)
        {
            var inOuttran_idParameter = inOuttran_id != null ?
                new ObjectParameter("InOuttran_id", inOuttran_id) :
                new ObjectParameter("InOuttran_id", typeof(string));
    
            var scr_NoParameter = scr_No != null ?
                new ObjectParameter("Scr_No", scr_No) :
                new ObjectParameter("Scr_No", typeof(string));
    
            var logTimeStampParameter = logTimeStamp.HasValue ?
                new ObjectParameter("LogTimeStamp", logTimeStamp) :
                new ObjectParameter("LogTimeStamp", typeof(System.DateTime));
    
            var completeflagParameter = completeflag.HasValue ?
                new ObjectParameter("Completeflag", completeflag) :
                new ObjectParameter("Completeflag", typeof(int));
    
            var gateIDParameter = gateID.HasValue ?
                new ObjectParameter("GateID", gateID) :
                new ObjectParameter("GateID", typeof(int));
    
            var fnameParameter = fname != null ?
                new ObjectParameter("Fname", fname) :
                new ObjectParameter("Fname", typeof(string));
    
            var lnameParameter = lname != null ?
                new ObjectParameter("Lname", lname) :
                new ObjectParameter("Lname", typeof(string));
    
            var caridParameter = carid != null ?
                new ObjectParameter("Carid", carid) :
                new ObjectParameter("Carid", typeof(string));
    
            var cscmain_idParameter = cscmain_id != null ?
                new ObjectParameter("Cscmain_id", cscmain_id) :
                new ObjectParameter("Cscmain_id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GPP_InserFineLog", inOuttran_idParameter, scr_NoParameter, logTimeStampParameter, completeflagParameter, gateIDParameter, fnameParameter, lnameParameter, caridParameter, cscmain_idParameter);
        }
    
        public virtual int GPP_InsertErorIO(string inoutTran_ID, string iO_IP, string car_ID, Nullable<int> flag, Nullable<int> gateID)
        {
            var inoutTran_IDParameter = inoutTran_ID != null ?
                new ObjectParameter("InoutTran_ID", inoutTran_ID) :
                new ObjectParameter("InoutTran_ID", typeof(string));
    
            var iO_IPParameter = iO_IP != null ?
                new ObjectParameter("IO_IP", iO_IP) :
                new ObjectParameter("IO_IP", typeof(string));
    
            var car_IDParameter = car_ID != null ?
                new ObjectParameter("Car_ID", car_ID) :
                new ObjectParameter("Car_ID", typeof(string));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(int));
    
            var gateIDParameter = gateID.HasValue ?
                new ObjectParameter("GateID", gateID) :
                new ObjectParameter("GateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GPP_InsertErorIO", inoutTran_IDParameter, iO_IPParameter, car_IDParameter, flagParameter, gateIDParameter);
        }
    
        public virtual int GPP_InsertErrorLog(string cscmain_id, Nullable<int> gate_ID, Nullable<System.DateTime> xDatetime, string description, string carid, string scr_no)
        {
            var cscmain_idParameter = cscmain_id != null ?
                new ObjectParameter("Cscmain_id", cscmain_id) :
                new ObjectParameter("Cscmain_id", typeof(string));
    
            var gate_IDParameter = gate_ID.HasValue ?
                new ObjectParameter("Gate_ID", gate_ID) :
                new ObjectParameter("Gate_ID", typeof(int));
    
            var xDatetimeParameter = xDatetime.HasValue ?
                new ObjectParameter("xDatetime", xDatetime) :
                new ObjectParameter("xDatetime", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var caridParameter = carid != null ?
                new ObjectParameter("Carid", carid) :
                new ObjectParameter("Carid", typeof(string));
    
            var scr_noParameter = scr_no != null ?
                new ObjectParameter("Scr_no", scr_no) :
                new ObjectParameter("Scr_no", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GPP_InsertErrorLog", cscmain_idParameter, gate_IDParameter, xDatetimeParameter, descriptionParameter, caridParameter, scr_noParameter);
        }
    
        public virtual ObjectResult<string> GPP_InsertLog(string uSERID, Nullable<System.DateTime> cHECKTIME, string cHECKTYPE, Nullable<int> vERIFYCODE, string sENSORID, string cK, Nullable<short> fUNCTIONKEY, Nullable<int> tID, Nullable<int> dOOR, Nullable<short> resv1, Nullable<short> resv2, string mEMO1, string tYPE1, Nullable<int> eCODE, Nullable<int> uLRTz, Nullable<int> lIndex)
        {
            var uSERIDParameter = uSERID != null ?
                new ObjectParameter("USERID", uSERID) :
                new ObjectParameter("USERID", typeof(string));
    
            var cHECKTIMEParameter = cHECKTIME.HasValue ?
                new ObjectParameter("CHECKTIME", cHECKTIME) :
                new ObjectParameter("CHECKTIME", typeof(System.DateTime));
    
            var cHECKTYPEParameter = cHECKTYPE != null ?
                new ObjectParameter("CHECKTYPE", cHECKTYPE) :
                new ObjectParameter("CHECKTYPE", typeof(string));
    
            var vERIFYCODEParameter = vERIFYCODE.HasValue ?
                new ObjectParameter("VERIFYCODE", vERIFYCODE) :
                new ObjectParameter("VERIFYCODE", typeof(int));
    
            var sENSORIDParameter = sENSORID != null ?
                new ObjectParameter("SENSORID", sENSORID) :
                new ObjectParameter("SENSORID", typeof(string));
    
            var cKParameter = cK != null ?
                new ObjectParameter("CK", cK) :
                new ObjectParameter("CK", typeof(string));
    
            var fUNCTIONKEYParameter = fUNCTIONKEY.HasValue ?
                new ObjectParameter("FUNCTIONKEY", fUNCTIONKEY) :
                new ObjectParameter("FUNCTIONKEY", typeof(short));
    
            var tIDParameter = tID.HasValue ?
                new ObjectParameter("TID", tID) :
                new ObjectParameter("TID", typeof(int));
    
            var dOORParameter = dOOR.HasValue ?
                new ObjectParameter("DOOR", dOOR) :
                new ObjectParameter("DOOR", typeof(int));
    
            var resv1Parameter = resv1.HasValue ?
                new ObjectParameter("resv1", resv1) :
                new ObjectParameter("resv1", typeof(short));
    
            var resv2Parameter = resv2.HasValue ?
                new ObjectParameter("resv2", resv2) :
                new ObjectParameter("resv2", typeof(short));
    
            var mEMO1Parameter = mEMO1 != null ?
                new ObjectParameter("MEMO1", mEMO1) :
                new ObjectParameter("MEMO1", typeof(string));
    
            var tYPE1Parameter = tYPE1 != null ?
                new ObjectParameter("TYPE1", tYPE1) :
                new ObjectParameter("TYPE1", typeof(string));
    
            var eCODEParameter = eCODE.HasValue ?
                new ObjectParameter("ECODE", eCODE) :
                new ObjectParameter("ECODE", typeof(int));
    
            var uLRTzParameter = uLRTz.HasValue ?
                new ObjectParameter("ULRTz", uLRTz) :
                new ObjectParameter("ULRTz", typeof(int));
    
            var lIndexParameter = lIndex.HasValue ?
                new ObjectParameter("LIndex", lIndex) :
                new ObjectParameter("LIndex", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GPP_InsertLog", uSERIDParameter, cHECKTIMEParameter, cHECKTYPEParameter, vERIFYCODEParameter, sENSORIDParameter, cKParameter, fUNCTIONKEYParameter, tIDParameter, dOORParameter, resv1Parameter, resv2Parameter, mEMO1Parameter, tYPE1Parameter, eCODEParameter, uLRTzParameter, lIndexParameter);
        }
    
        public virtual ObjectResult<string> GPP_InsertLog_Operation(string uSERID, Nullable<System.DateTime> cHECKTIME, string cHECKTYPE, Nullable<int> vERIFYCODE, string sENSORID, string cK, Nullable<short> fUNCTIONKEY, Nullable<int> tID, Nullable<int> dOOR, Nullable<short> resv1, Nullable<short> resv2, string mEMO1, string tYPE1, Nullable<int> eCODE, Nullable<int> uLRTz, Nullable<int> lIndex, string pic1, string pic2, string statusGate, string carnumber)
        {
            var uSERIDParameter = uSERID != null ?
                new ObjectParameter("USERID", uSERID) :
                new ObjectParameter("USERID", typeof(string));
    
            var cHECKTIMEParameter = cHECKTIME.HasValue ?
                new ObjectParameter("CHECKTIME", cHECKTIME) :
                new ObjectParameter("CHECKTIME", typeof(System.DateTime));
    
            var cHECKTYPEParameter = cHECKTYPE != null ?
                new ObjectParameter("CHECKTYPE", cHECKTYPE) :
                new ObjectParameter("CHECKTYPE", typeof(string));
    
            var vERIFYCODEParameter = vERIFYCODE.HasValue ?
                new ObjectParameter("VERIFYCODE", vERIFYCODE) :
                new ObjectParameter("VERIFYCODE", typeof(int));
    
            var sENSORIDParameter = sENSORID != null ?
                new ObjectParameter("SENSORID", sENSORID) :
                new ObjectParameter("SENSORID", typeof(string));
    
            var cKParameter = cK != null ?
                new ObjectParameter("CK", cK) :
                new ObjectParameter("CK", typeof(string));
    
            var fUNCTIONKEYParameter = fUNCTIONKEY.HasValue ?
                new ObjectParameter("FUNCTIONKEY", fUNCTIONKEY) :
                new ObjectParameter("FUNCTIONKEY", typeof(short));
    
            var tIDParameter = tID.HasValue ?
                new ObjectParameter("TID", tID) :
                new ObjectParameter("TID", typeof(int));
    
            var dOORParameter = dOOR.HasValue ?
                new ObjectParameter("DOOR", dOOR) :
                new ObjectParameter("DOOR", typeof(int));
    
            var resv1Parameter = resv1.HasValue ?
                new ObjectParameter("resv1", resv1) :
                new ObjectParameter("resv1", typeof(short));
    
            var resv2Parameter = resv2.HasValue ?
                new ObjectParameter("resv2", resv2) :
                new ObjectParameter("resv2", typeof(short));
    
            var mEMO1Parameter = mEMO1 != null ?
                new ObjectParameter("MEMO1", mEMO1) :
                new ObjectParameter("MEMO1", typeof(string));
    
            var tYPE1Parameter = tYPE1 != null ?
                new ObjectParameter("TYPE1", tYPE1) :
                new ObjectParameter("TYPE1", typeof(string));
    
            var eCODEParameter = eCODE.HasValue ?
                new ObjectParameter("ECODE", eCODE) :
                new ObjectParameter("ECODE", typeof(int));
    
            var uLRTzParameter = uLRTz.HasValue ?
                new ObjectParameter("ULRTz", uLRTz) :
                new ObjectParameter("ULRTz", typeof(int));
    
            var lIndexParameter = lIndex.HasValue ?
                new ObjectParameter("LIndex", lIndex) :
                new ObjectParameter("LIndex", typeof(int));
    
            var pic1Parameter = pic1 != null ?
                new ObjectParameter("Pic1", pic1) :
                new ObjectParameter("Pic1", typeof(string));
    
            var pic2Parameter = pic2 != null ?
                new ObjectParameter("Pic2", pic2) :
                new ObjectParameter("Pic2", typeof(string));
    
            var statusGateParameter = statusGate != null ?
                new ObjectParameter("StatusGate", statusGate) :
                new ObjectParameter("StatusGate", typeof(string));
    
            var carnumberParameter = carnumber != null ?
                new ObjectParameter("Carnumber", carnumber) :
                new ObjectParameter("Carnumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GPP_InsertLog_Operation", uSERIDParameter, cHECKTIMEParameter, cHECKTYPEParameter, vERIFYCODEParameter, sENSORIDParameter, cKParameter, fUNCTIONKEYParameter, tIDParameter, dOORParameter, resv1Parameter, resv2Parameter, mEMO1Parameter, tYPE1Parameter, eCODEParameter, uLRTzParameter, lIndexParameter, pic1Parameter, pic2Parameter, statusGateParameter, carnumberParameter);
        }
    
        public virtual ObjectResult<string> GPP_InsertLog2(string uSERID, Nullable<System.DateTime> cHECKTIME, string cHECKTYPE, Nullable<int> vERIFYCODE, string sENSORID, string cK, Nullable<short> fUNCTIONKEY, Nullable<int> tID, Nullable<int> dOOR, Nullable<short> resv1, Nullable<short> resv2, string mEMO1, string tYPE1, Nullable<int> eCODE, Nullable<int> uLRTz, Nullable<int> lIndex, Nullable<System.DateTime> serverTime)
        {
            var uSERIDParameter = uSERID != null ?
                new ObjectParameter("USERID", uSERID) :
                new ObjectParameter("USERID", typeof(string));
    
            var cHECKTIMEParameter = cHECKTIME.HasValue ?
                new ObjectParameter("CHECKTIME", cHECKTIME) :
                new ObjectParameter("CHECKTIME", typeof(System.DateTime));
    
            var cHECKTYPEParameter = cHECKTYPE != null ?
                new ObjectParameter("CHECKTYPE", cHECKTYPE) :
                new ObjectParameter("CHECKTYPE", typeof(string));
    
            var vERIFYCODEParameter = vERIFYCODE.HasValue ?
                new ObjectParameter("VERIFYCODE", vERIFYCODE) :
                new ObjectParameter("VERIFYCODE", typeof(int));
    
            var sENSORIDParameter = sENSORID != null ?
                new ObjectParameter("SENSORID", sENSORID) :
                new ObjectParameter("SENSORID", typeof(string));
    
            var cKParameter = cK != null ?
                new ObjectParameter("CK", cK) :
                new ObjectParameter("CK", typeof(string));
    
            var fUNCTIONKEYParameter = fUNCTIONKEY.HasValue ?
                new ObjectParameter("FUNCTIONKEY", fUNCTIONKEY) :
                new ObjectParameter("FUNCTIONKEY", typeof(short));
    
            var tIDParameter = tID.HasValue ?
                new ObjectParameter("TID", tID) :
                new ObjectParameter("TID", typeof(int));
    
            var dOORParameter = dOOR.HasValue ?
                new ObjectParameter("DOOR", dOOR) :
                new ObjectParameter("DOOR", typeof(int));
    
            var resv1Parameter = resv1.HasValue ?
                new ObjectParameter("resv1", resv1) :
                new ObjectParameter("resv1", typeof(short));
    
            var resv2Parameter = resv2.HasValue ?
                new ObjectParameter("resv2", resv2) :
                new ObjectParameter("resv2", typeof(short));
    
            var mEMO1Parameter = mEMO1 != null ?
                new ObjectParameter("MEMO1", mEMO1) :
                new ObjectParameter("MEMO1", typeof(string));
    
            var tYPE1Parameter = tYPE1 != null ?
                new ObjectParameter("TYPE1", tYPE1) :
                new ObjectParameter("TYPE1", typeof(string));
    
            var eCODEParameter = eCODE.HasValue ?
                new ObjectParameter("ECODE", eCODE) :
                new ObjectParameter("ECODE", typeof(int));
    
            var uLRTzParameter = uLRTz.HasValue ?
                new ObjectParameter("ULRTz", uLRTz) :
                new ObjectParameter("ULRTz", typeof(int));
    
            var lIndexParameter = lIndex.HasValue ?
                new ObjectParameter("LIndex", lIndex) :
                new ObjectParameter("LIndex", typeof(int));
    
            var serverTimeParameter = serverTime.HasValue ?
                new ObjectParameter("ServerTime", serverTime) :
                new ObjectParameter("ServerTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GPP_InsertLog2", uSERIDParameter, cHECKTIMEParameter, cHECKTYPEParameter, vERIFYCODEParameter, sENSORIDParameter, cKParameter, fUNCTIONKEYParameter, tIDParameter, dOORParameter, resv1Parameter, resv2Parameter, mEMO1Parameter, tYPE1Parameter, eCODEParameter, uLRTzParameter, lIndexParameter, serverTimeParameter);
        }
    
        public virtual ObjectResult<string> GPP_InsertLog3(string uSERID, Nullable<System.DateTime> cHECKTIME, string cHECKTYPE, Nullable<int> vERIFYCODE, string sENSORID, string cK, Nullable<short> fUNCTIONKEY, Nullable<int> tID, Nullable<int> dOOR, Nullable<short> resv1, Nullable<short> resv2, string mEMO1, string tYPE1, Nullable<int> eCODE, Nullable<int> uLRTz, string empID, Nullable<int> lIndex)
        {
            var uSERIDParameter = uSERID != null ?
                new ObjectParameter("USERID", uSERID) :
                new ObjectParameter("USERID", typeof(string));
    
            var cHECKTIMEParameter = cHECKTIME.HasValue ?
                new ObjectParameter("CHECKTIME", cHECKTIME) :
                new ObjectParameter("CHECKTIME", typeof(System.DateTime));
    
            var cHECKTYPEParameter = cHECKTYPE != null ?
                new ObjectParameter("CHECKTYPE", cHECKTYPE) :
                new ObjectParameter("CHECKTYPE", typeof(string));
    
            var vERIFYCODEParameter = vERIFYCODE.HasValue ?
                new ObjectParameter("VERIFYCODE", vERIFYCODE) :
                new ObjectParameter("VERIFYCODE", typeof(int));
    
            var sENSORIDParameter = sENSORID != null ?
                new ObjectParameter("SENSORID", sENSORID) :
                new ObjectParameter("SENSORID", typeof(string));
    
            var cKParameter = cK != null ?
                new ObjectParameter("CK", cK) :
                new ObjectParameter("CK", typeof(string));
    
            var fUNCTIONKEYParameter = fUNCTIONKEY.HasValue ?
                new ObjectParameter("FUNCTIONKEY", fUNCTIONKEY) :
                new ObjectParameter("FUNCTIONKEY", typeof(short));
    
            var tIDParameter = tID.HasValue ?
                new ObjectParameter("TID", tID) :
                new ObjectParameter("TID", typeof(int));
    
            var dOORParameter = dOOR.HasValue ?
                new ObjectParameter("DOOR", dOOR) :
                new ObjectParameter("DOOR", typeof(int));
    
            var resv1Parameter = resv1.HasValue ?
                new ObjectParameter("resv1", resv1) :
                new ObjectParameter("resv1", typeof(short));
    
            var resv2Parameter = resv2.HasValue ?
                new ObjectParameter("resv2", resv2) :
                new ObjectParameter("resv2", typeof(short));
    
            var mEMO1Parameter = mEMO1 != null ?
                new ObjectParameter("MEMO1", mEMO1) :
                new ObjectParameter("MEMO1", typeof(string));
    
            var tYPE1Parameter = tYPE1 != null ?
                new ObjectParameter("TYPE1", tYPE1) :
                new ObjectParameter("TYPE1", typeof(string));
    
            var eCODEParameter = eCODE.HasValue ?
                new ObjectParameter("ECODE", eCODE) :
                new ObjectParameter("ECODE", typeof(int));
    
            var uLRTzParameter = uLRTz.HasValue ?
                new ObjectParameter("ULRTz", uLRTz) :
                new ObjectParameter("ULRTz", typeof(int));
    
            var empIDParameter = empID != null ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(string));
    
            var lIndexParameter = lIndex.HasValue ?
                new ObjectParameter("LIndex", lIndex) :
                new ObjectParameter("LIndex", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GPP_InsertLog3", uSERIDParameter, cHECKTIMEParameter, cHECKTYPEParameter, vERIFYCODEParameter, sENSORIDParameter, cKParameter, fUNCTIONKEYParameter, tIDParameter, dOORParameter, resv1Parameter, resv2Parameter, mEMO1Parameter, tYPE1Parameter, eCODEParameter, uLRTzParameter, empIDParameter, lIndexParameter);
        }
    
        public virtual ObjectResult<string> GPP_InsertLog4(Nullable<System.DateTime> cHECKTIME, string cHECKTYPE, Nullable<int> vERIFYCODE, string sENSORID, string cK, Nullable<short> fUNCTIONKEY, Nullable<int> tID, Nullable<int> dOOR, Nullable<short> resv1, Nullable<short> resv2, string mEMO1, string tYPE1, Nullable<int> eCODE, Nullable<int> uLRTz, Nullable<int> lIndex, Nullable<int> zoneid, Nullable<int> typedevice, string cscmain_id, string startfloor, string endfloor, Nullable<System.DateTime> servertime, Nullable<int> liftid)
        {
            var cHECKTIMEParameter = cHECKTIME.HasValue ?
                new ObjectParameter("CHECKTIME", cHECKTIME) :
                new ObjectParameter("CHECKTIME", typeof(System.DateTime));
    
            var cHECKTYPEParameter = cHECKTYPE != null ?
                new ObjectParameter("CHECKTYPE", cHECKTYPE) :
                new ObjectParameter("CHECKTYPE", typeof(string));
    
            var vERIFYCODEParameter = vERIFYCODE.HasValue ?
                new ObjectParameter("VERIFYCODE", vERIFYCODE) :
                new ObjectParameter("VERIFYCODE", typeof(int));
    
            var sENSORIDParameter = sENSORID != null ?
                new ObjectParameter("SENSORID", sENSORID) :
                new ObjectParameter("SENSORID", typeof(string));
    
            var cKParameter = cK != null ?
                new ObjectParameter("CK", cK) :
                new ObjectParameter("CK", typeof(string));
    
            var fUNCTIONKEYParameter = fUNCTIONKEY.HasValue ?
                new ObjectParameter("FUNCTIONKEY", fUNCTIONKEY) :
                new ObjectParameter("FUNCTIONKEY", typeof(short));
    
            var tIDParameter = tID.HasValue ?
                new ObjectParameter("TID", tID) :
                new ObjectParameter("TID", typeof(int));
    
            var dOORParameter = dOOR.HasValue ?
                new ObjectParameter("DOOR", dOOR) :
                new ObjectParameter("DOOR", typeof(int));
    
            var resv1Parameter = resv1.HasValue ?
                new ObjectParameter("resv1", resv1) :
                new ObjectParameter("resv1", typeof(short));
    
            var resv2Parameter = resv2.HasValue ?
                new ObjectParameter("resv2", resv2) :
                new ObjectParameter("resv2", typeof(short));
    
            var mEMO1Parameter = mEMO1 != null ?
                new ObjectParameter("MEMO1", mEMO1) :
                new ObjectParameter("MEMO1", typeof(string));
    
            var tYPE1Parameter = tYPE1 != null ?
                new ObjectParameter("TYPE1", tYPE1) :
                new ObjectParameter("TYPE1", typeof(string));
    
            var eCODEParameter = eCODE.HasValue ?
                new ObjectParameter("ECODE", eCODE) :
                new ObjectParameter("ECODE", typeof(int));
    
            var uLRTzParameter = uLRTz.HasValue ?
                new ObjectParameter("ULRTz", uLRTz) :
                new ObjectParameter("ULRTz", typeof(int));
    
            var lIndexParameter = lIndex.HasValue ?
                new ObjectParameter("LIndex", lIndex) :
                new ObjectParameter("LIndex", typeof(int));
    
            var zoneidParameter = zoneid.HasValue ?
                new ObjectParameter("Zoneid", zoneid) :
                new ObjectParameter("Zoneid", typeof(int));
    
            var typedeviceParameter = typedevice.HasValue ?
                new ObjectParameter("Typedevice", typedevice) :
                new ObjectParameter("Typedevice", typeof(int));
    
            var cscmain_idParameter = cscmain_id != null ?
                new ObjectParameter("Cscmain_id", cscmain_id) :
                new ObjectParameter("Cscmain_id", typeof(string));
    
            var startfloorParameter = startfloor != null ?
                new ObjectParameter("Startfloor", startfloor) :
                new ObjectParameter("Startfloor", typeof(string));
    
            var endfloorParameter = endfloor != null ?
                new ObjectParameter("Endfloor", endfloor) :
                new ObjectParameter("Endfloor", typeof(string));
    
            var servertimeParameter = servertime.HasValue ?
                new ObjectParameter("Servertime", servertime) :
                new ObjectParameter("Servertime", typeof(System.DateTime));
    
            var liftidParameter = liftid.HasValue ?
                new ObjectParameter("liftid", liftid) :
                new ObjectParameter("liftid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GPP_InsertLog4", cHECKTIMEParameter, cHECKTYPEParameter, vERIFYCODEParameter, sENSORIDParameter, cKParameter, fUNCTIONKEYParameter, tIDParameter, dOORParameter, resv1Parameter, resv2Parameter, mEMO1Parameter, tYPE1Parameter, eCODEParameter, uLRTzParameter, lIndexParameter, zoneidParameter, typedeviceParameter, cscmain_idParameter, startfloorParameter, endfloorParameter, servertimeParameter, liftidParameter);
        }
    
        public virtual int GPP_Mslog(Nullable<int> funtionvalue, Nullable<System.DateTime> dateIN, Nullable<int> tID, ObjectParameter mstick, ObjectParameter mstickBalance, string bADGENUMBER, ObjectParameter relayTickStatus, ObjectParameter relayTime)
        {
            var funtionvalueParameter = funtionvalue.HasValue ?
                new ObjectParameter("funtionvalue", funtionvalue) :
                new ObjectParameter("funtionvalue", typeof(int));
    
            var dateINParameter = dateIN.HasValue ?
                new ObjectParameter("DateIN", dateIN) :
                new ObjectParameter("DateIN", typeof(System.DateTime));
    
            var tIDParameter = tID.HasValue ?
                new ObjectParameter("TID", tID) :
                new ObjectParameter("TID", typeof(int));
    
            var bADGENUMBERParameter = bADGENUMBER != null ?
                new ObjectParameter("BADGENUMBER", bADGENUMBER) :
                new ObjectParameter("BADGENUMBER", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GPP_Mslog", funtionvalueParameter, dateINParameter, tIDParameter, mstick, mstickBalance, bADGENUMBERParameter, relayTickStatus, relayTime);
        }
    
        public virtual int GPP_Mslog_OK(Nullable<int> funtionvalue, Nullable<System.DateTime> dateIN, Nullable<int> tID, ObjectParameter mstick, ObjectParameter mstickBalance, string bADGENUMBER, ObjectParameter relayTickStatus, ObjectParameter relayTime)
        {
            var funtionvalueParameter = funtionvalue.HasValue ?
                new ObjectParameter("funtionvalue", funtionvalue) :
                new ObjectParameter("funtionvalue", typeof(int));
    
            var dateINParameter = dateIN.HasValue ?
                new ObjectParameter("DateIN", dateIN) :
                new ObjectParameter("DateIN", typeof(System.DateTime));
    
            var tIDParameter = tID.HasValue ?
                new ObjectParameter("TID", tID) :
                new ObjectParameter("TID", typeof(int));
    
            var bADGENUMBERParameter = bADGENUMBER != null ?
                new ObjectParameter("BADGENUMBER", bADGENUMBER) :
                new ObjectParameter("BADGENUMBER", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GPP_Mslog_OK", funtionvalueParameter, dateINParameter, tIDParameter, mstick, mstickBalance, bADGENUMBERParameter, relayTickStatus, relayTime);
        }
    
        public virtual int GPP_Mslog2(Nullable<int> funtionvalue, Nullable<System.DateTime> dateIN, Nullable<int> tID, ObjectParameter mstick, ObjectParameter mstick1, ObjectParameter mstick2, ObjectParameter mstickBalance, string bADGENUMBER, ObjectParameter relayTickStatus, ObjectParameter relayTime)
        {
            var funtionvalueParameter = funtionvalue.HasValue ?
                new ObjectParameter("funtionvalue", funtionvalue) :
                new ObjectParameter("funtionvalue", typeof(int));
    
            var dateINParameter = dateIN.HasValue ?
                new ObjectParameter("DateIN", dateIN) :
                new ObjectParameter("DateIN", typeof(System.DateTime));
    
            var tIDParameter = tID.HasValue ?
                new ObjectParameter("TID", tID) :
                new ObjectParameter("TID", typeof(int));
    
            var bADGENUMBERParameter = bADGENUMBER != null ?
                new ObjectParameter("BADGENUMBER", bADGENUMBER) :
                new ObjectParameter("BADGENUMBER", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GPP_Mslog2", funtionvalueParameter, dateINParameter, tIDParameter, mstick, mstick1, mstick2, mstickBalance, bADGENUMBERParameter, relayTickStatus, relayTime);
        }
    
        public virtual int GPP_MslogF(Nullable<int> funtionvalue, Nullable<System.DateTime> dateIN, Nullable<int> tID, ObjectParameter mstick, ObjectParameter mstickBalance, string bADGENUMBER, ObjectParameter relayTickStatus, ObjectParameter relayTime, ObjectParameter count)
        {
            var funtionvalueParameter = funtionvalue.HasValue ?
                new ObjectParameter("funtionvalue", funtionvalue) :
                new ObjectParameter("funtionvalue", typeof(int));
    
            var dateINParameter = dateIN.HasValue ?
                new ObjectParameter("DateIN", dateIN) :
                new ObjectParameter("DateIN", typeof(System.DateTime));
    
            var tIDParameter = tID.HasValue ?
                new ObjectParameter("TID", tID) :
                new ObjectParameter("TID", typeof(int));
    
            var bADGENUMBERParameter = bADGENUMBER != null ?
                new ObjectParameter("BADGENUMBER", bADGENUMBER) :
                new ObjectParameter("BADGENUMBER", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GPP_MslogF", funtionvalueParameter, dateINParameter, tIDParameter, mstick, mstickBalance, bADGENUMBERParameter, relayTickStatus, relayTime, count);
        }
    
        public virtual int GPP_SetSecurityByPass(Nullable<int> tID, Nullable<int> port, Nullable<int> mD1, Nullable<int> dS0, Nullable<int> dS1, Nullable<int> dS2, Nullable<int> dS3, Nullable<int> dS4, Nullable<int> dS5, Nullable<int> dS6, Nullable<int> dS7, Nullable<int> dS8)
        {
            var tIDParameter = tID.HasValue ?
                new ObjectParameter("TID", tID) :
                new ObjectParameter("TID", typeof(int));
    
            var portParameter = port.HasValue ?
                new ObjectParameter("Port", port) :
                new ObjectParameter("Port", typeof(int));
    
            var mD1Parameter = mD1.HasValue ?
                new ObjectParameter("MD1", mD1) :
                new ObjectParameter("MD1", typeof(int));
    
            var dS0Parameter = dS0.HasValue ?
                new ObjectParameter("DS0", dS0) :
                new ObjectParameter("DS0", typeof(int));
    
            var dS1Parameter = dS1.HasValue ?
                new ObjectParameter("DS1", dS1) :
                new ObjectParameter("DS1", typeof(int));
    
            var dS2Parameter = dS2.HasValue ?
                new ObjectParameter("DS2", dS2) :
                new ObjectParameter("DS2", typeof(int));
    
            var dS3Parameter = dS3.HasValue ?
                new ObjectParameter("DS3", dS3) :
                new ObjectParameter("DS3", typeof(int));
    
            var dS4Parameter = dS4.HasValue ?
                new ObjectParameter("DS4", dS4) :
                new ObjectParameter("DS4", typeof(int));
    
            var dS5Parameter = dS5.HasValue ?
                new ObjectParameter("DS5", dS5) :
                new ObjectParameter("DS5", typeof(int));
    
            var dS6Parameter = dS6.HasValue ?
                new ObjectParameter("DS6", dS6) :
                new ObjectParameter("DS6", typeof(int));
    
            var dS7Parameter = dS7.HasValue ?
                new ObjectParameter("DS7", dS7) :
                new ObjectParameter("DS7", typeof(int));
    
            var dS8Parameter = dS8.HasValue ?
                new ObjectParameter("DS8", dS8) :
                new ObjectParameter("DS8", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GPP_SetSecurityByPass", tIDParameter, portParameter, mD1Parameter, dS0Parameter, dS1Parameter, dS2Parameter, dS3Parameter, dS4Parameter, dS5Parameter, dS6Parameter, dS7Parameter, dS8Parameter);
        }
    
        public virtual ObjectResult<GPP_UpdateStatus_Result> GPP_UpdateStatus(Nullable<int> tID, Nullable<int> dStatus, string iPaddress)
        {
            var tIDParameter = tID.HasValue ?
                new ObjectParameter("TID", tID) :
                new ObjectParameter("TID", typeof(int));
    
            var dStatusParameter = dStatus.HasValue ?
                new ObjectParameter("DStatus", dStatus) :
                new ObjectParameter("DStatus", typeof(int));
    
            var iPaddressParameter = iPaddress != null ?
                new ObjectParameter("IPaddress", iPaddress) :
                new ObjectParameter("IPaddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GPP_UpdateStatus_Result>("GPP_UpdateStatus", tIDParameter, dStatusParameter, iPaddressParameter);
        }
    
        public virtual ObjectResult<GPP_UpdateStatus2_Result> GPP_UpdateStatus2(Nullable<int> tID, Nullable<int> dStatus, string iPaddress)
        {
            var tIDParameter = tID.HasValue ?
                new ObjectParameter("TID", tID) :
                new ObjectParameter("TID", typeof(int));
    
            var dStatusParameter = dStatus.HasValue ?
                new ObjectParameter("DStatus", dStatus) :
                new ObjectParameter("DStatus", typeof(int));
    
            var iPaddressParameter = iPaddress != null ?
                new ObjectParameter("IPaddress", iPaddress) :
                new ObjectParameter("IPaddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GPP_UpdateStatus2_Result>("GPP_UpdateStatus2", tIDParameter, dStatusParameter, iPaddressParameter);
        }
    
        public virtual ObjectResult<GPP_UpdateStatus3_Result> GPP_UpdateStatus3(Nullable<int> tID, Nullable<int> dStatus, string iPaddress)
        {
            var tIDParameter = tID.HasValue ?
                new ObjectParameter("TID", tID) :
                new ObjectParameter("TID", typeof(int));
    
            var dStatusParameter = dStatus.HasValue ?
                new ObjectParameter("DStatus", dStatus) :
                new ObjectParameter("DStatus", typeof(int));
    
            var iPaddressParameter = iPaddress != null ?
                new ObjectParameter("IPaddress", iPaddress) :
                new ObjectParameter("IPaddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GPP_UpdateStatus3_Result>("GPP_UpdateStatus3", tIDParameter, dStatusParameter, iPaddressParameter);
        }
    
        public virtual int HS_madministratorlog_insert(string adminname1, string name, Nullable<System.DateTime> logdate1, string prg1, string topic1, string subtopic1, Nullable<int> actionFlag1, string oldvalue1, string newvalue1, string memo1, string deviceno, Nullable<int> adminlevel1)
        {
            var adminname1Parameter = adminname1 != null ?
                new ObjectParameter("adminname1", adminname1) :
                new ObjectParameter("adminname1", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var logdate1Parameter = logdate1.HasValue ?
                new ObjectParameter("logdate1", logdate1) :
                new ObjectParameter("logdate1", typeof(System.DateTime));
    
            var prg1Parameter = prg1 != null ?
                new ObjectParameter("prg1", prg1) :
                new ObjectParameter("prg1", typeof(string));
    
            var topic1Parameter = topic1 != null ?
                new ObjectParameter("topic1", topic1) :
                new ObjectParameter("topic1", typeof(string));
    
            var subtopic1Parameter = subtopic1 != null ?
                new ObjectParameter("subtopic1", subtopic1) :
                new ObjectParameter("subtopic1", typeof(string));
    
            var actionFlag1Parameter = actionFlag1.HasValue ?
                new ObjectParameter("actionFlag1", actionFlag1) :
                new ObjectParameter("actionFlag1", typeof(int));
    
            var oldvalue1Parameter = oldvalue1 != null ?
                new ObjectParameter("oldvalue1", oldvalue1) :
                new ObjectParameter("oldvalue1", typeof(string));
    
            var newvalue1Parameter = newvalue1 != null ?
                new ObjectParameter("newvalue1", newvalue1) :
                new ObjectParameter("newvalue1", typeof(string));
    
            var memo1Parameter = memo1 != null ?
                new ObjectParameter("memo1", memo1) :
                new ObjectParameter("memo1", typeof(string));
    
            var devicenoParameter = deviceno != null ?
                new ObjectParameter("deviceno", deviceno) :
                new ObjectParameter("deviceno", typeof(string));
    
            var adminlevel1Parameter = adminlevel1.HasValue ?
                new ObjectParameter("Adminlevel1", adminlevel1) :
                new ObjectParameter("Adminlevel1", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HS_madministratorlog_insert", adminname1Parameter, nameParameter, logdate1Parameter, prg1Parameter, topic1Parameter, subtopic1Parameter, actionFlag1Parameter, oldvalue1Parameter, newvalue1Parameter, memo1Parameter, devicenoParameter, adminlevel1Parameter);
        }
    
        public virtual int insert_adminlog(string userid, string badgenumber, string userName, Nullable<System.DateTime> dateuser, string topic1, string subtopic1, Nullable<int> save1, Nullable<int> edit1, Nullable<int> delete1, Nullable<int> accessprg, Nullable<int> closeprg, string machine, string detailMemo, string memo1)
        {
            var useridParameter = userid != null ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(string));
    
            var badgenumberParameter = badgenumber != null ?
                new ObjectParameter("badgenumber", badgenumber) :
                new ObjectParameter("badgenumber", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var dateuserParameter = dateuser.HasValue ?
                new ObjectParameter("dateuser", dateuser) :
                new ObjectParameter("dateuser", typeof(System.DateTime));
    
            var topic1Parameter = topic1 != null ?
                new ObjectParameter("topic1", topic1) :
                new ObjectParameter("topic1", typeof(string));
    
            var subtopic1Parameter = subtopic1 != null ?
                new ObjectParameter("Subtopic1", subtopic1) :
                new ObjectParameter("Subtopic1", typeof(string));
    
            var save1Parameter = save1.HasValue ?
                new ObjectParameter("save1", save1) :
                new ObjectParameter("save1", typeof(int));
    
            var edit1Parameter = edit1.HasValue ?
                new ObjectParameter("edit1", edit1) :
                new ObjectParameter("edit1", typeof(int));
    
            var delete1Parameter = delete1.HasValue ?
                new ObjectParameter("delete1", delete1) :
                new ObjectParameter("delete1", typeof(int));
    
            var accessprgParameter = accessprg.HasValue ?
                new ObjectParameter("accessprg", accessprg) :
                new ObjectParameter("accessprg", typeof(int));
    
            var closeprgParameter = closeprg.HasValue ?
                new ObjectParameter("closeprg", closeprg) :
                new ObjectParameter("closeprg", typeof(int));
    
            var machineParameter = machine != null ?
                new ObjectParameter("machine", machine) :
                new ObjectParameter("machine", typeof(string));
    
            var detailMemoParameter = detailMemo != null ?
                new ObjectParameter("detailMemo", detailMemo) :
                new ObjectParameter("detailMemo", typeof(string));
    
            var memo1Parameter = memo1 != null ?
                new ObjectParameter("memo1", memo1) :
                new ObjectParameter("memo1", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_adminlog", useridParameter, badgenumberParameter, userNameParameter, dateuserParameter, topic1Parameter, subtopic1Parameter, save1Parameter, edit1Parameter, delete1Parameter, accessprgParameter, closeprgParameter, machineParameter, detailMemoParameter, memo1Parameter);
        }
    
        public virtual int insert_PkAdminsystem(Nullable<int> admin_level_id, string adminname, string password1, string name, string ternsubcode, string terncode, Nullable<int> loginflag, Nullable<System.DateTime> last_Upd, Nullable<int> person_ID, Nullable<System.DateTime> syndate)
        {
            var admin_level_idParameter = admin_level_id.HasValue ?
                new ObjectParameter("admin_level_id", admin_level_id) :
                new ObjectParameter("admin_level_id", typeof(int));
    
            var adminnameParameter = adminname != null ?
                new ObjectParameter("adminname", adminname) :
                new ObjectParameter("adminname", typeof(string));
    
            var password1Parameter = password1 != null ?
                new ObjectParameter("password1", password1) :
                new ObjectParameter("password1", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var ternsubcodeParameter = ternsubcode != null ?
                new ObjectParameter("Ternsubcode", ternsubcode) :
                new ObjectParameter("Ternsubcode", typeof(string));
    
            var terncodeParameter = terncode != null ?
                new ObjectParameter("Terncode", terncode) :
                new ObjectParameter("Terncode", typeof(string));
    
            var loginflagParameter = loginflag.HasValue ?
                new ObjectParameter("loginflag", loginflag) :
                new ObjectParameter("loginflag", typeof(int));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_PkAdminsystem", admin_level_idParameter, adminnameParameter, password1Parameter, nameParameter, ternsubcodeParameter, terncodeParameter, loginflagParameter, last_UpdParameter, person_IDParameter, syndateParameter);
        }
    
        public virtual int insert_PKAdminsystem_levelsub(Nullable<int> admin_level_id, Nullable<int> htag1, Nullable<int> tag1, string topic1, Nullable<int> active1, Nullable<System.DateTime> last_Upd, Nullable<int> person_ID, Nullable<System.DateTime> syndate)
        {
            var admin_level_idParameter = admin_level_id.HasValue ?
                new ObjectParameter("admin_level_id", admin_level_id) :
                new ObjectParameter("admin_level_id", typeof(int));
    
            var htag1Parameter = htag1.HasValue ?
                new ObjectParameter("Htag1", htag1) :
                new ObjectParameter("Htag1", typeof(int));
    
            var tag1Parameter = tag1.HasValue ?
                new ObjectParameter("Tag1", tag1) :
                new ObjectParameter("Tag1", typeof(int));
    
            var topic1Parameter = topic1 != null ?
                new ObjectParameter("Topic1", topic1) :
                new ObjectParameter("Topic1", typeof(string));
    
            var active1Parameter = active1.HasValue ?
                new ObjectParameter("Active1", active1) :
                new ObjectParameter("Active1", typeof(int));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_PKAdminsystem_levelsub", admin_level_idParameter, htag1Parameter, tag1Parameter, topic1Parameter, active1Parameter, last_UpdParameter, person_IDParameter, syndateParameter);
        }
    
        public virtual int insert_PkAdminweb(Nullable<int> admin_level_id, string adminname, string password1, string name, string ternsubcode, string terncode, string iplogin, Nullable<System.DateTime> last_Upd, Nullable<int> person_ID, Nullable<System.DateTime> syndate)
        {
            var admin_level_idParameter = admin_level_id.HasValue ?
                new ObjectParameter("admin_level_id", admin_level_id) :
                new ObjectParameter("admin_level_id", typeof(int));
    
            var adminnameParameter = adminname != null ?
                new ObjectParameter("adminname", adminname) :
                new ObjectParameter("adminname", typeof(string));
    
            var password1Parameter = password1 != null ?
                new ObjectParameter("password1", password1) :
                new ObjectParameter("password1", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var ternsubcodeParameter = ternsubcode != null ?
                new ObjectParameter("Ternsubcode", ternsubcode) :
                new ObjectParameter("Ternsubcode", typeof(string));
    
            var terncodeParameter = terncode != null ?
                new ObjectParameter("Terncode", terncode) :
                new ObjectParameter("Terncode", typeof(string));
    
            var iploginParameter = iplogin != null ?
                new ObjectParameter("Iplogin", iplogin) :
                new ObjectParameter("Iplogin", typeof(string));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_PkAdminweb", admin_level_idParameter, adminnameParameter, password1Parameter, nameParameter, ternsubcodeParameter, terncodeParameter, iploginParameter, last_UpdParameter, person_IDParameter, syndateParameter);
        }
    
        public virtual int insert_Pkadminweb_levelsub(Nullable<int> admin_level_id, Nullable<int> htag1, Nullable<int> tag1, string topic1, Nullable<int> active1, Nullable<System.DateTime> last_Upd, Nullable<int> person_ID, Nullable<System.DateTime> syndate)
        {
            var admin_level_idParameter = admin_level_id.HasValue ?
                new ObjectParameter("admin_level_id", admin_level_id) :
                new ObjectParameter("admin_level_id", typeof(int));
    
            var htag1Parameter = htag1.HasValue ?
                new ObjectParameter("Htag1", htag1) :
                new ObjectParameter("Htag1", typeof(int));
    
            var tag1Parameter = tag1.HasValue ?
                new ObjectParameter("Tag1", tag1) :
                new ObjectParameter("Tag1", typeof(int));
    
            var topic1Parameter = topic1 != null ?
                new ObjectParameter("Topic1", topic1) :
                new ObjectParameter("Topic1", typeof(string));
    
            var active1Parameter = active1.HasValue ?
                new ObjectParameter("Active1", active1) :
                new ObjectParameter("Active1", typeof(int));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_Pkadminweb_levelsub", admin_level_idParameter, htag1Parameter, tag1Parameter, topic1Parameter, active1Parameter, last_UpdParameter, person_IDParameter, syndateParameter);
        }
    
        public virtual int insert_PkCard(string scr_No, string cscMain_ID, string rabbit_ID, string custNo, string fname, string lname, string sex, string tel, Nullable<System.DateTime> birthday, string terncode, string ternSubCode, Nullable<int> cardType_ID, string carId, string carModel, Nullable<System.DateTime> issueDate, Nullable<int> issuesite_id, Nullable<int> issueLoc_ID, Nullable<int> issueEquip_ID, Nullable<System.DateTime> expDate, Nullable<System.DateTime> firstUse, Nullable<System.DateTime> lastUse, Nullable<int> lastLoc_ID, string last_Equip_ID, Nullable<int> status, string initCredit, Nullable<decimal> remainCredit, Nullable<decimal> earnest, Nullable<int> totalUse, Nullable<int> totalRides, Nullable<decimal> totalDeductCredit, Nullable<decimal> totalAddCredit, Nullable<decimal> totalBonusCredit, string occupied, string remark, string lastcscmain_id, string cardContact, string cartype, string cardType, string activecard, Nullable<System.DateTime> last_Upd, Nullable<int> person_ID, Nullable<System.DateTime> dateActive, string pay, string statuspay, string lastscr_no, Nullable<System.DateTime> syndate)
        {
            var scr_NoParameter = scr_No != null ?
                new ObjectParameter("Scr_No", scr_No) :
                new ObjectParameter("Scr_No", typeof(string));
    
            var cscMain_IDParameter = cscMain_ID != null ?
                new ObjectParameter("CscMain_ID", cscMain_ID) :
                new ObjectParameter("CscMain_ID", typeof(string));
    
            var rabbit_IDParameter = rabbit_ID != null ?
                new ObjectParameter("Rabbit_ID", rabbit_ID) :
                new ObjectParameter("Rabbit_ID", typeof(string));
    
            var custNoParameter = custNo != null ?
                new ObjectParameter("CustNo", custNo) :
                new ObjectParameter("CustNo", typeof(string));
    
            var fnameParameter = fname != null ?
                new ObjectParameter("Fname", fname) :
                new ObjectParameter("Fname", typeof(string));
    
            var lnameParameter = lname != null ?
                new ObjectParameter("Lname", lname) :
                new ObjectParameter("Lname", typeof(string));
    
            var sexParameter = sex != null ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(string));
    
            var telParameter = tel != null ?
                new ObjectParameter("Tel", tel) :
                new ObjectParameter("Tel", typeof(string));
    
            var birthdayParameter = birthday.HasValue ?
                new ObjectParameter("Birthday", birthday) :
                new ObjectParameter("Birthday", typeof(System.DateTime));
    
            var terncodeParameter = terncode != null ?
                new ObjectParameter("Terncode", terncode) :
                new ObjectParameter("Terncode", typeof(string));
    
            var ternSubCodeParameter = ternSubCode != null ?
                new ObjectParameter("TernSubCode", ternSubCode) :
                new ObjectParameter("TernSubCode", typeof(string));
    
            var cardType_IDParameter = cardType_ID.HasValue ?
                new ObjectParameter("CardType_ID", cardType_ID) :
                new ObjectParameter("CardType_ID", typeof(int));
    
            var carIdParameter = carId != null ?
                new ObjectParameter("CarId", carId) :
                new ObjectParameter("CarId", typeof(string));
    
            var carModelParameter = carModel != null ?
                new ObjectParameter("CarModel", carModel) :
                new ObjectParameter("CarModel", typeof(string));
    
            var issueDateParameter = issueDate.HasValue ?
                new ObjectParameter("IssueDate", issueDate) :
                new ObjectParameter("IssueDate", typeof(System.DateTime));
    
            var issuesite_idParameter = issuesite_id.HasValue ?
                new ObjectParameter("Issuesite_id", issuesite_id) :
                new ObjectParameter("Issuesite_id", typeof(int));
    
            var issueLoc_IDParameter = issueLoc_ID.HasValue ?
                new ObjectParameter("IssueLoc_ID", issueLoc_ID) :
                new ObjectParameter("IssueLoc_ID", typeof(int));
    
            var issueEquip_IDParameter = issueEquip_ID.HasValue ?
                new ObjectParameter("IssueEquip_ID", issueEquip_ID) :
                new ObjectParameter("IssueEquip_ID", typeof(int));
    
            var expDateParameter = expDate.HasValue ?
                new ObjectParameter("ExpDate", expDate) :
                new ObjectParameter("ExpDate", typeof(System.DateTime));
    
            var firstUseParameter = firstUse.HasValue ?
                new ObjectParameter("FirstUse", firstUse) :
                new ObjectParameter("FirstUse", typeof(System.DateTime));
    
            var lastUseParameter = lastUse.HasValue ?
                new ObjectParameter("LastUse", lastUse) :
                new ObjectParameter("LastUse", typeof(System.DateTime));
    
            var lastLoc_IDParameter = lastLoc_ID.HasValue ?
                new ObjectParameter("LastLoc_ID", lastLoc_ID) :
                new ObjectParameter("LastLoc_ID", typeof(int));
    
            var last_Equip_IDParameter = last_Equip_ID != null ?
                new ObjectParameter("Last_Equip_ID", last_Equip_ID) :
                new ObjectParameter("Last_Equip_ID", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var initCreditParameter = initCredit != null ?
                new ObjectParameter("InitCredit", initCredit) :
                new ObjectParameter("InitCredit", typeof(string));
    
            var remainCreditParameter = remainCredit.HasValue ?
                new ObjectParameter("RemainCredit", remainCredit) :
                new ObjectParameter("RemainCredit", typeof(decimal));
    
            var earnestParameter = earnest.HasValue ?
                new ObjectParameter("Earnest", earnest) :
                new ObjectParameter("Earnest", typeof(decimal));
    
            var totalUseParameter = totalUse.HasValue ?
                new ObjectParameter("TotalUse", totalUse) :
                new ObjectParameter("TotalUse", typeof(int));
    
            var totalRidesParameter = totalRides.HasValue ?
                new ObjectParameter("TotalRides", totalRides) :
                new ObjectParameter("TotalRides", typeof(int));
    
            var totalDeductCreditParameter = totalDeductCredit.HasValue ?
                new ObjectParameter("TotalDeductCredit", totalDeductCredit) :
                new ObjectParameter("TotalDeductCredit", typeof(decimal));
    
            var totalAddCreditParameter = totalAddCredit.HasValue ?
                new ObjectParameter("TotalAddCredit", totalAddCredit) :
                new ObjectParameter("TotalAddCredit", typeof(decimal));
    
            var totalBonusCreditParameter = totalBonusCredit.HasValue ?
                new ObjectParameter("TotalBonusCredit", totalBonusCredit) :
                new ObjectParameter("TotalBonusCredit", typeof(decimal));
    
            var occupiedParameter = occupied != null ?
                new ObjectParameter("Occupied", occupied) :
                new ObjectParameter("Occupied", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var lastcscmain_idParameter = lastcscmain_id != null ?
                new ObjectParameter("Lastcscmain_id", lastcscmain_id) :
                new ObjectParameter("Lastcscmain_id", typeof(string));
    
            var cardContactParameter = cardContact != null ?
                new ObjectParameter("CardContact", cardContact) :
                new ObjectParameter("CardContact", typeof(string));
    
            var cartypeParameter = cartype != null ?
                new ObjectParameter("Cartype", cartype) :
                new ObjectParameter("Cartype", typeof(string));
    
            var cardTypeParameter = cardType != null ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(string));
    
            var activecardParameter = activecard != null ?
                new ObjectParameter("Activecard", activecard) :
                new ObjectParameter("Activecard", typeof(string));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var dateActiveParameter = dateActive.HasValue ?
                new ObjectParameter("DateActive", dateActive) :
                new ObjectParameter("DateActive", typeof(System.DateTime));
    
            var payParameter = pay != null ?
                new ObjectParameter("Pay", pay) :
                new ObjectParameter("Pay", typeof(string));
    
            var statuspayParameter = statuspay != null ?
                new ObjectParameter("Statuspay", statuspay) :
                new ObjectParameter("Statuspay", typeof(string));
    
            var lastscr_noParameter = lastscr_no != null ?
                new ObjectParameter("Lastscr_no", lastscr_no) :
                new ObjectParameter("Lastscr_no", typeof(string));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_PkCard", scr_NoParameter, cscMain_IDParameter, rabbit_IDParameter, custNoParameter, fnameParameter, lnameParameter, sexParameter, telParameter, birthdayParameter, terncodeParameter, ternSubCodeParameter, cardType_IDParameter, carIdParameter, carModelParameter, issueDateParameter, issuesite_idParameter, issueLoc_IDParameter, issueEquip_IDParameter, expDateParameter, firstUseParameter, lastUseParameter, lastLoc_IDParameter, last_Equip_IDParameter, statusParameter, initCreditParameter, remainCreditParameter, earnestParameter, totalUseParameter, totalRidesParameter, totalDeductCreditParameter, totalAddCreditParameter, totalBonusCreditParameter, occupiedParameter, remarkParameter, lastcscmain_idParameter, cardContactParameter, cartypeParameter, cardTypeParameter, activecardParameter, last_UpdParameter, person_IDParameter, dateActiveParameter, payParameter, statuspayParameter, lastscr_noParameter, syndateParameter);
        }
    
        public virtual int insert_PkCardType(Nullable<int> cardType_Id, string zdesc, Nullable<int> cashpay, string cartype, Nullable<System.DateTime> last_Upd, Nullable<int> person_ID, Nullable<System.DateTime> syndate)
        {
            var cardType_IdParameter = cardType_Id.HasValue ?
                new ObjectParameter("CardType_Id", cardType_Id) :
                new ObjectParameter("CardType_Id", typeof(int));
    
            var zdescParameter = zdesc != null ?
                new ObjectParameter("Zdesc", zdesc) :
                new ObjectParameter("Zdesc", typeof(string));
    
            var cashpayParameter = cashpay.HasValue ?
                new ObjectParameter("cashpay", cashpay) :
                new ObjectParameter("cashpay", typeof(int));
    
            var cartypeParameter = cartype != null ?
                new ObjectParameter("cartype", cartype) :
                new ObjectParameter("cartype", typeof(string));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_PkCardType", cardType_IdParameter, zdescParameter, cashpayParameter, cartypeParameter, last_UpdParameter, person_IDParameter, syndateParameter);
        }
    
        public virtual int insert_PkCustomer(string custNo, string ternCode, string ternSubCode, string fName, string lName, string addr1, string addr2, string zipcode, string tel, string mobile, byte[] pic, string carID, string carModel, string carID1, string carModel1, string carID2, string carModel2, string sex, Nullable<System.DateTime> birthday, Nullable<decimal> payMonth, string ctzID, Nullable<System.DateTime> last_Upd, Nullable<int> person_ID, string imagepaths, Nullable<System.DateTime> syndate)
        {
            var custNoParameter = custNo != null ?
                new ObjectParameter("CustNo", custNo) :
                new ObjectParameter("CustNo", typeof(string));
    
            var ternCodeParameter = ternCode != null ?
                new ObjectParameter("TernCode", ternCode) :
                new ObjectParameter("TernCode", typeof(string));
    
            var ternSubCodeParameter = ternSubCode != null ?
                new ObjectParameter("TernSubCode", ternSubCode) :
                new ObjectParameter("TernSubCode", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var lNameParameter = lName != null ?
                new ObjectParameter("LName", lName) :
                new ObjectParameter("LName", typeof(string));
    
            var addr1Parameter = addr1 != null ?
                new ObjectParameter("Addr1", addr1) :
                new ObjectParameter("Addr1", typeof(string));
    
            var addr2Parameter = addr2 != null ?
                new ObjectParameter("Addr2", addr2) :
                new ObjectParameter("Addr2", typeof(string));
    
            var zipcodeParameter = zipcode != null ?
                new ObjectParameter("Zipcode", zipcode) :
                new ObjectParameter("Zipcode", typeof(string));
    
            var telParameter = tel != null ?
                new ObjectParameter("Tel", tel) :
                new ObjectParameter("Tel", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var picParameter = pic != null ?
                new ObjectParameter("Pic", pic) :
                new ObjectParameter("Pic", typeof(byte[]));
    
            var carIDParameter = carID != null ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(string));
    
            var carModelParameter = carModel != null ?
                new ObjectParameter("CarModel", carModel) :
                new ObjectParameter("CarModel", typeof(string));
    
            var carID1Parameter = carID1 != null ?
                new ObjectParameter("CarID1", carID1) :
                new ObjectParameter("CarID1", typeof(string));
    
            var carModel1Parameter = carModel1 != null ?
                new ObjectParameter("CarModel1", carModel1) :
                new ObjectParameter("CarModel1", typeof(string));
    
            var carID2Parameter = carID2 != null ?
                new ObjectParameter("CarID2", carID2) :
                new ObjectParameter("CarID2", typeof(string));
    
            var carModel2Parameter = carModel2 != null ?
                new ObjectParameter("CarModel2", carModel2) :
                new ObjectParameter("CarModel2", typeof(string));
    
            var sexParameter = sex != null ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(string));
    
            var birthdayParameter = birthday.HasValue ?
                new ObjectParameter("Birthday", birthday) :
                new ObjectParameter("Birthday", typeof(System.DateTime));
    
            var payMonthParameter = payMonth.HasValue ?
                new ObjectParameter("PayMonth", payMonth) :
                new ObjectParameter("PayMonth", typeof(decimal));
    
            var ctzIDParameter = ctzID != null ?
                new ObjectParameter("CtzID", ctzID) :
                new ObjectParameter("CtzID", typeof(string));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var imagepathsParameter = imagepaths != null ?
                new ObjectParameter("Imagepaths", imagepaths) :
                new ObjectParameter("Imagepaths", typeof(string));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_PkCustomer", custNoParameter, ternCodeParameter, ternSubCodeParameter, fNameParameter, lNameParameter, addr1Parameter, addr2Parameter, zipcodeParameter, telParameter, mobileParameter, picParameter, carIDParameter, carModelParameter, carID1Parameter, carModel1Parameter, carID2Parameter, carModel2Parameter, sexParameter, birthdayParameter, payMonthParameter, ctzIDParameter, last_UpdParameter, person_IDParameter, imagepathsParameter, syndateParameter);
        }
    
        public virtual int insert_PkDepartments(string companyID, string terncode, string deptID, string deptName, string zdesc, string supDepID, Nullable<int> level1, Nullable<System.DateTime> last_Upd, Nullable<int> person_ID, string memo, string no1, string moo, string soi, string street, string subdistrict, string district, string province, string zipcode, string tel1, string tel2, string floor, string taxID, Nullable<int> loc_ID, Nullable<int> typeCompany, string typebill, string groupbill, Nullable<System.DateTime> syndate, Nullable<int> gdoorID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            var terncodeParameter = terncode != null ?
                new ObjectParameter("Terncode", terncode) :
                new ObjectParameter("Terncode", typeof(string));
    
            var deptIDParameter = deptID != null ?
                new ObjectParameter("DeptID", deptID) :
                new ObjectParameter("DeptID", typeof(string));
    
            var deptNameParameter = deptName != null ?
                new ObjectParameter("DeptName", deptName) :
                new ObjectParameter("DeptName", typeof(string));
    
            var zdescParameter = zdesc != null ?
                new ObjectParameter("Zdesc", zdesc) :
                new ObjectParameter("Zdesc", typeof(string));
    
            var supDepIDParameter = supDepID != null ?
                new ObjectParameter("SupDepID", supDepID) :
                new ObjectParameter("SupDepID", typeof(string));
    
            var level1Parameter = level1.HasValue ?
                new ObjectParameter("Level1", level1) :
                new ObjectParameter("Level1", typeof(int));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var memoParameter = memo != null ?
                new ObjectParameter("Memo", memo) :
                new ObjectParameter("Memo", typeof(string));
    
            var no1Parameter = no1 != null ?
                new ObjectParameter("No1", no1) :
                new ObjectParameter("No1", typeof(string));
    
            var mooParameter = moo != null ?
                new ObjectParameter("Moo", moo) :
                new ObjectParameter("Moo", typeof(string));
    
            var soiParameter = soi != null ?
                new ObjectParameter("Soi", soi) :
                new ObjectParameter("Soi", typeof(string));
    
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var subdistrictParameter = subdistrict != null ?
                new ObjectParameter("Subdistrict", subdistrict) :
                new ObjectParameter("Subdistrict", typeof(string));
    
            var districtParameter = district != null ?
                new ObjectParameter("District", district) :
                new ObjectParameter("District", typeof(string));
    
            var provinceParameter = province != null ?
                new ObjectParameter("Province", province) :
                new ObjectParameter("Province", typeof(string));
    
            var zipcodeParameter = zipcode != null ?
                new ObjectParameter("Zipcode", zipcode) :
                new ObjectParameter("Zipcode", typeof(string));
    
            var tel1Parameter = tel1 != null ?
                new ObjectParameter("Tel1", tel1) :
                new ObjectParameter("Tel1", typeof(string));
    
            var tel2Parameter = tel2 != null ?
                new ObjectParameter("Tel2", tel2) :
                new ObjectParameter("Tel2", typeof(string));
    
            var floorParameter = floor != null ?
                new ObjectParameter("Floor", floor) :
                new ObjectParameter("Floor", typeof(string));
    
            var taxIDParameter = taxID != null ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(string));
    
            var loc_IDParameter = loc_ID.HasValue ?
                new ObjectParameter("Loc_ID", loc_ID) :
                new ObjectParameter("Loc_ID", typeof(int));
    
            var typeCompanyParameter = typeCompany.HasValue ?
                new ObjectParameter("TypeCompany", typeCompany) :
                new ObjectParameter("TypeCompany", typeof(int));
    
            var typebillParameter = typebill != null ?
                new ObjectParameter("Typebill", typebill) :
                new ObjectParameter("Typebill", typeof(string));
    
            var groupbillParameter = groupbill != null ?
                new ObjectParameter("Groupbill", groupbill) :
                new ObjectParameter("Groupbill", typeof(string));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            var gdoorIDParameter = gdoorID.HasValue ?
                new ObjectParameter("GdoorID", gdoorID) :
                new ObjectParameter("GdoorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_PkDepartments", companyIDParameter, terncodeParameter, deptIDParameter, deptNameParameter, zdescParameter, supDepIDParameter, level1Parameter, last_UpdParameter, person_IDParameter, memoParameter, no1Parameter, mooParameter, soiParameter, streetParameter, subdistrictParameter, districtParameter, provinceParameter, zipcodeParameter, tel1Parameter, tel2Parameter, floorParameter, taxIDParameter, loc_IDParameter, typeCompanyParameter, typebillParameter, groupbillParameter, syndateParameter, gdoorIDParameter);
        }
    
        public virtual int insert_PkEquip(Nullable<int> equip_ID, string site_ID, Nullable<int> loc_ID, string zdesc, Nullable<int> mode, Nullable<int> status, string ipaddress, string servername, string username, string password1, Nullable<System.DateTime> last_Upd, Nullable<int> person_ID, Nullable<System.DateTime> syndate)
        {
            var equip_IDParameter = equip_ID.HasValue ?
                new ObjectParameter("Equip_ID", equip_ID) :
                new ObjectParameter("Equip_ID", typeof(int));
    
            var site_IDParameter = site_ID != null ?
                new ObjectParameter("Site_ID", site_ID) :
                new ObjectParameter("Site_ID", typeof(string));
    
            var loc_IDParameter = loc_ID.HasValue ?
                new ObjectParameter("Loc_ID", loc_ID) :
                new ObjectParameter("Loc_ID", typeof(int));
    
            var zdescParameter = zdesc != null ?
                new ObjectParameter("Zdesc", zdesc) :
                new ObjectParameter("Zdesc", typeof(string));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var ipaddressParameter = ipaddress != null ?
                new ObjectParameter("Ipaddress", ipaddress) :
                new ObjectParameter("Ipaddress", typeof(string));
    
            var servernameParameter = servername != null ?
                new ObjectParameter("Servername", servername) :
                new ObjectParameter("Servername", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var password1Parameter = password1 != null ?
                new ObjectParameter("password1", password1) :
                new ObjectParameter("password1", typeof(string));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_PkEquip", equip_IDParameter, site_IDParameter, loc_IDParameter, zdescParameter, modeParameter, statusParameter, ipaddressParameter, servernameParameter, usernameParameter, password1Parameter, last_UpdParameter, person_IDParameter, syndateParameter);
        }
    
        public virtual int insert_PkFareMedia(Nullable<int> faremedia_ID, Nullable<int> loc_Id, string zdesc, Nullable<decimal> lostCard_Fine, Nullable<decimal> notEnoughCredit_Fine, Nullable<decimal> wrongInOut_Fine, Nullable<decimal> earnest, Nullable<decimal> lostSlip_Fine, Nullable<short> overDay_Hr, Nullable<short> minute2Hour, Nullable<short> freeMinute, Nullable<System.DateTime> last_Upd, Nullable<int> person_ID, Nullable<System.DateTime> startUse, Nullable<System.DateTime> stopUse, Nullable<decimal> issuecard_fee, Nullable<decimal> feeperday, Nullable<short> hourpackageperday, Nullable<System.DateTime> syndate, Nullable<decimal> lostCard_motor_Fine)
        {
            var faremedia_IDParameter = faremedia_ID.HasValue ?
                new ObjectParameter("Faremedia_ID", faremedia_ID) :
                new ObjectParameter("Faremedia_ID", typeof(int));
    
            var loc_IdParameter = loc_Id.HasValue ?
                new ObjectParameter("Loc_Id", loc_Id) :
                new ObjectParameter("Loc_Id", typeof(int));
    
            var zdescParameter = zdesc != null ?
                new ObjectParameter("Zdesc", zdesc) :
                new ObjectParameter("Zdesc", typeof(string));
    
            var lostCard_FineParameter = lostCard_Fine.HasValue ?
                new ObjectParameter("LostCard_Fine", lostCard_Fine) :
                new ObjectParameter("LostCard_Fine", typeof(decimal));
    
            var notEnoughCredit_FineParameter = notEnoughCredit_Fine.HasValue ?
                new ObjectParameter("NotEnoughCredit_Fine", notEnoughCredit_Fine) :
                new ObjectParameter("NotEnoughCredit_Fine", typeof(decimal));
    
            var wrongInOut_FineParameter = wrongInOut_Fine.HasValue ?
                new ObjectParameter("WrongInOut_Fine", wrongInOut_Fine) :
                new ObjectParameter("WrongInOut_Fine", typeof(decimal));
    
            var earnestParameter = earnest.HasValue ?
                new ObjectParameter("Earnest", earnest) :
                new ObjectParameter("Earnest", typeof(decimal));
    
            var lostSlip_FineParameter = lostSlip_Fine.HasValue ?
                new ObjectParameter("LostSlip_Fine", lostSlip_Fine) :
                new ObjectParameter("LostSlip_Fine", typeof(decimal));
    
            var overDay_HrParameter = overDay_Hr.HasValue ?
                new ObjectParameter("OverDay_Hr", overDay_Hr) :
                new ObjectParameter("OverDay_Hr", typeof(short));
    
            var minute2HourParameter = minute2Hour.HasValue ?
                new ObjectParameter("Minute2Hour", minute2Hour) :
                new ObjectParameter("Minute2Hour", typeof(short));
    
            var freeMinuteParameter = freeMinute.HasValue ?
                new ObjectParameter("FreeMinute", freeMinute) :
                new ObjectParameter("FreeMinute", typeof(short));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var startUseParameter = startUse.HasValue ?
                new ObjectParameter("StartUse", startUse) :
                new ObjectParameter("StartUse", typeof(System.DateTime));
    
            var stopUseParameter = stopUse.HasValue ?
                new ObjectParameter("StopUse", stopUse) :
                new ObjectParameter("StopUse", typeof(System.DateTime));
    
            var issuecard_feeParameter = issuecard_fee.HasValue ?
                new ObjectParameter("Issuecard_fee", issuecard_fee) :
                new ObjectParameter("Issuecard_fee", typeof(decimal));
    
            var feeperdayParameter = feeperday.HasValue ?
                new ObjectParameter("Feeperday", feeperday) :
                new ObjectParameter("Feeperday", typeof(decimal));
    
            var hourpackageperdayParameter = hourpackageperday.HasValue ?
                new ObjectParameter("Hourpackageperday", hourpackageperday) :
                new ObjectParameter("Hourpackageperday", typeof(short));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            var lostCard_motor_FineParameter = lostCard_motor_Fine.HasValue ?
                new ObjectParameter("LostCard_motor_Fine", lostCard_motor_Fine) :
                new ObjectParameter("LostCard_motor_Fine", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_PkFareMedia", faremedia_IDParameter, loc_IdParameter, zdescParameter, lostCard_FineParameter, notEnoughCredit_FineParameter, wrongInOut_FineParameter, earnestParameter, lostSlip_FineParameter, overDay_HrParameter, minute2HourParameter, freeMinuteParameter, last_UpdParameter, person_IDParameter, startUseParameter, stopUseParameter, issuecard_feeParameter, feeperdayParameter, hourpackageperdayParameter, syndateParameter, lostCard_motor_FineParameter);
        }
    
        public virtual int insert_PkFaremedia_Cardtype(Nullable<int> fareMedia_ID, Nullable<int> loc_ID, Nullable<int> cardType_ID, string payMonthFlg, string printSlipFlg, Nullable<int> validPeriod, Nullable<int> specialPeriod, string eventAccept, string eventCode, string eventPrice, string holAccept, string holCode, string holPrice, string weekAccept, string weekCode, string weekPrice, string normalAccept, string normalPrice, Nullable<short> validWarnDay, string useCount, Nullable<System.DateTime> last_Upd, string person_ID, string addCreditFlag, string minCreditFlag, string negCreditFlag, string initCredit, Nullable<int> purchaseType, string oneDayFlag, string alarmFlag, string bonusFlag, Nullable<int> bonustype, Nullable<System.DateTime> syndate)
        {
            var fareMedia_IDParameter = fareMedia_ID.HasValue ?
                new ObjectParameter("FareMedia_ID", fareMedia_ID) :
                new ObjectParameter("FareMedia_ID", typeof(int));
    
            var loc_IDParameter = loc_ID.HasValue ?
                new ObjectParameter("Loc_ID", loc_ID) :
                new ObjectParameter("Loc_ID", typeof(int));
    
            var cardType_IDParameter = cardType_ID.HasValue ?
                new ObjectParameter("CardType_ID", cardType_ID) :
                new ObjectParameter("CardType_ID", typeof(int));
    
            var payMonthFlgParameter = payMonthFlg != null ?
                new ObjectParameter("PayMonthFlg", payMonthFlg) :
                new ObjectParameter("PayMonthFlg", typeof(string));
    
            var printSlipFlgParameter = printSlipFlg != null ?
                new ObjectParameter("PrintSlipFlg", printSlipFlg) :
                new ObjectParameter("PrintSlipFlg", typeof(string));
    
            var validPeriodParameter = validPeriod.HasValue ?
                new ObjectParameter("ValidPeriod", validPeriod) :
                new ObjectParameter("ValidPeriod", typeof(int));
    
            var specialPeriodParameter = specialPeriod.HasValue ?
                new ObjectParameter("SpecialPeriod", specialPeriod) :
                new ObjectParameter("SpecialPeriod", typeof(int));
    
            var eventAcceptParameter = eventAccept != null ?
                new ObjectParameter("EventAccept", eventAccept) :
                new ObjectParameter("EventAccept", typeof(string));
    
            var eventCodeParameter = eventCode != null ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(string));
    
            var eventPriceParameter = eventPrice != null ?
                new ObjectParameter("EventPrice", eventPrice) :
                new ObjectParameter("EventPrice", typeof(string));
    
            var holAcceptParameter = holAccept != null ?
                new ObjectParameter("HolAccept", holAccept) :
                new ObjectParameter("HolAccept", typeof(string));
    
            var holCodeParameter = holCode != null ?
                new ObjectParameter("HolCode", holCode) :
                new ObjectParameter("HolCode", typeof(string));
    
            var holPriceParameter = holPrice != null ?
                new ObjectParameter("HolPrice", holPrice) :
                new ObjectParameter("HolPrice", typeof(string));
    
            var weekAcceptParameter = weekAccept != null ?
                new ObjectParameter("WeekAccept", weekAccept) :
                new ObjectParameter("WeekAccept", typeof(string));
    
            var weekCodeParameter = weekCode != null ?
                new ObjectParameter("WeekCode", weekCode) :
                new ObjectParameter("WeekCode", typeof(string));
    
            var weekPriceParameter = weekPrice != null ?
                new ObjectParameter("WeekPrice", weekPrice) :
                new ObjectParameter("WeekPrice", typeof(string));
    
            var normalAcceptParameter = normalAccept != null ?
                new ObjectParameter("NormalAccept", normalAccept) :
                new ObjectParameter("NormalAccept", typeof(string));
    
            var normalPriceParameter = normalPrice != null ?
                new ObjectParameter("NormalPrice", normalPrice) :
                new ObjectParameter("NormalPrice", typeof(string));
    
            var validWarnDayParameter = validWarnDay.HasValue ?
                new ObjectParameter("ValidWarnDay", validWarnDay) :
                new ObjectParameter("ValidWarnDay", typeof(short));
    
            var useCountParameter = useCount != null ?
                new ObjectParameter("UseCount", useCount) :
                new ObjectParameter("UseCount", typeof(string));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID != null ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(string));
    
            var addCreditFlagParameter = addCreditFlag != null ?
                new ObjectParameter("AddCreditFlag", addCreditFlag) :
                new ObjectParameter("AddCreditFlag", typeof(string));
    
            var minCreditFlagParameter = minCreditFlag != null ?
                new ObjectParameter("MinCreditFlag", minCreditFlag) :
                new ObjectParameter("MinCreditFlag", typeof(string));
    
            var negCreditFlagParameter = negCreditFlag != null ?
                new ObjectParameter("NegCreditFlag", negCreditFlag) :
                new ObjectParameter("NegCreditFlag", typeof(string));
    
            var initCreditParameter = initCredit != null ?
                new ObjectParameter("InitCredit", initCredit) :
                new ObjectParameter("InitCredit", typeof(string));
    
            var purchaseTypeParameter = purchaseType.HasValue ?
                new ObjectParameter("PurchaseType", purchaseType) :
                new ObjectParameter("PurchaseType", typeof(int));
    
            var oneDayFlagParameter = oneDayFlag != null ?
                new ObjectParameter("OneDayFlag", oneDayFlag) :
                new ObjectParameter("OneDayFlag", typeof(string));
    
            var alarmFlagParameter = alarmFlag != null ?
                new ObjectParameter("AlarmFlag", alarmFlag) :
                new ObjectParameter("AlarmFlag", typeof(string));
    
            var bonusFlagParameter = bonusFlag != null ?
                new ObjectParameter("BonusFlag", bonusFlag) :
                new ObjectParameter("BonusFlag", typeof(string));
    
            var bonustypeParameter = bonustype.HasValue ?
                new ObjectParameter("Bonustype", bonustype) :
                new ObjectParameter("Bonustype", typeof(int));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_PkFaremedia_Cardtype", fareMedia_IDParameter, loc_IDParameter, cardType_IDParameter, payMonthFlgParameter, printSlipFlgParameter, validPeriodParameter, specialPeriodParameter, eventAcceptParameter, eventCodeParameter, eventPriceParameter, holAcceptParameter, holCodeParameter, holPriceParameter, weekAcceptParameter, weekCodeParameter, weekPriceParameter, normalAcceptParameter, normalPriceParameter, validWarnDayParameter, useCountParameter, last_UpdParameter, person_IDParameter, addCreditFlagParameter, minCreditFlagParameter, negCreditFlagParameter, initCreditParameter, purchaseTypeParameter, oneDayFlagParameter, alarmFlagParameter, bonusFlagParameter, bonustypeParameter, syndateParameter);
        }
    
        public virtual int insert_PkHoliday(string holCode, string zDesc, Nullable<System.DateTime> last_Upd, Nullable<int> person_ID, Nullable<System.DateTime> syndate)
        {
            var holCodeParameter = holCode != null ?
                new ObjectParameter("HolCode", holCode) :
                new ObjectParameter("HolCode", typeof(string));
    
            var zDescParameter = zDesc != null ?
                new ObjectParameter("ZDesc", zDesc) :
                new ObjectParameter("ZDesc", typeof(string));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_PkHoliday", holCodeParameter, zDescParameter, last_UpdParameter, person_IDParameter, syndateParameter);
        }
    
        public virtual int insert_PkHolidayD(string holCode, string itemCode, Nullable<System.DateTime> zDate, string zDesc, Nullable<System.DateTime> last_Upd, Nullable<int> person_ID, Nullable<System.DateTime> syndate)
        {
            var holCodeParameter = holCode != null ?
                new ObjectParameter("HolCode", holCode) :
                new ObjectParameter("HolCode", typeof(string));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var zDateParameter = zDate.HasValue ?
                new ObjectParameter("ZDate", zDate) :
                new ObjectParameter("ZDate", typeof(System.DateTime));
    
            var zDescParameter = zDesc != null ?
                new ObjectParameter("ZDesc", zDesc) :
                new ObjectParameter("ZDesc", typeof(string));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_PkHolidayD", holCodeParameter, itemCodeParameter, zDateParameter, zDescParameter, last_UpdParameter, person_IDParameter, syndateParameter);
        }
    
        public virtual int insert_Pkinouttran_IN(string inOutTran_ID, string scr_No, string cscMain_ID, string rabbit_ID, Nullable<int> useMin, string carID, Nullable<int> site_Id, Nullable<int> loc_ID, Nullable<int> equip_ID, Nullable<short> trans_Event, Nullable<int> lastLoc_ID, Nullable<int> lastEquip_id, Nullable<int> rides_Remain, Nullable<decimal> addDeduct_Val, Nullable<decimal> parkingTime_Val, Nullable<System.DateTime> indate, Nullable<System.DateTime> outdate, Nullable<decimal> sumTotal, Nullable<int> hourTotal, string custNo, Nullable<int> typecard, string zUser, string eUser, string flagPost, string flagStatus, Nullable<System.DateTime> parkTime, string paymonth, Nullable<int> person_ID, Nullable<System.DateTime> last_Upd, string customerID, string lost_Card, string lost_Slip, Nullable<decimal> vStamp1, Nullable<decimal> vStamp2, Nullable<decimal> vStamp3, Nullable<decimal> vStamp4, string mark_rec, Nullable<int> stampMin1, Nullable<int> stampMin2, Nullable<int> stampMin3, Nullable<int> stampMin4, Nullable<decimal> lost_Card_Fine, Nullable<decimal> lost_Slip_Fine, Nullable<System.DateTime> dateIn1, Nullable<System.DateTime> dateOut1, Nullable<System.TimeSpan> timeIn1, Nullable<System.TimeSpan> timeOut1, string picin1, string picin2, string picin3, string picout1, string picout2, string picout3, Nullable<int> completeFlag, Nullable<int> person_ID1, Nullable<System.DateTime> last_Upd1, Nullable<int> serviceStatus, Nullable<System.DateTime> syndate, Nullable<int> sf)
        {
            var inOutTran_IDParameter = inOutTran_ID != null ?
                new ObjectParameter("InOutTran_ID", inOutTran_ID) :
                new ObjectParameter("InOutTran_ID", typeof(string));
    
            var scr_NoParameter = scr_No != null ?
                new ObjectParameter("Scr_No", scr_No) :
                new ObjectParameter("Scr_No", typeof(string));
    
            var cscMain_IDParameter = cscMain_ID != null ?
                new ObjectParameter("CscMain_ID", cscMain_ID) :
                new ObjectParameter("CscMain_ID", typeof(string));
    
            var rabbit_IDParameter = rabbit_ID != null ?
                new ObjectParameter("Rabbit_ID", rabbit_ID) :
                new ObjectParameter("Rabbit_ID", typeof(string));
    
            var useMinParameter = useMin.HasValue ?
                new ObjectParameter("UseMin", useMin) :
                new ObjectParameter("UseMin", typeof(int));
    
            var carIDParameter = carID != null ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(string));
    
            var site_IdParameter = site_Id.HasValue ?
                new ObjectParameter("Site_Id", site_Id) :
                new ObjectParameter("Site_Id", typeof(int));
    
            var loc_IDParameter = loc_ID.HasValue ?
                new ObjectParameter("Loc_ID", loc_ID) :
                new ObjectParameter("Loc_ID", typeof(int));
    
            var equip_IDParameter = equip_ID.HasValue ?
                new ObjectParameter("Equip_ID", equip_ID) :
                new ObjectParameter("Equip_ID", typeof(int));
    
            var trans_EventParameter = trans_Event.HasValue ?
                new ObjectParameter("Trans_Event", trans_Event) :
                new ObjectParameter("Trans_Event", typeof(short));
    
            var lastLoc_IDParameter = lastLoc_ID.HasValue ?
                new ObjectParameter("LastLoc_ID", lastLoc_ID) :
                new ObjectParameter("LastLoc_ID", typeof(int));
    
            var lastEquip_idParameter = lastEquip_id.HasValue ?
                new ObjectParameter("LastEquip_id", lastEquip_id) :
                new ObjectParameter("LastEquip_id", typeof(int));
    
            var rides_RemainParameter = rides_Remain.HasValue ?
                new ObjectParameter("Rides_Remain", rides_Remain) :
                new ObjectParameter("Rides_Remain", typeof(int));
    
            var addDeduct_ValParameter = addDeduct_Val.HasValue ?
                new ObjectParameter("AddDeduct_Val", addDeduct_Val) :
                new ObjectParameter("AddDeduct_Val", typeof(decimal));
    
            var parkingTime_ValParameter = parkingTime_Val.HasValue ?
                new ObjectParameter("ParkingTime_Val", parkingTime_Val) :
                new ObjectParameter("ParkingTime_Val", typeof(decimal));
    
            var indateParameter = indate.HasValue ?
                new ObjectParameter("Indate", indate) :
                new ObjectParameter("Indate", typeof(System.DateTime));
    
            var outdateParameter = outdate.HasValue ?
                new ObjectParameter("Outdate", outdate) :
                new ObjectParameter("Outdate", typeof(System.DateTime));
    
            var sumTotalParameter = sumTotal.HasValue ?
                new ObjectParameter("SumTotal", sumTotal) :
                new ObjectParameter("SumTotal", typeof(decimal));
    
            var hourTotalParameter = hourTotal.HasValue ?
                new ObjectParameter("HourTotal", hourTotal) :
                new ObjectParameter("HourTotal", typeof(int));
    
            var custNoParameter = custNo != null ?
                new ObjectParameter("CustNo", custNo) :
                new ObjectParameter("CustNo", typeof(string));
    
            var typecardParameter = typecard.HasValue ?
                new ObjectParameter("Typecard", typecard) :
                new ObjectParameter("Typecard", typeof(int));
    
            var zUserParameter = zUser != null ?
                new ObjectParameter("ZUser", zUser) :
                new ObjectParameter("ZUser", typeof(string));
    
            var eUserParameter = eUser != null ?
                new ObjectParameter("EUser", eUser) :
                new ObjectParameter("EUser", typeof(string));
    
            var flagPostParameter = flagPost != null ?
                new ObjectParameter("FlagPost", flagPost) :
                new ObjectParameter("FlagPost", typeof(string));
    
            var flagStatusParameter = flagStatus != null ?
                new ObjectParameter("FlagStatus", flagStatus) :
                new ObjectParameter("FlagStatus", typeof(string));
    
            var parkTimeParameter = parkTime.HasValue ?
                new ObjectParameter("ParkTime", parkTime) :
                new ObjectParameter("ParkTime", typeof(System.DateTime));
    
            var paymonthParameter = paymonth != null ?
                new ObjectParameter("Paymonth", paymonth) :
                new ObjectParameter("Paymonth", typeof(string));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            var lost_CardParameter = lost_Card != null ?
                new ObjectParameter("Lost_Card", lost_Card) :
                new ObjectParameter("Lost_Card", typeof(string));
    
            var lost_SlipParameter = lost_Slip != null ?
                new ObjectParameter("Lost_Slip", lost_Slip) :
                new ObjectParameter("Lost_Slip", typeof(string));
    
            var vStamp1Parameter = vStamp1.HasValue ?
                new ObjectParameter("VStamp1", vStamp1) :
                new ObjectParameter("VStamp1", typeof(decimal));
    
            var vStamp2Parameter = vStamp2.HasValue ?
                new ObjectParameter("VStamp2", vStamp2) :
                new ObjectParameter("VStamp2", typeof(decimal));
    
            var vStamp3Parameter = vStamp3.HasValue ?
                new ObjectParameter("VStamp3", vStamp3) :
                new ObjectParameter("VStamp3", typeof(decimal));
    
            var vStamp4Parameter = vStamp4.HasValue ?
                new ObjectParameter("VStamp4", vStamp4) :
                new ObjectParameter("VStamp4", typeof(decimal));
    
            var mark_recParameter = mark_rec != null ?
                new ObjectParameter("Mark_rec", mark_rec) :
                new ObjectParameter("Mark_rec", typeof(string));
    
            var stampMin1Parameter = stampMin1.HasValue ?
                new ObjectParameter("StampMin1", stampMin1) :
                new ObjectParameter("StampMin1", typeof(int));
    
            var stampMin2Parameter = stampMin2.HasValue ?
                new ObjectParameter("StampMin2", stampMin2) :
                new ObjectParameter("StampMin2", typeof(int));
    
            var stampMin3Parameter = stampMin3.HasValue ?
                new ObjectParameter("StampMin3", stampMin3) :
                new ObjectParameter("StampMin3", typeof(int));
    
            var stampMin4Parameter = stampMin4.HasValue ?
                new ObjectParameter("StampMin4", stampMin4) :
                new ObjectParameter("StampMin4", typeof(int));
    
            var lost_Card_FineParameter = lost_Card_Fine.HasValue ?
                new ObjectParameter("Lost_Card_Fine", lost_Card_Fine) :
                new ObjectParameter("Lost_Card_Fine", typeof(decimal));
    
            var lost_Slip_FineParameter = lost_Slip_Fine.HasValue ?
                new ObjectParameter("Lost_Slip_Fine", lost_Slip_Fine) :
                new ObjectParameter("Lost_Slip_Fine", typeof(decimal));
    
            var dateIn1Parameter = dateIn1.HasValue ?
                new ObjectParameter("DateIn1", dateIn1) :
                new ObjectParameter("DateIn1", typeof(System.DateTime));
    
            var dateOut1Parameter = dateOut1.HasValue ?
                new ObjectParameter("DateOut1", dateOut1) :
                new ObjectParameter("DateOut1", typeof(System.DateTime));
    
            var timeIn1Parameter = timeIn1.HasValue ?
                new ObjectParameter("TimeIn1", timeIn1) :
                new ObjectParameter("TimeIn1", typeof(System.TimeSpan));
    
            var timeOut1Parameter = timeOut1.HasValue ?
                new ObjectParameter("TimeOut1", timeOut1) :
                new ObjectParameter("TimeOut1", typeof(System.TimeSpan));
    
            var picin1Parameter = picin1 != null ?
                new ObjectParameter("Picin1", picin1) :
                new ObjectParameter("Picin1", typeof(string));
    
            var picin2Parameter = picin2 != null ?
                new ObjectParameter("Picin2", picin2) :
                new ObjectParameter("Picin2", typeof(string));
    
            var picin3Parameter = picin3 != null ?
                new ObjectParameter("Picin3", picin3) :
                new ObjectParameter("Picin3", typeof(string));
    
            var picout1Parameter = picout1 != null ?
                new ObjectParameter("Picout1", picout1) :
                new ObjectParameter("Picout1", typeof(string));
    
            var picout2Parameter = picout2 != null ?
                new ObjectParameter("Picout2", picout2) :
                new ObjectParameter("Picout2", typeof(string));
    
            var picout3Parameter = picout3 != null ?
                new ObjectParameter("Picout3", picout3) :
                new ObjectParameter("Picout3", typeof(string));
    
            var completeFlagParameter = completeFlag.HasValue ?
                new ObjectParameter("CompleteFlag", completeFlag) :
                new ObjectParameter("CompleteFlag", typeof(int));
    
            var person_ID1Parameter = person_ID1.HasValue ?
                new ObjectParameter("Person_ID1", person_ID1) :
                new ObjectParameter("Person_ID1", typeof(int));
    
            var last_Upd1Parameter = last_Upd1.HasValue ?
                new ObjectParameter("Last_Upd1", last_Upd1) :
                new ObjectParameter("Last_Upd1", typeof(System.DateTime));
    
            var serviceStatusParameter = serviceStatus.HasValue ?
                new ObjectParameter("ServiceStatus", serviceStatus) :
                new ObjectParameter("ServiceStatus", typeof(int));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            var sfParameter = sf.HasValue ?
                new ObjectParameter("sf", sf) :
                new ObjectParameter("sf", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_Pkinouttran_IN", inOutTran_IDParameter, scr_NoParameter, cscMain_IDParameter, rabbit_IDParameter, useMinParameter, carIDParameter, site_IdParameter, loc_IDParameter, equip_IDParameter, trans_EventParameter, lastLoc_IDParameter, lastEquip_idParameter, rides_RemainParameter, addDeduct_ValParameter, parkingTime_ValParameter, indateParameter, outdateParameter, sumTotalParameter, hourTotalParameter, custNoParameter, typecardParameter, zUserParameter, eUserParameter, flagPostParameter, flagStatusParameter, parkTimeParameter, paymonthParameter, person_IDParameter, last_UpdParameter, customerIDParameter, lost_CardParameter, lost_SlipParameter, vStamp1Parameter, vStamp2Parameter, vStamp3Parameter, vStamp4Parameter, mark_recParameter, stampMin1Parameter, stampMin2Parameter, stampMin3Parameter, stampMin4Parameter, lost_Card_FineParameter, lost_Slip_FineParameter, dateIn1Parameter, dateOut1Parameter, timeIn1Parameter, timeOut1Parameter, picin1Parameter, picin2Parameter, picin3Parameter, picout1Parameter, picout2Parameter, picout3Parameter, completeFlagParameter, person_ID1Parameter, last_Upd1Parameter, serviceStatusParameter, syndateParameter, sfParameter);
        }
    
        public virtual int insert_pkinouttranstamp(string inOutTranstamp_ID, string inOutTran_ID, string stampCode, string terncode, string ternsubcode, Nullable<System.DateTime> datetimestamp, Nullable<int> mintenant, Nullable<decimal> feeTenant, Nullable<decimal> feevisitor, Nullable<int> singleStampFlg, Nullable<int> active1, Nullable<int> adminlevel, Nullable<System.DateTime> last_Upd, Nullable<int> person_ID, string adminname, Nullable<System.DateTime> syndate)
        {
            var inOutTranstamp_IDParameter = inOutTranstamp_ID != null ?
                new ObjectParameter("InOutTranstamp_ID", inOutTranstamp_ID) :
                new ObjectParameter("InOutTranstamp_ID", typeof(string));
    
            var inOutTran_IDParameter = inOutTran_ID != null ?
                new ObjectParameter("InOutTran_ID", inOutTran_ID) :
                new ObjectParameter("InOutTran_ID", typeof(string));
    
            var stampCodeParameter = stampCode != null ?
                new ObjectParameter("StampCode", stampCode) :
                new ObjectParameter("StampCode", typeof(string));
    
            var terncodeParameter = terncode != null ?
                new ObjectParameter("Terncode", terncode) :
                new ObjectParameter("Terncode", typeof(string));
    
            var ternsubcodeParameter = ternsubcode != null ?
                new ObjectParameter("Ternsubcode", ternsubcode) :
                new ObjectParameter("Ternsubcode", typeof(string));
    
            var datetimestampParameter = datetimestamp.HasValue ?
                new ObjectParameter("datetimestamp", datetimestamp) :
                new ObjectParameter("datetimestamp", typeof(System.DateTime));
    
            var mintenantParameter = mintenant.HasValue ?
                new ObjectParameter("Mintenant", mintenant) :
                new ObjectParameter("Mintenant", typeof(int));
    
            var feeTenantParameter = feeTenant.HasValue ?
                new ObjectParameter("FeeTenant", feeTenant) :
                new ObjectParameter("FeeTenant", typeof(decimal));
    
            var feevisitorParameter = feevisitor.HasValue ?
                new ObjectParameter("Feevisitor", feevisitor) :
                new ObjectParameter("Feevisitor", typeof(decimal));
    
            var singleStampFlgParameter = singleStampFlg.HasValue ?
                new ObjectParameter("SingleStampFlg", singleStampFlg) :
                new ObjectParameter("SingleStampFlg", typeof(int));
    
            var active1Parameter = active1.HasValue ?
                new ObjectParameter("Active1", active1) :
                new ObjectParameter("Active1", typeof(int));
    
            var adminlevelParameter = adminlevel.HasValue ?
                new ObjectParameter("adminlevel", adminlevel) :
                new ObjectParameter("adminlevel", typeof(int));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var adminnameParameter = adminname != null ?
                new ObjectParameter("Adminname", adminname) :
                new ObjectParameter("Adminname", typeof(string));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_pkinouttranstamp", inOutTranstamp_IDParameter, inOutTran_IDParameter, stampCodeParameter, terncodeParameter, ternsubcodeParameter, datetimestampParameter, mintenantParameter, feeTenantParameter, feevisitorParameter, singleStampFlgParameter, active1Parameter, adminlevelParameter, last_UpdParameter, person_IDParameter, adminnameParameter, syndateParameter);
        }
    
        public virtual int insert_PkLocation(Nullable<int> loc_ID, Nullable<int> site_ID, string zDesc, string addr1, Nullable<int> spaceparking, Nullable<System.DateTime> last_Upd, Nullable<int> person_ID)
        {
            var loc_IDParameter = loc_ID.HasValue ?
                new ObjectParameter("Loc_ID", loc_ID) :
                new ObjectParameter("Loc_ID", typeof(int));
    
            var site_IDParameter = site_ID.HasValue ?
                new ObjectParameter("Site_ID", site_ID) :
                new ObjectParameter("Site_ID", typeof(int));
    
            var zDescParameter = zDesc != null ?
                new ObjectParameter("ZDesc", zDesc) :
                new ObjectParameter("ZDesc", typeof(string));
    
            var addr1Parameter = addr1 != null ?
                new ObjectParameter("Addr1", addr1) :
                new ObjectParameter("Addr1", typeof(string));
    
            var spaceparkingParameter = spaceparking.HasValue ?
                new ObjectParameter("Spaceparking", spaceparking) :
                new ObjectParameter("Spaceparking", typeof(int));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_PkLocation", loc_IDParameter, site_IDParameter, zDescParameter, addr1Parameter, spaceparkingParameter, last_UpdParameter, person_IDParameter);
        }
    
        public virtual int insert_PkNegativeCard(string scr_No, string cscMain_ID, string rabbit_ID, string neg_IN, string neg_Out, string pass, string note, Nullable<System.DateTime> last_Upd, Nullable<int> person_ID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> syndate)
        {
            var scr_NoParameter = scr_No != null ?
                new ObjectParameter("Scr_No", scr_No) :
                new ObjectParameter("Scr_No", typeof(string));
    
            var cscMain_IDParameter = cscMain_ID != null ?
                new ObjectParameter("CscMain_ID", cscMain_ID) :
                new ObjectParameter("CscMain_ID", typeof(string));
    
            var rabbit_IDParameter = rabbit_ID != null ?
                new ObjectParameter("Rabbit_ID", rabbit_ID) :
                new ObjectParameter("Rabbit_ID", typeof(string));
    
            var neg_INParameter = neg_IN != null ?
                new ObjectParameter("Neg_IN", neg_IN) :
                new ObjectParameter("Neg_IN", typeof(string));
    
            var neg_OutParameter = neg_Out != null ?
                new ObjectParameter("Neg_Out", neg_Out) :
                new ObjectParameter("Neg_Out", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("Pass", pass) :
                new ObjectParameter("Pass", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_PkNegativeCard", scr_NoParameter, cscMain_IDParameter, rabbit_IDParameter, neg_INParameter, neg_OutParameter, passParameter, noteParameter, last_UpdParameter, person_IDParameter, startDateParameter, syndateParameter);
        }
    
        public virtual int insert_Pksite(Nullable<int> site_ID, string zDesc, string taxID, string addr1, string zipCode, string tel, string fax, Nullable<decimal> vat, Nullable<int> taxFlg, Nullable<int> taxType, Nullable<decimal> withholdingtax, Nullable<System.DateTime> last_Upd, Nullable<int> person_ID, Nullable<int> spaceparking, string dateMonthFare, string dateHalfMonthFare, Nullable<decimal> issuecard_fee, Nullable<decimal> deposit_fee, string precis1, Nullable<decimal> issuecard_deposit, Nullable<System.DateTime> syndate, string adr1, string adr2)
        {
            var site_IDParameter = site_ID.HasValue ?
                new ObjectParameter("Site_ID", site_ID) :
                new ObjectParameter("Site_ID", typeof(int));
    
            var zDescParameter = zDesc != null ?
                new ObjectParameter("ZDesc", zDesc) :
                new ObjectParameter("ZDesc", typeof(string));
    
            var taxIDParameter = taxID != null ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(string));
    
            var addr1Parameter = addr1 != null ?
                new ObjectParameter("Addr1", addr1) :
                new ObjectParameter("Addr1", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var telParameter = tel != null ?
                new ObjectParameter("Tel", tel) :
                new ObjectParameter("Tel", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var vatParameter = vat.HasValue ?
                new ObjectParameter("Vat", vat) :
                new ObjectParameter("Vat", typeof(decimal));
    
            var taxFlgParameter = taxFlg.HasValue ?
                new ObjectParameter("TaxFlg", taxFlg) :
                new ObjectParameter("TaxFlg", typeof(int));
    
            var taxTypeParameter = taxType.HasValue ?
                new ObjectParameter("TaxType", taxType) :
                new ObjectParameter("TaxType", typeof(int));
    
            var withholdingtaxParameter = withholdingtax.HasValue ?
                new ObjectParameter("withholdingtax", withholdingtax) :
                new ObjectParameter("withholdingtax", typeof(decimal));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var spaceparkingParameter = spaceparking.HasValue ?
                new ObjectParameter("Spaceparking", spaceparking) :
                new ObjectParameter("Spaceparking", typeof(int));
    
            var dateMonthFareParameter = dateMonthFare != null ?
                new ObjectParameter("DateMonthFare", dateMonthFare) :
                new ObjectParameter("DateMonthFare", typeof(string));
    
            var dateHalfMonthFareParameter = dateHalfMonthFare != null ?
                new ObjectParameter("DateHalfMonthFare", dateHalfMonthFare) :
                new ObjectParameter("DateHalfMonthFare", typeof(string));
    
            var issuecard_feeParameter = issuecard_fee.HasValue ?
                new ObjectParameter("Issuecard_fee", issuecard_fee) :
                new ObjectParameter("Issuecard_fee", typeof(decimal));
    
            var deposit_feeParameter = deposit_fee.HasValue ?
                new ObjectParameter("deposit_fee", deposit_fee) :
                new ObjectParameter("deposit_fee", typeof(decimal));
    
            var precis1Parameter = precis1 != null ?
                new ObjectParameter("precis1", precis1) :
                new ObjectParameter("precis1", typeof(string));
    
            var issuecard_depositParameter = issuecard_deposit.HasValue ?
                new ObjectParameter("Issuecard_deposit", issuecard_deposit) :
                new ObjectParameter("Issuecard_deposit", typeof(decimal));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            var adr1Parameter = adr1 != null ?
                new ObjectParameter("Adr1", adr1) :
                new ObjectParameter("Adr1", typeof(string));
    
            var adr2Parameter = adr2 != null ?
                new ObjectParameter("Adr2", adr2) :
                new ObjectParameter("Adr2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_Pksite", site_IDParameter, zDescParameter, taxIDParameter, addr1Parameter, zipCodeParameter, telParameter, faxParameter, vatParameter, taxFlgParameter, taxTypeParameter, withholdingtaxParameter, last_UpdParameter, person_IDParameter, spaceparkingParameter, dateMonthFareParameter, dateHalfMonthFareParameter, issuecard_feeParameter, deposit_feeParameter, precis1Parameter, issuecard_depositParameter, syndateParameter, adr1Parameter, adr2Parameter);
        }
    
        public virtual int insert_PkStampCode(string stampCode, string stampno, string cartype, string stampAbbr, string zDesc, string flg, string ternCode, string ternSubCode, string payMonthFlg, Nullable<int> coverDay, Nullable<System.DateTime> coverTime, string eventAccept, string eventCode, string ternEventPrice, string custEventPrice, string holAccept, string holCode, string ternHolPrice, string custHolPrice, string weekAccept, string weekCode, string ternWeekPrice, string custWeekPrice, string normalAccept, string ternNormalPrice, string custNormalPrice, string onePriceFlag, Nullable<decimal> onePriceTern, Nullable<decimal> onePriceCust, Nullable<System.DateTime> last_Upd, Nullable<int> person_ID, Nullable<int> singleStampFlg, Nullable<int> admin_level_id, Nullable<System.DateTime> syndate)
        {
            var stampCodeParameter = stampCode != null ?
                new ObjectParameter("StampCode", stampCode) :
                new ObjectParameter("StampCode", typeof(string));
    
            var stampnoParameter = stampno != null ?
                new ObjectParameter("stampno", stampno) :
                new ObjectParameter("stampno", typeof(string));
    
            var cartypeParameter = cartype != null ?
                new ObjectParameter("cartype", cartype) :
                new ObjectParameter("cartype", typeof(string));
    
            var stampAbbrParameter = stampAbbr != null ?
                new ObjectParameter("StampAbbr", stampAbbr) :
                new ObjectParameter("StampAbbr", typeof(string));
    
            var zDescParameter = zDesc != null ?
                new ObjectParameter("ZDesc", zDesc) :
                new ObjectParameter("ZDesc", typeof(string));
    
            var flgParameter = flg != null ?
                new ObjectParameter("Flg", flg) :
                new ObjectParameter("Flg", typeof(string));
    
            var ternCodeParameter = ternCode != null ?
                new ObjectParameter("TernCode", ternCode) :
                new ObjectParameter("TernCode", typeof(string));
    
            var ternSubCodeParameter = ternSubCode != null ?
                new ObjectParameter("TernSubCode", ternSubCode) :
                new ObjectParameter("TernSubCode", typeof(string));
    
            var payMonthFlgParameter = payMonthFlg != null ?
                new ObjectParameter("PayMonthFlg", payMonthFlg) :
                new ObjectParameter("PayMonthFlg", typeof(string));
    
            var coverDayParameter = coverDay.HasValue ?
                new ObjectParameter("CoverDay", coverDay) :
                new ObjectParameter("CoverDay", typeof(int));
    
            var coverTimeParameter = coverTime.HasValue ?
                new ObjectParameter("CoverTime", coverTime) :
                new ObjectParameter("CoverTime", typeof(System.DateTime));
    
            var eventAcceptParameter = eventAccept != null ?
                new ObjectParameter("EventAccept", eventAccept) :
                new ObjectParameter("EventAccept", typeof(string));
    
            var eventCodeParameter = eventCode != null ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(string));
    
            var ternEventPriceParameter = ternEventPrice != null ?
                new ObjectParameter("TernEventPrice", ternEventPrice) :
                new ObjectParameter("TernEventPrice", typeof(string));
    
            var custEventPriceParameter = custEventPrice != null ?
                new ObjectParameter("CustEventPrice", custEventPrice) :
                new ObjectParameter("CustEventPrice", typeof(string));
    
            var holAcceptParameter = holAccept != null ?
                new ObjectParameter("HolAccept", holAccept) :
                new ObjectParameter("HolAccept", typeof(string));
    
            var holCodeParameter = holCode != null ?
                new ObjectParameter("HolCode", holCode) :
                new ObjectParameter("HolCode", typeof(string));
    
            var ternHolPriceParameter = ternHolPrice != null ?
                new ObjectParameter("TernHolPrice", ternHolPrice) :
                new ObjectParameter("TernHolPrice", typeof(string));
    
            var custHolPriceParameter = custHolPrice != null ?
                new ObjectParameter("CustHolPrice", custHolPrice) :
                new ObjectParameter("CustHolPrice", typeof(string));
    
            var weekAcceptParameter = weekAccept != null ?
                new ObjectParameter("WeekAccept", weekAccept) :
                new ObjectParameter("WeekAccept", typeof(string));
    
            var weekCodeParameter = weekCode != null ?
                new ObjectParameter("WeekCode", weekCode) :
                new ObjectParameter("WeekCode", typeof(string));
    
            var ternWeekPriceParameter = ternWeekPrice != null ?
                new ObjectParameter("TernWeekPrice", ternWeekPrice) :
                new ObjectParameter("TernWeekPrice", typeof(string));
    
            var custWeekPriceParameter = custWeekPrice != null ?
                new ObjectParameter("CustWeekPrice", custWeekPrice) :
                new ObjectParameter("CustWeekPrice", typeof(string));
    
            var normalAcceptParameter = normalAccept != null ?
                new ObjectParameter("NormalAccept", normalAccept) :
                new ObjectParameter("NormalAccept", typeof(string));
    
            var ternNormalPriceParameter = ternNormalPrice != null ?
                new ObjectParameter("TernNormalPrice", ternNormalPrice) :
                new ObjectParameter("TernNormalPrice", typeof(string));
    
            var custNormalPriceParameter = custNormalPrice != null ?
                new ObjectParameter("CustNormalPrice", custNormalPrice) :
                new ObjectParameter("CustNormalPrice", typeof(string));
    
            var onePriceFlagParameter = onePriceFlag != null ?
                new ObjectParameter("OnePriceFlag", onePriceFlag) :
                new ObjectParameter("OnePriceFlag", typeof(string));
    
            var onePriceTernParameter = onePriceTern.HasValue ?
                new ObjectParameter("OnePriceTern", onePriceTern) :
                new ObjectParameter("OnePriceTern", typeof(decimal));
    
            var onePriceCustParameter = onePriceCust.HasValue ?
                new ObjectParameter("OnePriceCust", onePriceCust) :
                new ObjectParameter("OnePriceCust", typeof(decimal));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var singleStampFlgParameter = singleStampFlg.HasValue ?
                new ObjectParameter("SingleStampFlg", singleStampFlg) :
                new ObjectParameter("SingleStampFlg", typeof(int));
    
            var admin_level_idParameter = admin_level_id.HasValue ?
                new ObjectParameter("admin_level_id", admin_level_id) :
                new ObjectParameter("admin_level_id", typeof(int));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_PkStampCode", stampCodeParameter, stampnoParameter, cartypeParameter, stampAbbrParameter, zDescParameter, flgParameter, ternCodeParameter, ternSubCodeParameter, payMonthFlgParameter, coverDayParameter, coverTimeParameter, eventAcceptParameter, eventCodeParameter, ternEventPriceParameter, custEventPriceParameter, holAcceptParameter, holCodeParameter, ternHolPriceParameter, custHolPriceParameter, weekAcceptParameter, weekCodeParameter, ternWeekPriceParameter, custWeekPriceParameter, normalAcceptParameter, ternNormalPriceParameter, custNormalPriceParameter, onePriceFlagParameter, onePriceTernParameter, onePriceCustParameter, last_UpdParameter, person_IDParameter, singleStampFlgParameter, admin_level_idParameter, syndateParameter);
        }
    
        public virtual int insert_PkTimetable(string tabletype, string tablecode, string tabledesc, string flag, Nullable<double> h00_15, Nullable<double> h00_30, Nullable<double> h00_45, Nullable<double> h00_60, Nullable<double> h01_15, Nullable<double> h01_30, Nullable<double> h01_45, Nullable<double> h01_60, Nullable<double> h02_15, Nullable<double> h02_30, Nullable<double> h02_45, Nullable<double> h02_60, Nullable<double> h03_15, Nullable<double> h03_30, Nullable<double> h03_45, Nullable<double> h03_60, Nullable<double> h04_15, Nullable<double> h04_30, Nullable<double> h04_45, Nullable<double> h04_60, Nullable<double> h05_15, Nullable<double> h05_30, Nullable<double> h05_45, Nullable<double> h05_60, Nullable<double> h06_15, Nullable<double> h06_30, Nullable<double> h06_45, Nullable<double> h06_60, Nullable<double> h07_15, Nullable<double> h07_30, Nullable<double> h07_45, Nullable<double> h07_60, Nullable<double> h08_15, Nullable<double> h08_30, Nullable<double> h08_45, Nullable<double> h08_60, Nullable<double> h09_15, Nullable<double> h09_30, Nullable<double> h09_45, Nullable<double> h09_60, Nullable<double> h10_15, Nullable<double> h10_30, Nullable<double> h10_45, Nullable<double> h10_60, Nullable<double> h11_15, Nullable<double> h11_30, Nullable<double> h11_45, Nullable<double> h11_60, Nullable<double> h12_15, Nullable<double> h12_30, Nullable<double> h12_45, Nullable<double> h12_60, Nullable<double> h13_15, Nullable<double> h13_30, Nullable<double> h13_45, Nullable<double> h13_60, Nullable<double> h14_15, Nullable<double> h14_30, Nullable<double> h14_45, Nullable<double> h14_60, Nullable<double> h15_15, Nullable<double> h15_30, Nullable<double> h15_45, Nullable<double> h15_60, Nullable<double> h16_15, Nullable<double> h16_30, Nullable<double> h16_45, Nullable<double> h16_60, Nullable<double> h17_15, Nullable<double> h17_30, Nullable<double> h17_45, Nullable<double> h17_60, Nullable<double> h18_15, Nullable<double> h18_30, Nullable<double> h18_45, Nullable<double> h18_60, Nullable<double> h19_15, Nullable<double> h19_30, Nullable<double> h19_45, Nullable<double> h19_60, Nullable<double> h20_15, Nullable<double> h20_30, Nullable<double> h20_45, Nullable<double> h20_60, Nullable<double> h21_15, Nullable<double> h21_30, Nullable<double> h21_45, Nullable<double> h21_60, Nullable<double> h22_15, Nullable<double> h22_30, Nullable<double> h22_45, Nullable<double> h22_60, Nullable<double> h23_15, Nullable<double> h23_30, Nullable<double> h23_45, Nullable<double> h23_60, string priceTableCode1, string priceTableCode2, string priceTableCode3, string priceTableCode4, string priceTableCode5, Nullable<System.DateTime> last_Upd, Nullable<int> person_ID, Nullable<System.DateTime> syndate)
        {
            var tabletypeParameter = tabletype != null ?
                new ObjectParameter("Tabletype", tabletype) :
                new ObjectParameter("Tabletype", typeof(string));
    
            var tablecodeParameter = tablecode != null ?
                new ObjectParameter("Tablecode", tablecode) :
                new ObjectParameter("Tablecode", typeof(string));
    
            var tabledescParameter = tabledesc != null ?
                new ObjectParameter("Tabledesc", tabledesc) :
                new ObjectParameter("Tabledesc", typeof(string));
    
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var h00_15Parameter = h00_15.HasValue ?
                new ObjectParameter("H00_15", h00_15) :
                new ObjectParameter("H00_15", typeof(double));
    
            var h00_30Parameter = h00_30.HasValue ?
                new ObjectParameter("H00_30", h00_30) :
                new ObjectParameter("H00_30", typeof(double));
    
            var h00_45Parameter = h00_45.HasValue ?
                new ObjectParameter("H00_45", h00_45) :
                new ObjectParameter("H00_45", typeof(double));
    
            var h00_60Parameter = h00_60.HasValue ?
                new ObjectParameter("H00_60", h00_60) :
                new ObjectParameter("H00_60", typeof(double));
    
            var h01_15Parameter = h01_15.HasValue ?
                new ObjectParameter("H01_15", h01_15) :
                new ObjectParameter("H01_15", typeof(double));
    
            var h01_30Parameter = h01_30.HasValue ?
                new ObjectParameter("H01_30", h01_30) :
                new ObjectParameter("H01_30", typeof(double));
    
            var h01_45Parameter = h01_45.HasValue ?
                new ObjectParameter("H01_45", h01_45) :
                new ObjectParameter("H01_45", typeof(double));
    
            var h01_60Parameter = h01_60.HasValue ?
                new ObjectParameter("H01_60", h01_60) :
                new ObjectParameter("H01_60", typeof(double));
    
            var h02_15Parameter = h02_15.HasValue ?
                new ObjectParameter("H02_15", h02_15) :
                new ObjectParameter("H02_15", typeof(double));
    
            var h02_30Parameter = h02_30.HasValue ?
                new ObjectParameter("H02_30", h02_30) :
                new ObjectParameter("H02_30", typeof(double));
    
            var h02_45Parameter = h02_45.HasValue ?
                new ObjectParameter("H02_45", h02_45) :
                new ObjectParameter("H02_45", typeof(double));
    
            var h02_60Parameter = h02_60.HasValue ?
                new ObjectParameter("H02_60", h02_60) :
                new ObjectParameter("H02_60", typeof(double));
    
            var h03_15Parameter = h03_15.HasValue ?
                new ObjectParameter("H03_15", h03_15) :
                new ObjectParameter("H03_15", typeof(double));
    
            var h03_30Parameter = h03_30.HasValue ?
                new ObjectParameter("H03_30", h03_30) :
                new ObjectParameter("H03_30", typeof(double));
    
            var h03_45Parameter = h03_45.HasValue ?
                new ObjectParameter("H03_45", h03_45) :
                new ObjectParameter("H03_45", typeof(double));
    
            var h03_60Parameter = h03_60.HasValue ?
                new ObjectParameter("H03_60", h03_60) :
                new ObjectParameter("H03_60", typeof(double));
    
            var h04_15Parameter = h04_15.HasValue ?
                new ObjectParameter("H04_15", h04_15) :
                new ObjectParameter("H04_15", typeof(double));
    
            var h04_30Parameter = h04_30.HasValue ?
                new ObjectParameter("H04_30", h04_30) :
                new ObjectParameter("H04_30", typeof(double));
    
            var h04_45Parameter = h04_45.HasValue ?
                new ObjectParameter("H04_45", h04_45) :
                new ObjectParameter("H04_45", typeof(double));
    
            var h04_60Parameter = h04_60.HasValue ?
                new ObjectParameter("H04_60", h04_60) :
                new ObjectParameter("H04_60", typeof(double));
    
            var h05_15Parameter = h05_15.HasValue ?
                new ObjectParameter("H05_15", h05_15) :
                new ObjectParameter("H05_15", typeof(double));
    
            var h05_30Parameter = h05_30.HasValue ?
                new ObjectParameter("H05_30", h05_30) :
                new ObjectParameter("H05_30", typeof(double));
    
            var h05_45Parameter = h05_45.HasValue ?
                new ObjectParameter("H05_45", h05_45) :
                new ObjectParameter("H05_45", typeof(double));
    
            var h05_60Parameter = h05_60.HasValue ?
                new ObjectParameter("H05_60", h05_60) :
                new ObjectParameter("H05_60", typeof(double));
    
            var h06_15Parameter = h06_15.HasValue ?
                new ObjectParameter("H06_15", h06_15) :
                new ObjectParameter("H06_15", typeof(double));
    
            var h06_30Parameter = h06_30.HasValue ?
                new ObjectParameter("H06_30", h06_30) :
                new ObjectParameter("H06_30", typeof(double));
    
            var h06_45Parameter = h06_45.HasValue ?
                new ObjectParameter("H06_45", h06_45) :
                new ObjectParameter("H06_45", typeof(double));
    
            var h06_60Parameter = h06_60.HasValue ?
                new ObjectParameter("H06_60", h06_60) :
                new ObjectParameter("H06_60", typeof(double));
    
            var h07_15Parameter = h07_15.HasValue ?
                new ObjectParameter("H07_15", h07_15) :
                new ObjectParameter("H07_15", typeof(double));
    
            var h07_30Parameter = h07_30.HasValue ?
                new ObjectParameter("H07_30", h07_30) :
                new ObjectParameter("H07_30", typeof(double));
    
            var h07_45Parameter = h07_45.HasValue ?
                new ObjectParameter("H07_45", h07_45) :
                new ObjectParameter("H07_45", typeof(double));
    
            var h07_60Parameter = h07_60.HasValue ?
                new ObjectParameter("H07_60", h07_60) :
                new ObjectParameter("H07_60", typeof(double));
    
            var h08_15Parameter = h08_15.HasValue ?
                new ObjectParameter("H08_15", h08_15) :
                new ObjectParameter("H08_15", typeof(double));
    
            var h08_30Parameter = h08_30.HasValue ?
                new ObjectParameter("H08_30", h08_30) :
                new ObjectParameter("H08_30", typeof(double));
    
            var h08_45Parameter = h08_45.HasValue ?
                new ObjectParameter("H08_45", h08_45) :
                new ObjectParameter("H08_45", typeof(double));
    
            var h08_60Parameter = h08_60.HasValue ?
                new ObjectParameter("H08_60", h08_60) :
                new ObjectParameter("H08_60", typeof(double));
    
            var h09_15Parameter = h09_15.HasValue ?
                new ObjectParameter("H09_15", h09_15) :
                new ObjectParameter("H09_15", typeof(double));
    
            var h09_30Parameter = h09_30.HasValue ?
                new ObjectParameter("H09_30", h09_30) :
                new ObjectParameter("H09_30", typeof(double));
    
            var h09_45Parameter = h09_45.HasValue ?
                new ObjectParameter("H09_45", h09_45) :
                new ObjectParameter("H09_45", typeof(double));
    
            var h09_60Parameter = h09_60.HasValue ?
                new ObjectParameter("H09_60", h09_60) :
                new ObjectParameter("H09_60", typeof(double));
    
            var h10_15Parameter = h10_15.HasValue ?
                new ObjectParameter("H10_15", h10_15) :
                new ObjectParameter("H10_15", typeof(double));
    
            var h10_30Parameter = h10_30.HasValue ?
                new ObjectParameter("H10_30", h10_30) :
                new ObjectParameter("H10_30", typeof(double));
    
            var h10_45Parameter = h10_45.HasValue ?
                new ObjectParameter("H10_45", h10_45) :
                new ObjectParameter("H10_45", typeof(double));
    
            var h10_60Parameter = h10_60.HasValue ?
                new ObjectParameter("H10_60", h10_60) :
                new ObjectParameter("H10_60", typeof(double));
    
            var h11_15Parameter = h11_15.HasValue ?
                new ObjectParameter("H11_15", h11_15) :
                new ObjectParameter("H11_15", typeof(double));
    
            var h11_30Parameter = h11_30.HasValue ?
                new ObjectParameter("H11_30", h11_30) :
                new ObjectParameter("H11_30", typeof(double));
    
            var h11_45Parameter = h11_45.HasValue ?
                new ObjectParameter("H11_45", h11_45) :
                new ObjectParameter("H11_45", typeof(double));
    
            var h11_60Parameter = h11_60.HasValue ?
                new ObjectParameter("H11_60", h11_60) :
                new ObjectParameter("H11_60", typeof(double));
    
            var h12_15Parameter = h12_15.HasValue ?
                new ObjectParameter("H12_15", h12_15) :
                new ObjectParameter("H12_15", typeof(double));
    
            var h12_30Parameter = h12_30.HasValue ?
                new ObjectParameter("H12_30", h12_30) :
                new ObjectParameter("H12_30", typeof(double));
    
            var h12_45Parameter = h12_45.HasValue ?
                new ObjectParameter("H12_45", h12_45) :
                new ObjectParameter("H12_45", typeof(double));
    
            var h12_60Parameter = h12_60.HasValue ?
                new ObjectParameter("H12_60", h12_60) :
                new ObjectParameter("H12_60", typeof(double));
    
            var h13_15Parameter = h13_15.HasValue ?
                new ObjectParameter("H13_15", h13_15) :
                new ObjectParameter("H13_15", typeof(double));
    
            var h13_30Parameter = h13_30.HasValue ?
                new ObjectParameter("H13_30", h13_30) :
                new ObjectParameter("H13_30", typeof(double));
    
            var h13_45Parameter = h13_45.HasValue ?
                new ObjectParameter("H13_45", h13_45) :
                new ObjectParameter("H13_45", typeof(double));
    
            var h13_60Parameter = h13_60.HasValue ?
                new ObjectParameter("H13_60", h13_60) :
                new ObjectParameter("H13_60", typeof(double));
    
            var h14_15Parameter = h14_15.HasValue ?
                new ObjectParameter("H14_15", h14_15) :
                new ObjectParameter("H14_15", typeof(double));
    
            var h14_30Parameter = h14_30.HasValue ?
                new ObjectParameter("H14_30", h14_30) :
                new ObjectParameter("H14_30", typeof(double));
    
            var h14_45Parameter = h14_45.HasValue ?
                new ObjectParameter("H14_45", h14_45) :
                new ObjectParameter("H14_45", typeof(double));
    
            var h14_60Parameter = h14_60.HasValue ?
                new ObjectParameter("H14_60", h14_60) :
                new ObjectParameter("H14_60", typeof(double));
    
            var h15_15Parameter = h15_15.HasValue ?
                new ObjectParameter("H15_15", h15_15) :
                new ObjectParameter("H15_15", typeof(double));
    
            var h15_30Parameter = h15_30.HasValue ?
                new ObjectParameter("H15_30", h15_30) :
                new ObjectParameter("H15_30", typeof(double));
    
            var h15_45Parameter = h15_45.HasValue ?
                new ObjectParameter("H15_45", h15_45) :
                new ObjectParameter("H15_45", typeof(double));
    
            var h15_60Parameter = h15_60.HasValue ?
                new ObjectParameter("H15_60", h15_60) :
                new ObjectParameter("H15_60", typeof(double));
    
            var h16_15Parameter = h16_15.HasValue ?
                new ObjectParameter("H16_15", h16_15) :
                new ObjectParameter("H16_15", typeof(double));
    
            var h16_30Parameter = h16_30.HasValue ?
                new ObjectParameter("H16_30", h16_30) :
                new ObjectParameter("H16_30", typeof(double));
    
            var h16_45Parameter = h16_45.HasValue ?
                new ObjectParameter("H16_45", h16_45) :
                new ObjectParameter("H16_45", typeof(double));
    
            var h16_60Parameter = h16_60.HasValue ?
                new ObjectParameter("H16_60", h16_60) :
                new ObjectParameter("H16_60", typeof(double));
    
            var h17_15Parameter = h17_15.HasValue ?
                new ObjectParameter("H17_15", h17_15) :
                new ObjectParameter("H17_15", typeof(double));
    
            var h17_30Parameter = h17_30.HasValue ?
                new ObjectParameter("H17_30", h17_30) :
                new ObjectParameter("H17_30", typeof(double));
    
            var h17_45Parameter = h17_45.HasValue ?
                new ObjectParameter("H17_45", h17_45) :
                new ObjectParameter("H17_45", typeof(double));
    
            var h17_60Parameter = h17_60.HasValue ?
                new ObjectParameter("H17_60", h17_60) :
                new ObjectParameter("H17_60", typeof(double));
    
            var h18_15Parameter = h18_15.HasValue ?
                new ObjectParameter("H18_15", h18_15) :
                new ObjectParameter("H18_15", typeof(double));
    
            var h18_30Parameter = h18_30.HasValue ?
                new ObjectParameter("H18_30", h18_30) :
                new ObjectParameter("H18_30", typeof(double));
    
            var h18_45Parameter = h18_45.HasValue ?
                new ObjectParameter("H18_45", h18_45) :
                new ObjectParameter("H18_45", typeof(double));
    
            var h18_60Parameter = h18_60.HasValue ?
                new ObjectParameter("H18_60", h18_60) :
                new ObjectParameter("H18_60", typeof(double));
    
            var h19_15Parameter = h19_15.HasValue ?
                new ObjectParameter("H19_15", h19_15) :
                new ObjectParameter("H19_15", typeof(double));
    
            var h19_30Parameter = h19_30.HasValue ?
                new ObjectParameter("H19_30", h19_30) :
                new ObjectParameter("H19_30", typeof(double));
    
            var h19_45Parameter = h19_45.HasValue ?
                new ObjectParameter("H19_45", h19_45) :
                new ObjectParameter("H19_45", typeof(double));
    
            var h19_60Parameter = h19_60.HasValue ?
                new ObjectParameter("H19_60", h19_60) :
                new ObjectParameter("H19_60", typeof(double));
    
            var h20_15Parameter = h20_15.HasValue ?
                new ObjectParameter("H20_15", h20_15) :
                new ObjectParameter("H20_15", typeof(double));
    
            var h20_30Parameter = h20_30.HasValue ?
                new ObjectParameter("H20_30", h20_30) :
                new ObjectParameter("H20_30", typeof(double));
    
            var h20_45Parameter = h20_45.HasValue ?
                new ObjectParameter("H20_45", h20_45) :
                new ObjectParameter("H20_45", typeof(double));
    
            var h20_60Parameter = h20_60.HasValue ?
                new ObjectParameter("H20_60", h20_60) :
                new ObjectParameter("H20_60", typeof(double));
    
            var h21_15Parameter = h21_15.HasValue ?
                new ObjectParameter("H21_15", h21_15) :
                new ObjectParameter("H21_15", typeof(double));
    
            var h21_30Parameter = h21_30.HasValue ?
                new ObjectParameter("H21_30", h21_30) :
                new ObjectParameter("H21_30", typeof(double));
    
            var h21_45Parameter = h21_45.HasValue ?
                new ObjectParameter("H21_45", h21_45) :
                new ObjectParameter("H21_45", typeof(double));
    
            var h21_60Parameter = h21_60.HasValue ?
                new ObjectParameter("H21_60", h21_60) :
                new ObjectParameter("H21_60", typeof(double));
    
            var h22_15Parameter = h22_15.HasValue ?
                new ObjectParameter("H22_15", h22_15) :
                new ObjectParameter("H22_15", typeof(double));
    
            var h22_30Parameter = h22_30.HasValue ?
                new ObjectParameter("H22_30", h22_30) :
                new ObjectParameter("H22_30", typeof(double));
    
            var h22_45Parameter = h22_45.HasValue ?
                new ObjectParameter("H22_45", h22_45) :
                new ObjectParameter("H22_45", typeof(double));
    
            var h22_60Parameter = h22_60.HasValue ?
                new ObjectParameter("H22_60", h22_60) :
                new ObjectParameter("H22_60", typeof(double));
    
            var h23_15Parameter = h23_15.HasValue ?
                new ObjectParameter("H23_15", h23_15) :
                new ObjectParameter("H23_15", typeof(double));
    
            var h23_30Parameter = h23_30.HasValue ?
                new ObjectParameter("H23_30", h23_30) :
                new ObjectParameter("H23_30", typeof(double));
    
            var h23_45Parameter = h23_45.HasValue ?
                new ObjectParameter("H23_45", h23_45) :
                new ObjectParameter("H23_45", typeof(double));
    
            var h23_60Parameter = h23_60.HasValue ?
                new ObjectParameter("H23_60", h23_60) :
                new ObjectParameter("H23_60", typeof(double));
    
            var priceTableCode1Parameter = priceTableCode1 != null ?
                new ObjectParameter("PriceTableCode1", priceTableCode1) :
                new ObjectParameter("PriceTableCode1", typeof(string));
    
            var priceTableCode2Parameter = priceTableCode2 != null ?
                new ObjectParameter("PriceTableCode2", priceTableCode2) :
                new ObjectParameter("PriceTableCode2", typeof(string));
    
            var priceTableCode3Parameter = priceTableCode3 != null ?
                new ObjectParameter("PriceTableCode3", priceTableCode3) :
                new ObjectParameter("PriceTableCode3", typeof(string));
    
            var priceTableCode4Parameter = priceTableCode4 != null ?
                new ObjectParameter("PriceTableCode4", priceTableCode4) :
                new ObjectParameter("PriceTableCode4", typeof(string));
    
            var priceTableCode5Parameter = priceTableCode5 != null ?
                new ObjectParameter("PriceTableCode5", priceTableCode5) :
                new ObjectParameter("PriceTableCode5", typeof(string));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_PkTimetable", tabletypeParameter, tablecodeParameter, tabledescParameter, flagParameter, h00_15Parameter, h00_30Parameter, h00_45Parameter, h00_60Parameter, h01_15Parameter, h01_30Parameter, h01_45Parameter, h01_60Parameter, h02_15Parameter, h02_30Parameter, h02_45Parameter, h02_60Parameter, h03_15Parameter, h03_30Parameter, h03_45Parameter, h03_60Parameter, h04_15Parameter, h04_30Parameter, h04_45Parameter, h04_60Parameter, h05_15Parameter, h05_30Parameter, h05_45Parameter, h05_60Parameter, h06_15Parameter, h06_30Parameter, h06_45Parameter, h06_60Parameter, h07_15Parameter, h07_30Parameter, h07_45Parameter, h07_60Parameter, h08_15Parameter, h08_30Parameter, h08_45Parameter, h08_60Parameter, h09_15Parameter, h09_30Parameter, h09_45Parameter, h09_60Parameter, h10_15Parameter, h10_30Parameter, h10_45Parameter, h10_60Parameter, h11_15Parameter, h11_30Parameter, h11_45Parameter, h11_60Parameter, h12_15Parameter, h12_30Parameter, h12_45Parameter, h12_60Parameter, h13_15Parameter, h13_30Parameter, h13_45Parameter, h13_60Parameter, h14_15Parameter, h14_30Parameter, h14_45Parameter, h14_60Parameter, h15_15Parameter, h15_30Parameter, h15_45Parameter, h15_60Parameter, h16_15Parameter, h16_30Parameter, h16_45Parameter, h16_60Parameter, h17_15Parameter, h17_30Parameter, h17_45Parameter, h17_60Parameter, h18_15Parameter, h18_30Parameter, h18_45Parameter, h18_60Parameter, h19_15Parameter, h19_30Parameter, h19_45Parameter, h19_60Parameter, h20_15Parameter, h20_30Parameter, h20_45Parameter, h20_60Parameter, h21_15Parameter, h21_30Parameter, h21_45Parameter, h21_60Parameter, h22_15Parameter, h22_30Parameter, h22_45Parameter, h22_60Parameter, h23_15Parameter, h23_30Parameter, h23_45Parameter, h23_60Parameter, priceTableCode1Parameter, priceTableCode2Parameter, priceTableCode3Parameter, priceTableCode4Parameter, priceTableCode5Parameter, last_UpdParameter, person_IDParameter, syndateParameter);
        }
    
        public virtual int insert_PkWeekend(string weekCode, string zDesc, string mon, string tue, string wed, string thu, string fri, string sat, string sun, Nullable<System.DateTime> last_Upd, Nullable<int> person_ID, Nullable<System.DateTime> syndate)
        {
            var weekCodeParameter = weekCode != null ?
                new ObjectParameter("WeekCode", weekCode) :
                new ObjectParameter("WeekCode", typeof(string));
    
            var zDescParameter = zDesc != null ?
                new ObjectParameter("ZDesc", zDesc) :
                new ObjectParameter("ZDesc", typeof(string));
    
            var monParameter = mon != null ?
                new ObjectParameter("Mon", mon) :
                new ObjectParameter("Mon", typeof(string));
    
            var tueParameter = tue != null ?
                new ObjectParameter("Tue", tue) :
                new ObjectParameter("Tue", typeof(string));
    
            var wedParameter = wed != null ?
                new ObjectParameter("Wed", wed) :
                new ObjectParameter("Wed", typeof(string));
    
            var thuParameter = thu != null ?
                new ObjectParameter("Thu", thu) :
                new ObjectParameter("Thu", typeof(string));
    
            var friParameter = fri != null ?
                new ObjectParameter("Fri", fri) :
                new ObjectParameter("Fri", typeof(string));
    
            var satParameter = sat != null ?
                new ObjectParameter("Sat", sat) :
                new ObjectParameter("Sat", typeof(string));
    
            var sunParameter = sun != null ?
                new ObjectParameter("Sun", sun) :
                new ObjectParameter("Sun", typeof(string));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_PkWeekend", weekCodeParameter, zDescParameter, monParameter, tueParameter, wedParameter, thuParameter, friParameter, satParameter, sunParameter, last_UpdParameter, person_IDParameter, syndateParameter);
        }
    
        public virtual int insert_USERINFO(string uSERID, string bADGENUMBER, string sSN, string refNo, string gENDER, string tITLE, Nullable<int> nTitle, Nullable<System.DateTime> bIRTHDAY, Nullable<System.DateTime> hIREDDAY, string addr1, string zIP, string tel, string mobile, Nullable<int> sECURITYFLAGS, byte[] pHOTO, string firstName, string lastname, string tFirstname, string tLastname, string ternCode, string ternSubcode, Nullable<int> positioninfo, string verity_Type, string passwords, string activePass, string iDCard, string cardActive, Nullable<System.DateTime> cardStartDate, Nullable<System.DateTime> cardExpireDate, string passwordweb, Nullable<int> status, Nullable<int> workmode, Nullable<int> group, Nullable<int> fPC, Nullable<int> nF, Nullable<int> mCGourp, Nullable<System.DateTime> expireCard, Nullable<int> workStartH, Nullable<int> workStartM, Nullable<int> workEndH, Nullable<int> workEndM, Nullable<int> groupTime, string faceauthority, Nullable<int> facecalid, string faceopenmode, string facecheckmode, string faceidcard, Nullable<int> ncardno, Nullable<int> vein_Access, string vein_Timezone, Nullable<int> vein_userspecial, Nullable<int> vein_usertype, Nullable<int> vein_userLevel, Nullable<int> vein_user1toN, Nullable<int> vein_Active, Nullable<int> vein_Blockuser, Nullable<int> vein_BlockDate, Nullable<int> vein_Accessmode, string vein_Schedule, Nullable<int> vein_batchadmin, Nullable<int> usertype, string groupdevicetime, string carID, string carModel, string carID1, string carModel1, string carID2, string carModel2, Nullable<System.DateTime> last_Upd, Nullable<int> person_ID, string imagepaths, Nullable<System.DateTime> syndate, Nullable<int> nSecurityLevel, Nullable<int> sf)
        {
            var uSERIDParameter = uSERID != null ?
                new ObjectParameter("USERID", uSERID) :
                new ObjectParameter("USERID", typeof(string));
    
            var bADGENUMBERParameter = bADGENUMBER != null ?
                new ObjectParameter("BADGENUMBER", bADGENUMBER) :
                new ObjectParameter("BADGENUMBER", typeof(string));
    
            var sSNParameter = sSN != null ?
                new ObjectParameter("SSN", sSN) :
                new ObjectParameter("SSN", typeof(string));
    
            var refNoParameter = refNo != null ?
                new ObjectParameter("RefNo", refNo) :
                new ObjectParameter("RefNo", typeof(string));
    
            var gENDERParameter = gENDER != null ?
                new ObjectParameter("GENDER", gENDER) :
                new ObjectParameter("GENDER", typeof(string));
    
            var tITLEParameter = tITLE != null ?
                new ObjectParameter("TITLE", tITLE) :
                new ObjectParameter("TITLE", typeof(string));
    
            var nTitleParameter = nTitle.HasValue ?
                new ObjectParameter("nTitle", nTitle) :
                new ObjectParameter("nTitle", typeof(int));
    
            var bIRTHDAYParameter = bIRTHDAY.HasValue ?
                new ObjectParameter("BIRTHDAY", bIRTHDAY) :
                new ObjectParameter("BIRTHDAY", typeof(System.DateTime));
    
            var hIREDDAYParameter = hIREDDAY.HasValue ?
                new ObjectParameter("HIREDDAY", hIREDDAY) :
                new ObjectParameter("HIREDDAY", typeof(System.DateTime));
    
            var addr1Parameter = addr1 != null ?
                new ObjectParameter("Addr1", addr1) :
                new ObjectParameter("Addr1", typeof(string));
    
            var zIPParameter = zIP != null ?
                new ObjectParameter("ZIP", zIP) :
                new ObjectParameter("ZIP", typeof(string));
    
            var telParameter = tel != null ?
                new ObjectParameter("Tel", tel) :
                new ObjectParameter("Tel", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var sECURITYFLAGSParameter = sECURITYFLAGS.HasValue ?
                new ObjectParameter("SECURITYFLAGS", sECURITYFLAGS) :
                new ObjectParameter("SECURITYFLAGS", typeof(int));
    
            var pHOTOParameter = pHOTO != null ?
                new ObjectParameter("PHOTO", pHOTO) :
                new ObjectParameter("PHOTO", typeof(byte[]));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("Lastname", lastname) :
                new ObjectParameter("Lastname", typeof(string));
    
            var tFirstnameParameter = tFirstname != null ?
                new ObjectParameter("TFirstname", tFirstname) :
                new ObjectParameter("TFirstname", typeof(string));
    
            var tLastnameParameter = tLastname != null ?
                new ObjectParameter("TLastname", tLastname) :
                new ObjectParameter("TLastname", typeof(string));
    
            var ternCodeParameter = ternCode != null ?
                new ObjectParameter("TernCode", ternCode) :
                new ObjectParameter("TernCode", typeof(string));
    
            var ternSubcodeParameter = ternSubcode != null ?
                new ObjectParameter("TernSubcode", ternSubcode) :
                new ObjectParameter("TernSubcode", typeof(string));
    
            var positioninfoParameter = positioninfo.HasValue ?
                new ObjectParameter("Positioninfo", positioninfo) :
                new ObjectParameter("Positioninfo", typeof(int));
    
            var verity_TypeParameter = verity_Type != null ?
                new ObjectParameter("Verity_Type", verity_Type) :
                new ObjectParameter("Verity_Type", typeof(string));
    
            var passwordsParameter = passwords != null ?
                new ObjectParameter("Passwords", passwords) :
                new ObjectParameter("Passwords", typeof(string));
    
            var activePassParameter = activePass != null ?
                new ObjectParameter("ActivePass", activePass) :
                new ObjectParameter("ActivePass", typeof(string));
    
            var iDCardParameter = iDCard != null ?
                new ObjectParameter("IDCard", iDCard) :
                new ObjectParameter("IDCard", typeof(string));
    
            var cardActiveParameter = cardActive != null ?
                new ObjectParameter("CardActive", cardActive) :
                new ObjectParameter("CardActive", typeof(string));
    
            var cardStartDateParameter = cardStartDate.HasValue ?
                new ObjectParameter("CardStartDate", cardStartDate) :
                new ObjectParameter("CardStartDate", typeof(System.DateTime));
    
            var cardExpireDateParameter = cardExpireDate.HasValue ?
                new ObjectParameter("CardExpireDate", cardExpireDate) :
                new ObjectParameter("CardExpireDate", typeof(System.DateTime));
    
            var passwordwebParameter = passwordweb != null ?
                new ObjectParameter("Passwordweb", passwordweb) :
                new ObjectParameter("Passwordweb", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var workmodeParameter = workmode.HasValue ?
                new ObjectParameter("workmode", workmode) :
                new ObjectParameter("workmode", typeof(int));
    
            var groupParameter = group.HasValue ?
                new ObjectParameter("group", group) :
                new ObjectParameter("group", typeof(int));
    
            var fPCParameter = fPC.HasValue ?
                new ObjectParameter("FPC", fPC) :
                new ObjectParameter("FPC", typeof(int));
    
            var nFParameter = nF.HasValue ?
                new ObjectParameter("NF", nF) :
                new ObjectParameter("NF", typeof(int));
    
            var mCGourpParameter = mCGourp.HasValue ?
                new ObjectParameter("MCGourp", mCGourp) :
                new ObjectParameter("MCGourp", typeof(int));
    
            var expireCardParameter = expireCard.HasValue ?
                new ObjectParameter("ExpireCard", expireCard) :
                new ObjectParameter("ExpireCard", typeof(System.DateTime));
    
            var workStartHParameter = workStartH.HasValue ?
                new ObjectParameter("WorkStartH", workStartH) :
                new ObjectParameter("WorkStartH", typeof(int));
    
            var workStartMParameter = workStartM.HasValue ?
                new ObjectParameter("workStartM", workStartM) :
                new ObjectParameter("workStartM", typeof(int));
    
            var workEndHParameter = workEndH.HasValue ?
                new ObjectParameter("WorkEndH", workEndH) :
                new ObjectParameter("WorkEndH", typeof(int));
    
            var workEndMParameter = workEndM.HasValue ?
                new ObjectParameter("WorkEndM", workEndM) :
                new ObjectParameter("WorkEndM", typeof(int));
    
            var groupTimeParameter = groupTime.HasValue ?
                new ObjectParameter("GroupTime", groupTime) :
                new ObjectParameter("GroupTime", typeof(int));
    
            var faceauthorityParameter = faceauthority != null ?
                new ObjectParameter("faceauthority", faceauthority) :
                new ObjectParameter("faceauthority", typeof(string));
    
            var facecalidParameter = facecalid.HasValue ?
                new ObjectParameter("Facecalid", facecalid) :
                new ObjectParameter("Facecalid", typeof(int));
    
            var faceopenmodeParameter = faceopenmode != null ?
                new ObjectParameter("Faceopenmode", faceopenmode) :
                new ObjectParameter("Faceopenmode", typeof(string));
    
            var facecheckmodeParameter = facecheckmode != null ?
                new ObjectParameter("Facecheckmode", facecheckmode) :
                new ObjectParameter("Facecheckmode", typeof(string));
    
            var faceidcardParameter = faceidcard != null ?
                new ObjectParameter("Faceidcard", faceidcard) :
                new ObjectParameter("Faceidcard", typeof(string));
    
            var ncardnoParameter = ncardno.HasValue ?
                new ObjectParameter("ncardno", ncardno) :
                new ObjectParameter("ncardno", typeof(int));
    
            var vein_AccessParameter = vein_Access.HasValue ?
                new ObjectParameter("Vein_Access", vein_Access) :
                new ObjectParameter("Vein_Access", typeof(int));
    
            var vein_TimezoneParameter = vein_Timezone != null ?
                new ObjectParameter("Vein_Timezone", vein_Timezone) :
                new ObjectParameter("Vein_Timezone", typeof(string));
    
            var vein_userspecialParameter = vein_userspecial.HasValue ?
                new ObjectParameter("Vein_userspecial", vein_userspecial) :
                new ObjectParameter("Vein_userspecial", typeof(int));
    
            var vein_usertypeParameter = vein_usertype.HasValue ?
                new ObjectParameter("Vein_usertype", vein_usertype) :
                new ObjectParameter("Vein_usertype", typeof(int));
    
            var vein_userLevelParameter = vein_userLevel.HasValue ?
                new ObjectParameter("Vein_userLevel", vein_userLevel) :
                new ObjectParameter("Vein_userLevel", typeof(int));
    
            var vein_user1toNParameter = vein_user1toN.HasValue ?
                new ObjectParameter("Vein_user1toN", vein_user1toN) :
                new ObjectParameter("Vein_user1toN", typeof(int));
    
            var vein_ActiveParameter = vein_Active.HasValue ?
                new ObjectParameter("Vein_Active", vein_Active) :
                new ObjectParameter("Vein_Active", typeof(int));
    
            var vein_BlockuserParameter = vein_Blockuser.HasValue ?
                new ObjectParameter("Vein_Blockuser", vein_Blockuser) :
                new ObjectParameter("Vein_Blockuser", typeof(int));
    
            var vein_BlockDateParameter = vein_BlockDate.HasValue ?
                new ObjectParameter("Vein_BlockDate", vein_BlockDate) :
                new ObjectParameter("Vein_BlockDate", typeof(int));
    
            var vein_AccessmodeParameter = vein_Accessmode.HasValue ?
                new ObjectParameter("Vein_Accessmode", vein_Accessmode) :
                new ObjectParameter("Vein_Accessmode", typeof(int));
    
            var vein_ScheduleParameter = vein_Schedule != null ?
                new ObjectParameter("Vein_Schedule", vein_Schedule) :
                new ObjectParameter("Vein_Schedule", typeof(string));
    
            var vein_batchadminParameter = vein_batchadmin.HasValue ?
                new ObjectParameter("Vein_batchadmin", vein_batchadmin) :
                new ObjectParameter("Vein_batchadmin", typeof(int));
    
            var usertypeParameter = usertype.HasValue ?
                new ObjectParameter("usertype", usertype) :
                new ObjectParameter("usertype", typeof(int));
    
            var groupdevicetimeParameter = groupdevicetime != null ?
                new ObjectParameter("Groupdevicetime", groupdevicetime) :
                new ObjectParameter("Groupdevicetime", typeof(string));
    
            var carIDParameter = carID != null ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(string));
    
            var carModelParameter = carModel != null ?
                new ObjectParameter("CarModel", carModel) :
                new ObjectParameter("CarModel", typeof(string));
    
            var carID1Parameter = carID1 != null ?
                new ObjectParameter("CarID1", carID1) :
                new ObjectParameter("CarID1", typeof(string));
    
            var carModel1Parameter = carModel1 != null ?
                new ObjectParameter("CarModel1", carModel1) :
                new ObjectParameter("CarModel1", typeof(string));
    
            var carID2Parameter = carID2 != null ?
                new ObjectParameter("CarID2", carID2) :
                new ObjectParameter("CarID2", typeof(string));
    
            var carModel2Parameter = carModel2 != null ?
                new ObjectParameter("CarModel2", carModel2) :
                new ObjectParameter("CarModel2", typeof(string));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var imagepathsParameter = imagepaths != null ?
                new ObjectParameter("Imagepaths", imagepaths) :
                new ObjectParameter("Imagepaths", typeof(string));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            var nSecurityLevelParameter = nSecurityLevel.HasValue ?
                new ObjectParameter("nSecurityLevel", nSecurityLevel) :
                new ObjectParameter("nSecurityLevel", typeof(int));
    
            var sfParameter = sf.HasValue ?
                new ObjectParameter("sf", sf) :
                new ObjectParameter("sf", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_USERINFO", uSERIDParameter, bADGENUMBERParameter, sSNParameter, refNoParameter, gENDERParameter, tITLEParameter, nTitleParameter, bIRTHDAYParameter, hIREDDAYParameter, addr1Parameter, zIPParameter, telParameter, mobileParameter, sECURITYFLAGSParameter, pHOTOParameter, firstNameParameter, lastnameParameter, tFirstnameParameter, tLastnameParameter, ternCodeParameter, ternSubcodeParameter, positioninfoParameter, verity_TypeParameter, passwordsParameter, activePassParameter, iDCardParameter, cardActiveParameter, cardStartDateParameter, cardExpireDateParameter, passwordwebParameter, statusParameter, workmodeParameter, groupParameter, fPCParameter, nFParameter, mCGourpParameter, expireCardParameter, workStartHParameter, workStartMParameter, workEndHParameter, workEndMParameter, groupTimeParameter, faceauthorityParameter, facecalidParameter, faceopenmodeParameter, facecheckmodeParameter, faceidcardParameter, ncardnoParameter, vein_AccessParameter, vein_TimezoneParameter, vein_userspecialParameter, vein_usertypeParameter, vein_userLevelParameter, vein_user1toNParameter, vein_ActiveParameter, vein_BlockuserParameter, vein_BlockDateParameter, vein_AccessmodeParameter, vein_ScheduleParameter, vein_batchadminParameter, usertypeParameter, groupdevicetimeParameter, carIDParameter, carModelParameter, carID1Parameter, carModel1Parameter, carID2Parameter, carModel2Parameter, last_UpdParameter, person_IDParameter, imagepathsParameter, syndateParameter, nSecurityLevelParameter, sfParameter);
        }
    
        public virtual ObjectResult<InsertLog_old_Result> InsertLog_old(Nullable<int> uSERID, Nullable<System.DateTime> cHECKTIME, string cHECKTYPE, Nullable<int> vERIFYCODE, string sENSORID, Nullable<short> fUNCTIONKEY, Nullable<int> tID, string status, string ipcon, Nullable<int> status_door, Nullable<int> subdoor, Nullable<int> dOOR, Nullable<int> tickcount, string tickdate, Nullable<int> portdoor, Nullable<int> resv1, Nullable<int> resv2, string mEMO1, string tYPE1, Nullable<int> event_value, Nullable<int> eCODE, Nullable<int> uLRTz, Nullable<int> lIndex)
        {
            var uSERIDParameter = uSERID.HasValue ?
                new ObjectParameter("USERID", uSERID) :
                new ObjectParameter("USERID", typeof(int));
    
            var cHECKTIMEParameter = cHECKTIME.HasValue ?
                new ObjectParameter("CHECKTIME", cHECKTIME) :
                new ObjectParameter("CHECKTIME", typeof(System.DateTime));
    
            var cHECKTYPEParameter = cHECKTYPE != null ?
                new ObjectParameter("CHECKTYPE", cHECKTYPE) :
                new ObjectParameter("CHECKTYPE", typeof(string));
    
            var vERIFYCODEParameter = vERIFYCODE.HasValue ?
                new ObjectParameter("VERIFYCODE", vERIFYCODE) :
                new ObjectParameter("VERIFYCODE", typeof(int));
    
            var sENSORIDParameter = sENSORID != null ?
                new ObjectParameter("SENSORID", sENSORID) :
                new ObjectParameter("SENSORID", typeof(string));
    
            var fUNCTIONKEYParameter = fUNCTIONKEY.HasValue ?
                new ObjectParameter("FUNCTIONKEY", fUNCTIONKEY) :
                new ObjectParameter("FUNCTIONKEY", typeof(short));
    
            var tIDParameter = tID.HasValue ?
                new ObjectParameter("TID", tID) :
                new ObjectParameter("TID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var ipconParameter = ipcon != null ?
                new ObjectParameter("ipcon", ipcon) :
                new ObjectParameter("ipcon", typeof(string));
    
            var status_doorParameter = status_door.HasValue ?
                new ObjectParameter("status_door", status_door) :
                new ObjectParameter("status_door", typeof(int));
    
            var subdoorParameter = subdoor.HasValue ?
                new ObjectParameter("subdoor", subdoor) :
                new ObjectParameter("subdoor", typeof(int));
    
            var dOORParameter = dOOR.HasValue ?
                new ObjectParameter("DOOR", dOOR) :
                new ObjectParameter("DOOR", typeof(int));
    
            var tickcountParameter = tickcount.HasValue ?
                new ObjectParameter("tickcount", tickcount) :
                new ObjectParameter("tickcount", typeof(int));
    
            var tickdateParameter = tickdate != null ?
                new ObjectParameter("tickdate", tickdate) :
                new ObjectParameter("tickdate", typeof(string));
    
            var portdoorParameter = portdoor.HasValue ?
                new ObjectParameter("portdoor", portdoor) :
                new ObjectParameter("portdoor", typeof(int));
    
            var resv1Parameter = resv1.HasValue ?
                new ObjectParameter("resv1", resv1) :
                new ObjectParameter("resv1", typeof(int));
    
            var resv2Parameter = resv2.HasValue ?
                new ObjectParameter("resv2", resv2) :
                new ObjectParameter("resv2", typeof(int));
    
            var mEMO1Parameter = mEMO1 != null ?
                new ObjectParameter("MEMO1", mEMO1) :
                new ObjectParameter("MEMO1", typeof(string));
    
            var tYPE1Parameter = tYPE1 != null ?
                new ObjectParameter("TYPE1", tYPE1) :
                new ObjectParameter("TYPE1", typeof(string));
    
            var event_valueParameter = event_value.HasValue ?
                new ObjectParameter("event_value", event_value) :
                new ObjectParameter("event_value", typeof(int));
    
            var eCODEParameter = eCODE.HasValue ?
                new ObjectParameter("ECODE", eCODE) :
                new ObjectParameter("ECODE", typeof(int));
    
            var uLRTzParameter = uLRTz.HasValue ?
                new ObjectParameter("ULRTz", uLRTz) :
                new ObjectParameter("ULRTz", typeof(int));
    
            var lIndexParameter = lIndex.HasValue ?
                new ObjectParameter("LIndex", lIndex) :
                new ObjectParameter("LIndex", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertLog_old_Result>("InsertLog_old", uSERIDParameter, cHECKTIMEParameter, cHECKTYPEParameter, vERIFYCODEParameter, sENSORIDParameter, fUNCTIONKEYParameter, tIDParameter, statusParameter, ipconParameter, status_doorParameter, subdoorParameter, dOORParameter, tickcountParameter, tickdateParameter, portdoorParameter, resv1Parameter, resv2Parameter, mEMO1Parameter, tYPE1Parameter, event_valueParameter, eCODEParameter, uLRTzParameter, lIndexParameter);
        }
    
        public virtual int madministratorlog_insert(string adminname1, string name, Nullable<System.DateTime> logdate1, string prg1, string topic1, string subtopic1, Nullable<int> actionFlag1, string oldvalue1, string newvalue1, string memo1, string deviceno, Nullable<int> adminlevel1)
        {
            var adminname1Parameter = adminname1 != null ?
                new ObjectParameter("adminname1", adminname1) :
                new ObjectParameter("adminname1", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var logdate1Parameter = logdate1.HasValue ?
                new ObjectParameter("logdate1", logdate1) :
                new ObjectParameter("logdate1", typeof(System.DateTime));
    
            var prg1Parameter = prg1 != null ?
                new ObjectParameter("prg1", prg1) :
                new ObjectParameter("prg1", typeof(string));
    
            var topic1Parameter = topic1 != null ?
                new ObjectParameter("topic1", topic1) :
                new ObjectParameter("topic1", typeof(string));
    
            var subtopic1Parameter = subtopic1 != null ?
                new ObjectParameter("subtopic1", subtopic1) :
                new ObjectParameter("subtopic1", typeof(string));
    
            var actionFlag1Parameter = actionFlag1.HasValue ?
                new ObjectParameter("actionFlag1", actionFlag1) :
                new ObjectParameter("actionFlag1", typeof(int));
    
            var oldvalue1Parameter = oldvalue1 != null ?
                new ObjectParameter("oldvalue1", oldvalue1) :
                new ObjectParameter("oldvalue1", typeof(string));
    
            var newvalue1Parameter = newvalue1 != null ?
                new ObjectParameter("newvalue1", newvalue1) :
                new ObjectParameter("newvalue1", typeof(string));
    
            var memo1Parameter = memo1 != null ?
                new ObjectParameter("memo1", memo1) :
                new ObjectParameter("memo1", typeof(string));
    
            var devicenoParameter = deviceno != null ?
                new ObjectParameter("deviceno", deviceno) :
                new ObjectParameter("deviceno", typeof(string));
    
            var adminlevel1Parameter = adminlevel1.HasValue ?
                new ObjectParameter("Adminlevel1", adminlevel1) :
                new ObjectParameter("Adminlevel1", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("madministratorlog_insert", adminname1Parameter, nameParameter, logdate1Parameter, prg1Parameter, topic1Parameter, subtopic1Parameter, actionFlag1Parameter, oldvalue1Parameter, newvalue1Parameter, memo1Parameter, devicenoParameter, adminlevel1Parameter);
        }
    
        public virtual int MS_madministratorlog_insert(string adminname1, string name, Nullable<System.DateTime> logdate1, string prg1, string topic1, string subtopic1, Nullable<int> actionFlag1, string oldvalue1, string newvalue1, string memo1, string deviceno, Nullable<int> adminlevel1)
        {
            var adminname1Parameter = adminname1 != null ?
                new ObjectParameter("adminname1", adminname1) :
                new ObjectParameter("adminname1", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var logdate1Parameter = logdate1.HasValue ?
                new ObjectParameter("logdate1", logdate1) :
                new ObjectParameter("logdate1", typeof(System.DateTime));
    
            var prg1Parameter = prg1 != null ?
                new ObjectParameter("prg1", prg1) :
                new ObjectParameter("prg1", typeof(string));
    
            var topic1Parameter = topic1 != null ?
                new ObjectParameter("topic1", topic1) :
                new ObjectParameter("topic1", typeof(string));
    
            var subtopic1Parameter = subtopic1 != null ?
                new ObjectParameter("subtopic1", subtopic1) :
                new ObjectParameter("subtopic1", typeof(string));
    
            var actionFlag1Parameter = actionFlag1.HasValue ?
                new ObjectParameter("actionFlag1", actionFlag1) :
                new ObjectParameter("actionFlag1", typeof(int));
    
            var oldvalue1Parameter = oldvalue1 != null ?
                new ObjectParameter("oldvalue1", oldvalue1) :
                new ObjectParameter("oldvalue1", typeof(string));
    
            var newvalue1Parameter = newvalue1 != null ?
                new ObjectParameter("newvalue1", newvalue1) :
                new ObjectParameter("newvalue1", typeof(string));
    
            var memo1Parameter = memo1 != null ?
                new ObjectParameter("memo1", memo1) :
                new ObjectParameter("memo1", typeof(string));
    
            var devicenoParameter = deviceno != null ?
                new ObjectParameter("deviceno", deviceno) :
                new ObjectParameter("deviceno", typeof(string));
    
            var adminlevel1Parameter = adminlevel1.HasValue ?
                new ObjectParameter("Adminlevel1", adminlevel1) :
                new ObjectParameter("Adminlevel1", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MS_madministratorlog_insert", adminname1Parameter, nameParameter, logdate1Parameter, prg1Parameter, topic1Parameter, subtopic1Parameter, actionFlag1Parameter, oldvalue1Parameter, newvalue1Parameter, memo1Parameter, devicenoParameter, adminlevel1Parameter);
        }
    
        public virtual int Pk_Create_LinkServer(string servername, string databasename, string username, string password1, ObjectParameter result1)
        {
            var servernameParameter = servername != null ?
                new ObjectParameter("servername", servername) :
                new ObjectParameter("servername", typeof(string));
    
            var databasenameParameter = databasename != null ?
                new ObjectParameter("databasename", databasename) :
                new ObjectParameter("databasename", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var password1Parameter = password1 != null ?
                new ObjectParameter("password1", password1) :
                new ObjectParameter("password1", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pk_Create_LinkServer", servernameParameter, databasenameParameter, usernameParameter, password1Parameter, result1);
        }
    
        public virtual int Pk_Drop_LinkServer(string servername, ObjectParameter result1)
        {
            var servernameParameter = servername != null ?
                new ObjectParameter("servername", servername) :
                new ObjectParameter("servername", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pk_Drop_LinkServer", servernameParameter, result1);
        }
    
        public virtual ObjectResult<Pk_GetSummaryTernnent_Result> Pk_GetSummaryTernnent(string ternCode, string ternsubCode, Nullable<int> fn, Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate)
        {
            var ternCodeParameter = ternCode != null ?
                new ObjectParameter("ternCode", ternCode) :
                new ObjectParameter("ternCode", typeof(string));
    
            var ternsubCodeParameter = ternsubCode != null ?
                new ObjectParameter("ternsubCode", ternsubCode) :
                new ObjectParameter("ternsubCode", typeof(string));
    
            var fnParameter = fn.HasValue ?
                new ObjectParameter("fn", fn) :
                new ObjectParameter("fn", typeof(int));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Pk_GetSummaryTernnent_Result>("Pk_GetSummaryTernnent", ternCodeParameter, ternsubCodeParameter, fnParameter, startdateParameter, enddateParameter);
        }
    
        public virtual int Pk_testconnect_LinkServer(string servername, ObjectParameter result1)
        {
            var servernameParameter = servername != null ?
                new ObjectParameter("servername", servername) :
                new ObjectParameter("servername", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pk_testconnect_LinkServer", servernameParameter, result1);
        }
    
        public virtual int Pkadminsystemlog_insert(string adminname1, string userName1, Nullable<System.DateTime> logdate1, string prg1, string topic1, string subtopic1, Nullable<int> actionFlag1, string oldvalue1, string newvalue1, string memo1, string deviceno1, Nullable<int> adminlevel1, Nullable<int> sf, Nullable<System.DateTime> syndate, string table1, string keyid)
        {
            var adminname1Parameter = adminname1 != null ?
                new ObjectParameter("adminname1", adminname1) :
                new ObjectParameter("adminname1", typeof(string));
    
            var userName1Parameter = userName1 != null ?
                new ObjectParameter("userName1", userName1) :
                new ObjectParameter("userName1", typeof(string));
    
            var logdate1Parameter = logdate1.HasValue ?
                new ObjectParameter("logdate1", logdate1) :
                new ObjectParameter("logdate1", typeof(System.DateTime));
    
            var prg1Parameter = prg1 != null ?
                new ObjectParameter("prg1", prg1) :
                new ObjectParameter("prg1", typeof(string));
    
            var topic1Parameter = topic1 != null ?
                new ObjectParameter("topic1", topic1) :
                new ObjectParameter("topic1", typeof(string));
    
            var subtopic1Parameter = subtopic1 != null ?
                new ObjectParameter("subtopic1", subtopic1) :
                new ObjectParameter("subtopic1", typeof(string));
    
            var actionFlag1Parameter = actionFlag1.HasValue ?
                new ObjectParameter("actionFlag1", actionFlag1) :
                new ObjectParameter("actionFlag1", typeof(int));
    
            var oldvalue1Parameter = oldvalue1 != null ?
                new ObjectParameter("oldvalue1", oldvalue1) :
                new ObjectParameter("oldvalue1", typeof(string));
    
            var newvalue1Parameter = newvalue1 != null ?
                new ObjectParameter("newvalue1", newvalue1) :
                new ObjectParameter("newvalue1", typeof(string));
    
            var memo1Parameter = memo1 != null ?
                new ObjectParameter("memo1", memo1) :
                new ObjectParameter("memo1", typeof(string));
    
            var deviceno1Parameter = deviceno1 != null ?
                new ObjectParameter("deviceno1", deviceno1) :
                new ObjectParameter("deviceno1", typeof(string));
    
            var adminlevel1Parameter = adminlevel1.HasValue ?
                new ObjectParameter("Adminlevel1", adminlevel1) :
                new ObjectParameter("Adminlevel1", typeof(int));
    
            var sfParameter = sf.HasValue ?
                new ObjectParameter("sf", sf) :
                new ObjectParameter("sf", typeof(int));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            var table1Parameter = table1 != null ?
                new ObjectParameter("table1", table1) :
                new ObjectParameter("table1", typeof(string));
    
            var keyidParameter = keyid != null ?
                new ObjectParameter("keyid", keyid) :
                new ObjectParameter("keyid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pkadminsystemlog_insert", adminname1Parameter, userName1Parameter, logdate1Parameter, prg1Parameter, topic1Parameter, subtopic1Parameter, actionFlag1Parameter, oldvalue1Parameter, newvalue1Parameter, memo1Parameter, deviceno1Parameter, adminlevel1Parameter, sfParameter, syndateParameter, table1Parameter, keyidParameter);
        }
    
        public virtual int Pkadminsystemlog_insertv1(string adminname1, string userName1, Nullable<System.DateTime> logdate1, string prg1, string topic1, string subtopic1, Nullable<int> actionFlag1, string oldvalue1, string newvalue1, string memo1, string deviceno1, Nullable<int> adminlevel1, Nullable<int> sf, Nullable<System.DateTime> syndate, string table1, string keyid, string custno, string name1, string cscmain_id, string topicT1, string subTopicT1)
        {
            var adminname1Parameter = adminname1 != null ?
                new ObjectParameter("adminname1", adminname1) :
                new ObjectParameter("adminname1", typeof(string));
    
            var userName1Parameter = userName1 != null ?
                new ObjectParameter("userName1", userName1) :
                new ObjectParameter("userName1", typeof(string));
    
            var logdate1Parameter = logdate1.HasValue ?
                new ObjectParameter("logdate1", logdate1) :
                new ObjectParameter("logdate1", typeof(System.DateTime));
    
            var prg1Parameter = prg1 != null ?
                new ObjectParameter("prg1", prg1) :
                new ObjectParameter("prg1", typeof(string));
    
            var topic1Parameter = topic1 != null ?
                new ObjectParameter("topic1", topic1) :
                new ObjectParameter("topic1", typeof(string));
    
            var subtopic1Parameter = subtopic1 != null ?
                new ObjectParameter("subtopic1", subtopic1) :
                new ObjectParameter("subtopic1", typeof(string));
    
            var actionFlag1Parameter = actionFlag1.HasValue ?
                new ObjectParameter("actionFlag1", actionFlag1) :
                new ObjectParameter("actionFlag1", typeof(int));
    
            var oldvalue1Parameter = oldvalue1 != null ?
                new ObjectParameter("oldvalue1", oldvalue1) :
                new ObjectParameter("oldvalue1", typeof(string));
    
            var newvalue1Parameter = newvalue1 != null ?
                new ObjectParameter("newvalue1", newvalue1) :
                new ObjectParameter("newvalue1", typeof(string));
    
            var memo1Parameter = memo1 != null ?
                new ObjectParameter("memo1", memo1) :
                new ObjectParameter("memo1", typeof(string));
    
            var deviceno1Parameter = deviceno1 != null ?
                new ObjectParameter("deviceno1", deviceno1) :
                new ObjectParameter("deviceno1", typeof(string));
    
            var adminlevel1Parameter = adminlevel1.HasValue ?
                new ObjectParameter("Adminlevel1", adminlevel1) :
                new ObjectParameter("Adminlevel1", typeof(int));
    
            var sfParameter = sf.HasValue ?
                new ObjectParameter("sf", sf) :
                new ObjectParameter("sf", typeof(int));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            var table1Parameter = table1 != null ?
                new ObjectParameter("table1", table1) :
                new ObjectParameter("table1", typeof(string));
    
            var keyidParameter = keyid != null ?
                new ObjectParameter("keyid", keyid) :
                new ObjectParameter("keyid", typeof(string));
    
            var custnoParameter = custno != null ?
                new ObjectParameter("custno", custno) :
                new ObjectParameter("custno", typeof(string));
    
            var name1Parameter = name1 != null ?
                new ObjectParameter("name1", name1) :
                new ObjectParameter("name1", typeof(string));
    
            var cscmain_idParameter = cscmain_id != null ?
                new ObjectParameter("Cscmain_id", cscmain_id) :
                new ObjectParameter("Cscmain_id", typeof(string));
    
            var topicT1Parameter = topicT1 != null ?
                new ObjectParameter("TopicT1", topicT1) :
                new ObjectParameter("TopicT1", typeof(string));
    
            var subTopicT1Parameter = subTopicT1 != null ?
                new ObjectParameter("SubTopicT1", subTopicT1) :
                new ObjectParameter("SubTopicT1", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pkadminsystemlog_insertv1", adminname1Parameter, userName1Parameter, logdate1Parameter, prg1Parameter, topic1Parameter, subtopic1Parameter, actionFlag1Parameter, oldvalue1Parameter, newvalue1Parameter, memo1Parameter, deviceno1Parameter, adminlevel1Parameter, sfParameter, syndateParameter, table1Parameter, keyidParameter, custnoParameter, name1Parameter, cscmain_idParameter, topicT1Parameter, subTopicT1Parameter);
        }
    
        public virtual int Pkcar_motor_ofcompanyovernight_insert(string custno, Nullable<System.DateTime> dateparking, string ternCode, string ternname, string name, string scr_no, string cscmain_id, Nullable<System.DateTime> indate, Nullable<int> typecard, Nullable<System.DateTime> datein1, Nullable<System.TimeSpan> timein1, string carid, string cartype, Nullable<decimal> cash)
        {
            var custnoParameter = custno != null ?
                new ObjectParameter("custno", custno) :
                new ObjectParameter("custno", typeof(string));
    
            var dateparkingParameter = dateparking.HasValue ?
                new ObjectParameter("dateparking", dateparking) :
                new ObjectParameter("dateparking", typeof(System.DateTime));
    
            var ternCodeParameter = ternCode != null ?
                new ObjectParameter("TernCode", ternCode) :
                new ObjectParameter("TernCode", typeof(string));
    
            var ternnameParameter = ternname != null ?
                new ObjectParameter("ternname", ternname) :
                new ObjectParameter("ternname", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var scr_noParameter = scr_no != null ?
                new ObjectParameter("scr_no", scr_no) :
                new ObjectParameter("scr_no", typeof(string));
    
            var cscmain_idParameter = cscmain_id != null ?
                new ObjectParameter("cscmain_id", cscmain_id) :
                new ObjectParameter("cscmain_id", typeof(string));
    
            var indateParameter = indate.HasValue ?
                new ObjectParameter("indate", indate) :
                new ObjectParameter("indate", typeof(System.DateTime));
    
            var typecardParameter = typecard.HasValue ?
                new ObjectParameter("typecard", typecard) :
                new ObjectParameter("typecard", typeof(int));
    
            var datein1Parameter = datein1.HasValue ?
                new ObjectParameter("datein1", datein1) :
                new ObjectParameter("datein1", typeof(System.DateTime));
    
            var timein1Parameter = timein1.HasValue ?
                new ObjectParameter("timein1", timein1) :
                new ObjectParameter("timein1", typeof(System.TimeSpan));
    
            var caridParameter = carid != null ?
                new ObjectParameter("carid", carid) :
                new ObjectParameter("carid", typeof(string));
    
            var cartypeParameter = cartype != null ?
                new ObjectParameter("cartype", cartype) :
                new ObjectParameter("cartype", typeof(string));
    
            var cashParameter = cash.HasValue ?
                new ObjectParameter("cash", cash) :
                new ObjectParameter("cash", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pkcar_motor_ofcompanyovernight_insert", custnoParameter, dateparkingParameter, ternCodeParameter, ternnameParameter, nameParameter, scr_noParameter, cscmain_idParameter, indateParameter, typecardParameter, datein1Parameter, timein1Parameter, caridParameter, cartypeParameter, cashParameter);
        }
    
        public virtual int Pkcard_replace(string scr_No, string cscMain_ID, string rabbit_ID, string custNo, string fname, string lname, string sex, string tel, Nullable<System.DateTime> birthday, string terncode, string ternSubCode, Nullable<int> cardType_ID, string carId, string carModel, Nullable<System.DateTime> issueDate, Nullable<int> issuesite_id, Nullable<int> issueLoc_ID, Nullable<int> issueEquip_ID, Nullable<System.DateTime> expDate, Nullable<System.DateTime> firstUse, Nullable<System.DateTime> lastUse, Nullable<int> lastLoc_ID, string last_Equip_ID, Nullable<int> status, string initCredit, Nullable<decimal> remainCredit, Nullable<decimal> earnest, Nullable<int> totalUse, Nullable<int> totalRides, Nullable<decimal> totalDeductCredit, Nullable<decimal> totalAddCredit, Nullable<decimal> totalBonusCredit, string occupied, string remark, string lastcscmain_id, string cardContact, string cartype, string cardType, string activecard, Nullable<System.DateTime> last_Upd, Nullable<int> person_ID, Nullable<System.DateTime> dateActive, string pay, string statuspay)
        {
            var scr_NoParameter = scr_No != null ?
                new ObjectParameter("Scr_No", scr_No) :
                new ObjectParameter("Scr_No", typeof(string));
    
            var cscMain_IDParameter = cscMain_ID != null ?
                new ObjectParameter("CscMain_ID", cscMain_ID) :
                new ObjectParameter("CscMain_ID", typeof(string));
    
            var rabbit_IDParameter = rabbit_ID != null ?
                new ObjectParameter("Rabbit_ID", rabbit_ID) :
                new ObjectParameter("Rabbit_ID", typeof(string));
    
            var custNoParameter = custNo != null ?
                new ObjectParameter("CustNo", custNo) :
                new ObjectParameter("CustNo", typeof(string));
    
            var fnameParameter = fname != null ?
                new ObjectParameter("Fname", fname) :
                new ObjectParameter("Fname", typeof(string));
    
            var lnameParameter = lname != null ?
                new ObjectParameter("Lname", lname) :
                new ObjectParameter("Lname", typeof(string));
    
            var sexParameter = sex != null ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(string));
    
            var telParameter = tel != null ?
                new ObjectParameter("Tel", tel) :
                new ObjectParameter("Tel", typeof(string));
    
            var birthdayParameter = birthday.HasValue ?
                new ObjectParameter("Birthday", birthday) :
                new ObjectParameter("Birthday", typeof(System.DateTime));
    
            var terncodeParameter = terncode != null ?
                new ObjectParameter("Terncode", terncode) :
                new ObjectParameter("Terncode", typeof(string));
    
            var ternSubCodeParameter = ternSubCode != null ?
                new ObjectParameter("TernSubCode", ternSubCode) :
                new ObjectParameter("TernSubCode", typeof(string));
    
            var cardType_IDParameter = cardType_ID.HasValue ?
                new ObjectParameter("CardType_ID", cardType_ID) :
                new ObjectParameter("CardType_ID", typeof(int));
    
            var carIdParameter = carId != null ?
                new ObjectParameter("CarId", carId) :
                new ObjectParameter("CarId", typeof(string));
    
            var carModelParameter = carModel != null ?
                new ObjectParameter("CarModel", carModel) :
                new ObjectParameter("CarModel", typeof(string));
    
            var issueDateParameter = issueDate.HasValue ?
                new ObjectParameter("IssueDate", issueDate) :
                new ObjectParameter("IssueDate", typeof(System.DateTime));
    
            var issuesite_idParameter = issuesite_id.HasValue ?
                new ObjectParameter("Issuesite_id", issuesite_id) :
                new ObjectParameter("Issuesite_id", typeof(int));
    
            var issueLoc_IDParameter = issueLoc_ID.HasValue ?
                new ObjectParameter("IssueLoc_ID", issueLoc_ID) :
                new ObjectParameter("IssueLoc_ID", typeof(int));
    
            var issueEquip_IDParameter = issueEquip_ID.HasValue ?
                new ObjectParameter("IssueEquip_ID", issueEquip_ID) :
                new ObjectParameter("IssueEquip_ID", typeof(int));
    
            var expDateParameter = expDate.HasValue ?
                new ObjectParameter("ExpDate", expDate) :
                new ObjectParameter("ExpDate", typeof(System.DateTime));
    
            var firstUseParameter = firstUse.HasValue ?
                new ObjectParameter("FirstUse", firstUse) :
                new ObjectParameter("FirstUse", typeof(System.DateTime));
    
            var lastUseParameter = lastUse.HasValue ?
                new ObjectParameter("LastUse", lastUse) :
                new ObjectParameter("LastUse", typeof(System.DateTime));
    
            var lastLoc_IDParameter = lastLoc_ID.HasValue ?
                new ObjectParameter("LastLoc_ID", lastLoc_ID) :
                new ObjectParameter("LastLoc_ID", typeof(int));
    
            var last_Equip_IDParameter = last_Equip_ID != null ?
                new ObjectParameter("Last_Equip_ID", last_Equip_ID) :
                new ObjectParameter("Last_Equip_ID", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var initCreditParameter = initCredit != null ?
                new ObjectParameter("InitCredit", initCredit) :
                new ObjectParameter("InitCredit", typeof(string));
    
            var remainCreditParameter = remainCredit.HasValue ?
                new ObjectParameter("RemainCredit", remainCredit) :
                new ObjectParameter("RemainCredit", typeof(decimal));
    
            var earnestParameter = earnest.HasValue ?
                new ObjectParameter("Earnest", earnest) :
                new ObjectParameter("Earnest", typeof(decimal));
    
            var totalUseParameter = totalUse.HasValue ?
                new ObjectParameter("TotalUse", totalUse) :
                new ObjectParameter("TotalUse", typeof(int));
    
            var totalRidesParameter = totalRides.HasValue ?
                new ObjectParameter("TotalRides", totalRides) :
                new ObjectParameter("TotalRides", typeof(int));
    
            var totalDeductCreditParameter = totalDeductCredit.HasValue ?
                new ObjectParameter("TotalDeductCredit", totalDeductCredit) :
                new ObjectParameter("TotalDeductCredit", typeof(decimal));
    
            var totalAddCreditParameter = totalAddCredit.HasValue ?
                new ObjectParameter("TotalAddCredit", totalAddCredit) :
                new ObjectParameter("TotalAddCredit", typeof(decimal));
    
            var totalBonusCreditParameter = totalBonusCredit.HasValue ?
                new ObjectParameter("TotalBonusCredit", totalBonusCredit) :
                new ObjectParameter("TotalBonusCredit", typeof(decimal));
    
            var occupiedParameter = occupied != null ?
                new ObjectParameter("Occupied", occupied) :
                new ObjectParameter("Occupied", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var lastcscmain_idParameter = lastcscmain_id != null ?
                new ObjectParameter("Lastcscmain_id", lastcscmain_id) :
                new ObjectParameter("Lastcscmain_id", typeof(string));
    
            var cardContactParameter = cardContact != null ?
                new ObjectParameter("CardContact", cardContact) :
                new ObjectParameter("CardContact", typeof(string));
    
            var cartypeParameter = cartype != null ?
                new ObjectParameter("Cartype", cartype) :
                new ObjectParameter("Cartype", typeof(string));
    
            var cardTypeParameter = cardType != null ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(string));
    
            var activecardParameter = activecard != null ?
                new ObjectParameter("Activecard", activecard) :
                new ObjectParameter("Activecard", typeof(string));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var dateActiveParameter = dateActive.HasValue ?
                new ObjectParameter("DateActive", dateActive) :
                new ObjectParameter("DateActive", typeof(System.DateTime));
    
            var payParameter = pay != null ?
                new ObjectParameter("Pay", pay) :
                new ObjectParameter("Pay", typeof(string));
    
            var statuspayParameter = statuspay != null ?
                new ObjectParameter("Statuspay", statuspay) :
                new ObjectParameter("Statuspay", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pkcard_replace", scr_NoParameter, cscMain_IDParameter, rabbit_IDParameter, custNoParameter, fnameParameter, lnameParameter, sexParameter, telParameter, birthdayParameter, terncodeParameter, ternSubCodeParameter, cardType_IDParameter, carIdParameter, carModelParameter, issueDateParameter, issuesite_idParameter, issueLoc_IDParameter, issueEquip_IDParameter, expDateParameter, firstUseParameter, lastUseParameter, lastLoc_IDParameter, last_Equip_IDParameter, statusParameter, initCreditParameter, remainCreditParameter, earnestParameter, totalUseParameter, totalRidesParameter, totalDeductCreditParameter, totalAddCreditParameter, totalBonusCreditParameter, occupiedParameter, remarkParameter, lastcscmain_idParameter, cardContactParameter, cartypeParameter, cardTypeParameter, activecardParameter, last_UpdParameter, person_IDParameter, dateActiveParameter, payParameter, statuspayParameter);
        }
    
        public virtual int Pkcardexpired_update(Nullable<System.DateTime> expdate, Nullable<System.DateTime> lastuse, string cartype, string terncode)
        {
            var expdateParameter = expdate.HasValue ?
                new ObjectParameter("expdate", expdate) :
                new ObjectParameter("expdate", typeof(System.DateTime));
    
            var lastuseParameter = lastuse.HasValue ?
                new ObjectParameter("lastuse", lastuse) :
                new ObjectParameter("lastuse", typeof(System.DateTime));
    
            var cartypeParameter = cartype != null ?
                new ObjectParameter("cartype", cartype) :
                new ObjectParameter("cartype", typeof(string));
    
            var terncodeParameter = terncode != null ?
                new ObjectParameter("terncode", terncode) :
                new ObjectParameter("terncode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pkcardexpired_update", expdateParameter, lastuseParameter, cartypeParameter, terncodeParameter);
        }
    
        public virtual int Pkcardexpired_update_visitor(Nullable<System.DateTime> expdate, Nullable<System.DateTime> lastuse, string cartype)
        {
            var expdateParameter = expdate.HasValue ?
                new ObjectParameter("expdate", expdate) :
                new ObjectParameter("expdate", typeof(System.DateTime));
    
            var lastuseParameter = lastuse.HasValue ?
                new ObjectParameter("lastuse", lastuse) :
                new ObjectParameter("lastuse", typeof(System.DateTime));
    
            var cartypeParameter = cartype != null ?
                new ObjectParameter("cartype", cartype) :
                new ObjectParameter("cartype", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pkcardexpired_update_visitor", expdateParameter, lastuseParameter, cartypeParameter);
        }
    
        public virtual int Pkcareditinout_update(string lost_Card, Nullable<decimal> lost_Card_Fine, Nullable<System.DateTime> indate, Nullable<System.DateTime> outdate, Nullable<System.DateTime> datein1, Nullable<System.TimeSpan> timein1, Nullable<System.DateTime> dateout1, Nullable<System.TimeSpan> timeout1, string carid, Nullable<int> lastequip_id, string euser, string inOutTran_ID, Nullable<int> sf, Nullable<System.DateTime> last_upd)
        {
            var lost_CardParameter = lost_Card != null ?
                new ObjectParameter("Lost_Card", lost_Card) :
                new ObjectParameter("Lost_Card", typeof(string));
    
            var lost_Card_FineParameter = lost_Card_Fine.HasValue ?
                new ObjectParameter("Lost_Card_Fine", lost_Card_Fine) :
                new ObjectParameter("Lost_Card_Fine", typeof(decimal));
    
            var indateParameter = indate.HasValue ?
                new ObjectParameter("indate", indate) :
                new ObjectParameter("indate", typeof(System.DateTime));
    
            var outdateParameter = outdate.HasValue ?
                new ObjectParameter("outdate", outdate) :
                new ObjectParameter("outdate", typeof(System.DateTime));
    
            var datein1Parameter = datein1.HasValue ?
                new ObjectParameter("datein1", datein1) :
                new ObjectParameter("datein1", typeof(System.DateTime));
    
            var timein1Parameter = timein1.HasValue ?
                new ObjectParameter("timein1", timein1) :
                new ObjectParameter("timein1", typeof(System.TimeSpan));
    
            var dateout1Parameter = dateout1.HasValue ?
                new ObjectParameter("dateout1", dateout1) :
                new ObjectParameter("dateout1", typeof(System.DateTime));
    
            var timeout1Parameter = timeout1.HasValue ?
                new ObjectParameter("timeout1", timeout1) :
                new ObjectParameter("timeout1", typeof(System.TimeSpan));
    
            var caridParameter = carid != null ?
                new ObjectParameter("carid", carid) :
                new ObjectParameter("carid", typeof(string));
    
            var lastequip_idParameter = lastequip_id.HasValue ?
                new ObjectParameter("lastequip_id", lastequip_id) :
                new ObjectParameter("lastequip_id", typeof(int));
    
            var euserParameter = euser != null ?
                new ObjectParameter("Euser", euser) :
                new ObjectParameter("Euser", typeof(string));
    
            var inOutTran_IDParameter = inOutTran_ID != null ?
                new ObjectParameter("InOutTran_ID", inOutTran_ID) :
                new ObjectParameter("InOutTran_ID", typeof(string));
    
            var sfParameter = sf.HasValue ?
                new ObjectParameter("sf", sf) :
                new ObjectParameter("sf", typeof(int));
    
            var last_updParameter = last_upd.HasValue ?
                new ObjectParameter("last_upd", last_upd) :
                new ObjectParameter("last_upd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pkcareditinout_update", lost_CardParameter, lost_Card_FineParameter, indateParameter, outdateParameter, datein1Parameter, timein1Parameter, dateout1Parameter, timeout1Parameter, caridParameter, lastequip_idParameter, euserParameter, inOutTran_IDParameter, sfParameter, last_updParameter);
        }
    
        public virtual ObjectResult<Pkcheckallstamp_Result> Pkcheckallstamp()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Pkcheckallstamp_Result>("Pkcheckallstamp");
        }
    
        public virtual ObjectResult<Pkcheckstamppertenant_Result> Pkcheckstamppertenant(string terncode)
        {
            var terncodeParameter = terncode != null ?
                new ObjectParameter("terncode", terncode) :
                new ObjectParameter("terncode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Pkcheckstamppertenant_Result>("Pkcheckstamppertenant", terncodeParameter);
        }
    
        public virtual int Pkdeposit_insert(string receiptno, Nullable<System.DateTime> datepay, Nullable<decimal> deposit, string ternCode, string custno, string name, string scr_no, string cscmain_id, string rabbit_id, Nullable<int> cardType_ID, string scr_notemp, string cscmain_idtem, string rabbit_idtemp, string remark, Nullable<System.DateTime> last_Upd, Nullable<int> person_ID)
        {
            var receiptnoParameter = receiptno != null ?
                new ObjectParameter("receiptno", receiptno) :
                new ObjectParameter("receiptno", typeof(string));
    
            var datepayParameter = datepay.HasValue ?
                new ObjectParameter("datepay", datepay) :
                new ObjectParameter("datepay", typeof(System.DateTime));
    
            var depositParameter = deposit.HasValue ?
                new ObjectParameter("Deposit", deposit) :
                new ObjectParameter("Deposit", typeof(decimal));
    
            var ternCodeParameter = ternCode != null ?
                new ObjectParameter("TernCode", ternCode) :
                new ObjectParameter("TernCode", typeof(string));
    
            var custnoParameter = custno != null ?
                new ObjectParameter("custno", custno) :
                new ObjectParameter("custno", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var scr_noParameter = scr_no != null ?
                new ObjectParameter("scr_no", scr_no) :
                new ObjectParameter("scr_no", typeof(string));
    
            var cscmain_idParameter = cscmain_id != null ?
                new ObjectParameter("cscmain_id", cscmain_id) :
                new ObjectParameter("cscmain_id", typeof(string));
    
            var rabbit_idParameter = rabbit_id != null ?
                new ObjectParameter("rabbit_id", rabbit_id) :
                new ObjectParameter("rabbit_id", typeof(string));
    
            var cardType_IDParameter = cardType_ID.HasValue ?
                new ObjectParameter("CardType_ID", cardType_ID) :
                new ObjectParameter("CardType_ID", typeof(int));
    
            var scr_notempParameter = scr_notemp != null ?
                new ObjectParameter("scr_notemp", scr_notemp) :
                new ObjectParameter("scr_notemp", typeof(string));
    
            var cscmain_idtemParameter = cscmain_idtem != null ?
                new ObjectParameter("cscmain_idtem", cscmain_idtem) :
                new ObjectParameter("cscmain_idtem", typeof(string));
    
            var rabbit_idtempParameter = rabbit_idtemp != null ?
                new ObjectParameter("rabbit_idtemp", rabbit_idtemp) :
                new ObjectParameter("rabbit_idtemp", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pkdeposit_insert", receiptnoParameter, datepayParameter, depositParameter, ternCodeParameter, custnoParameter, nameParameter, scr_noParameter, cscmain_idParameter, rabbit_idParameter, cardType_IDParameter, scr_notempParameter, cscmain_idtemParameter, rabbit_idtempParameter, remarkParameter, last_UpdParameter, person_IDParameter);
        }
    
        public virtual int Pkfee_insert(string receiptno, string typepay, Nullable<System.DateTime> datepay, string scr_no, string cscmain_id, string rabbit_id, string custno, string ternCode, string ternSubCode, Nullable<decimal> fee, Nullable<decimal> netfee, Nullable<decimal> feeWithholding, Nullable<decimal> vat, Nullable<decimal> withholding, string name, Nullable<int> cardType_ID, string remark, Nullable<System.DateTime> last_Upd, Nullable<int> person_ID, string cardType, string cartype, Nullable<int> paytype)
        {
            var receiptnoParameter = receiptno != null ?
                new ObjectParameter("receiptno", receiptno) :
                new ObjectParameter("receiptno", typeof(string));
    
            var typepayParameter = typepay != null ?
                new ObjectParameter("Typepay", typepay) :
                new ObjectParameter("Typepay", typeof(string));
    
            var datepayParameter = datepay.HasValue ?
                new ObjectParameter("datepay", datepay) :
                new ObjectParameter("datepay", typeof(System.DateTime));
    
            var scr_noParameter = scr_no != null ?
                new ObjectParameter("scr_no", scr_no) :
                new ObjectParameter("scr_no", typeof(string));
    
            var cscmain_idParameter = cscmain_id != null ?
                new ObjectParameter("cscmain_id", cscmain_id) :
                new ObjectParameter("cscmain_id", typeof(string));
    
            var rabbit_idParameter = rabbit_id != null ?
                new ObjectParameter("rabbit_id", rabbit_id) :
                new ObjectParameter("rabbit_id", typeof(string));
    
            var custnoParameter = custno != null ?
                new ObjectParameter("custno", custno) :
                new ObjectParameter("custno", typeof(string));
    
            var ternCodeParameter = ternCode != null ?
                new ObjectParameter("TernCode", ternCode) :
                new ObjectParameter("TernCode", typeof(string));
    
            var ternSubCodeParameter = ternSubCode != null ?
                new ObjectParameter("TernSubCode", ternSubCode) :
                new ObjectParameter("TernSubCode", typeof(string));
    
            var feeParameter = fee.HasValue ?
                new ObjectParameter("fee", fee) :
                new ObjectParameter("fee", typeof(decimal));
    
            var netfeeParameter = netfee.HasValue ?
                new ObjectParameter("netfee", netfee) :
                new ObjectParameter("netfee", typeof(decimal));
    
            var feeWithholdingParameter = feeWithholding.HasValue ?
                new ObjectParameter("FeeWithholding", feeWithholding) :
                new ObjectParameter("FeeWithholding", typeof(decimal));
    
            var vatParameter = vat.HasValue ?
                new ObjectParameter("vat", vat) :
                new ObjectParameter("vat", typeof(decimal));
    
            var withholdingParameter = withholding.HasValue ?
                new ObjectParameter("Withholding", withholding) :
                new ObjectParameter("Withholding", typeof(decimal));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var cardType_IDParameter = cardType_ID.HasValue ?
                new ObjectParameter("CardType_ID", cardType_ID) :
                new ObjectParameter("CardType_ID", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var cardTypeParameter = cardType != null ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(string));
    
            var cartypeParameter = cartype != null ?
                new ObjectParameter("Cartype", cartype) :
                new ObjectParameter("Cartype", typeof(string));
    
            var paytypeParameter = paytype.HasValue ?
                new ObjectParameter("paytype", paytype) :
                new ObjectParameter("paytype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pkfee_insert", receiptnoParameter, typepayParameter, datepayParameter, scr_noParameter, cscmain_idParameter, rabbit_idParameter, custnoParameter, ternCodeParameter, ternSubCodeParameter, feeParameter, netfeeParameter, feeWithholdingParameter, vatParameter, withholdingParameter, nameParameter, cardType_IDParameter, remarkParameter, last_UpdParameter, person_IDParameter, cardTypeParameter, cartypeParameter, paytypeParameter);
        }
    
        public virtual ObjectResult<pkgatecashbytype_horizontal_Result> pkgatecashbytype_horizontal(string date1, string date2, Nullable<int> equipid, Nullable<int> cashpay, Nullable<int> paytype, Nullable<int> type1)
        {
            var date1Parameter = date1 != null ?
                new ObjectParameter("date1", date1) :
                new ObjectParameter("date1", typeof(string));
    
            var date2Parameter = date2 != null ?
                new ObjectParameter("date2", date2) :
                new ObjectParameter("date2", typeof(string));
    
            var equipidParameter = equipid.HasValue ?
                new ObjectParameter("equipid", equipid) :
                new ObjectParameter("equipid", typeof(int));
    
            var cashpayParameter = cashpay.HasValue ?
                new ObjectParameter("cashpay", cashpay) :
                new ObjectParameter("cashpay", typeof(int));
    
            var paytypeParameter = paytype.HasValue ?
                new ObjectParameter("paytype", paytype) :
                new ObjectParameter("paytype", typeof(int));
    
            var type1Parameter = type1.HasValue ?
                new ObjectParameter("type1", type1) :
                new ObjectParameter("type1", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<pkgatecashbytype_horizontal_Result>("pkgatecashbytype_horizontal", date1Parameter, date2Parameter, equipidParameter, cashpayParameter, paytypeParameter, type1Parameter);
        }
    
        public virtual int Pkinouttran_insert(string inouttran_id, string scr_no, string cscmain_id, string rabbit_id, Nullable<int> loc_id, Nullable<int> equip_id, Nullable<System.DateTime> indate, Nullable<System.DateTime> datein1, Nullable<System.TimeSpan> timein1, string custno, Nullable<int> typecard, Nullable<int> lastloc_id, string carid, string zuser, Nullable<int> sf, Nullable<System.DateTime> last_upd)
        {
            var inouttran_idParameter = inouttran_id != null ?
                new ObjectParameter("inouttran_id", inouttran_id) :
                new ObjectParameter("inouttran_id", typeof(string));
    
            var scr_noParameter = scr_no != null ?
                new ObjectParameter("scr_no", scr_no) :
                new ObjectParameter("scr_no", typeof(string));
    
            var cscmain_idParameter = cscmain_id != null ?
                new ObjectParameter("cscmain_id", cscmain_id) :
                new ObjectParameter("cscmain_id", typeof(string));
    
            var rabbit_idParameter = rabbit_id != null ?
                new ObjectParameter("rabbit_id", rabbit_id) :
                new ObjectParameter("rabbit_id", typeof(string));
    
            var loc_idParameter = loc_id.HasValue ?
                new ObjectParameter("loc_id", loc_id) :
                new ObjectParameter("loc_id", typeof(int));
    
            var equip_idParameter = equip_id.HasValue ?
                new ObjectParameter("equip_id", equip_id) :
                new ObjectParameter("equip_id", typeof(int));
    
            var indateParameter = indate.HasValue ?
                new ObjectParameter("indate", indate) :
                new ObjectParameter("indate", typeof(System.DateTime));
    
            var datein1Parameter = datein1.HasValue ?
                new ObjectParameter("datein1", datein1) :
                new ObjectParameter("datein1", typeof(System.DateTime));
    
            var timein1Parameter = timein1.HasValue ?
                new ObjectParameter("timein1", timein1) :
                new ObjectParameter("timein1", typeof(System.TimeSpan));
    
            var custnoParameter = custno != null ?
                new ObjectParameter("custno", custno) :
                new ObjectParameter("custno", typeof(string));
    
            var typecardParameter = typecard.HasValue ?
                new ObjectParameter("typecard", typecard) :
                new ObjectParameter("typecard", typeof(int));
    
            var lastloc_idParameter = lastloc_id.HasValue ?
                new ObjectParameter("lastloc_id", lastloc_id) :
                new ObjectParameter("lastloc_id", typeof(int));
    
            var caridParameter = carid != null ?
                new ObjectParameter("carid", carid) :
                new ObjectParameter("carid", typeof(string));
    
            var zuserParameter = zuser != null ?
                new ObjectParameter("Zuser", zuser) :
                new ObjectParameter("Zuser", typeof(string));
    
            var sfParameter = sf.HasValue ?
                new ObjectParameter("sf", sf) :
                new ObjectParameter("sf", typeof(int));
    
            var last_updParameter = last_upd.HasValue ?
                new ObjectParameter("last_upd", last_upd) :
                new ObjectParameter("last_upd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pkinouttran_insert", inouttran_idParameter, scr_noParameter, cscmain_idParameter, rabbit_idParameter, loc_idParameter, equip_idParameter, indateParameter, datein1Parameter, timein1Parameter, custnoParameter, typecardParameter, lastloc_idParameter, caridParameter, zuserParameter, sfParameter, last_updParameter);
        }
    
        public virtual int Pkinouttran_insert_4IN(string inouttran_id, string scr_no, string cscmain_id, string rabbit_id, Nullable<int> loc_id, Nullable<System.DateTime> indate, Nullable<System.DateTime> datein1, Nullable<System.TimeSpan> timein1, string custno, Nullable<int> typecard, Nullable<int> lastloc_id, string carid, string picIn1, string picIn2, string picIn3, string picIn4, Nullable<int> equip_ID, Nullable<int> trans_Event, Nullable<int> completeFlag, string zUser, Nullable<System.DateTime> last_Upd)
        {
            var inouttran_idParameter = inouttran_id != null ?
                new ObjectParameter("inouttran_id", inouttran_id) :
                new ObjectParameter("inouttran_id", typeof(string));
    
            var scr_noParameter = scr_no != null ?
                new ObjectParameter("scr_no", scr_no) :
                new ObjectParameter("scr_no", typeof(string));
    
            var cscmain_idParameter = cscmain_id != null ?
                new ObjectParameter("cscmain_id", cscmain_id) :
                new ObjectParameter("cscmain_id", typeof(string));
    
            var rabbit_idParameter = rabbit_id != null ?
                new ObjectParameter("rabbit_id", rabbit_id) :
                new ObjectParameter("rabbit_id", typeof(string));
    
            var loc_idParameter = loc_id.HasValue ?
                new ObjectParameter("loc_id", loc_id) :
                new ObjectParameter("loc_id", typeof(int));
    
            var indateParameter = indate.HasValue ?
                new ObjectParameter("indate", indate) :
                new ObjectParameter("indate", typeof(System.DateTime));
    
            var datein1Parameter = datein1.HasValue ?
                new ObjectParameter("datein1", datein1) :
                new ObjectParameter("datein1", typeof(System.DateTime));
    
            var timein1Parameter = timein1.HasValue ?
                new ObjectParameter("timein1", timein1) :
                new ObjectParameter("timein1", typeof(System.TimeSpan));
    
            var custnoParameter = custno != null ?
                new ObjectParameter("custno", custno) :
                new ObjectParameter("custno", typeof(string));
    
            var typecardParameter = typecard.HasValue ?
                new ObjectParameter("typecard", typecard) :
                new ObjectParameter("typecard", typeof(int));
    
            var lastloc_idParameter = lastloc_id.HasValue ?
                new ObjectParameter("lastloc_id", lastloc_id) :
                new ObjectParameter("lastloc_id", typeof(int));
    
            var caridParameter = carid != null ?
                new ObjectParameter("carid", carid) :
                new ObjectParameter("carid", typeof(string));
    
            var picIn1Parameter = picIn1 != null ?
                new ObjectParameter("PicIn1", picIn1) :
                new ObjectParameter("PicIn1", typeof(string));
    
            var picIn2Parameter = picIn2 != null ?
                new ObjectParameter("PicIn2", picIn2) :
                new ObjectParameter("PicIn2", typeof(string));
    
            var picIn3Parameter = picIn3 != null ?
                new ObjectParameter("PicIn3", picIn3) :
                new ObjectParameter("PicIn3", typeof(string));
    
            var picIn4Parameter = picIn4 != null ?
                new ObjectParameter("PicIn4", picIn4) :
                new ObjectParameter("PicIn4", typeof(string));
    
            var equip_IDParameter = equip_ID.HasValue ?
                new ObjectParameter("Equip_ID", equip_ID) :
                new ObjectParameter("Equip_ID", typeof(int));
    
            var trans_EventParameter = trans_Event.HasValue ?
                new ObjectParameter("Trans_Event", trans_Event) :
                new ObjectParameter("Trans_Event", typeof(int));
    
            var completeFlagParameter = completeFlag.HasValue ?
                new ObjectParameter("CompleteFlag", completeFlag) :
                new ObjectParameter("CompleteFlag", typeof(int));
    
            var zUserParameter = zUser != null ?
                new ObjectParameter("ZUser", zUser) :
                new ObjectParameter("ZUser", typeof(string));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pkinouttran_insert_4IN", inouttran_idParameter, scr_noParameter, cscmain_idParameter, rabbit_idParameter, loc_idParameter, indateParameter, datein1Parameter, timein1Parameter, custnoParameter, typecardParameter, lastloc_idParameter, caridParameter, picIn1Parameter, picIn2Parameter, picIn3Parameter, picIn4Parameter, equip_IDParameter, trans_EventParameter, completeFlagParameter, zUserParameter, last_UpdParameter);
        }
    
        public virtual int Pkinouttran_Insert_4IN2(string inOutTran_ID, string carid, string picIn1, string picIn2, string picIn3, string picIn4, Nullable<int> sF)
        {
            var inOutTran_IDParameter = inOutTran_ID != null ?
                new ObjectParameter("InOutTran_ID", inOutTran_ID) :
                new ObjectParameter("InOutTran_ID", typeof(string));
    
            var caridParameter = carid != null ?
                new ObjectParameter("carid", carid) :
                new ObjectParameter("carid", typeof(string));
    
            var picIn1Parameter = picIn1 != null ?
                new ObjectParameter("PicIn1", picIn1) :
                new ObjectParameter("PicIn1", typeof(string));
    
            var picIn2Parameter = picIn2 != null ?
                new ObjectParameter("PicIn2", picIn2) :
                new ObjectParameter("PicIn2", typeof(string));
    
            var picIn3Parameter = picIn3 != null ?
                new ObjectParameter("PicIn3", picIn3) :
                new ObjectParameter("PicIn3", typeof(string));
    
            var picIn4Parameter = picIn4 != null ?
                new ObjectParameter("PicIn4", picIn4) :
                new ObjectParameter("PicIn4", typeof(string));
    
            var sFParameter = sF.HasValue ?
                new ObjectParameter("SF", sF) :
                new ObjectParameter("SF", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pkinouttran_Insert_4IN2", inOutTran_IDParameter, caridParameter, picIn1Parameter, picIn2Parameter, picIn3Parameter, picIn4Parameter, sFParameter);
        }
    
        public virtual int Pkinouttran_Insert_4IN2V(string inOutTran_ID, string carid, string picIn1, string picIn2, string picIn3, string picIn4, string vNID, string vNIDFNameT, string vNIDLNameT, string vNIDFNameE, string vNIDLNameE, Nullable<System.DateTime> vNIDBD, Nullable<System.DateTime> vNIDExpireDate, Nullable<System.DateTime> vNIDIssueDate, string vNIDAddress, Nullable<int> sF)
        {
            var inOutTran_IDParameter = inOutTran_ID != null ?
                new ObjectParameter("InOutTran_ID", inOutTran_ID) :
                new ObjectParameter("InOutTran_ID", typeof(string));
    
            var caridParameter = carid != null ?
                new ObjectParameter("carid", carid) :
                new ObjectParameter("carid", typeof(string));
    
            var picIn1Parameter = picIn1 != null ?
                new ObjectParameter("PicIn1", picIn1) :
                new ObjectParameter("PicIn1", typeof(string));
    
            var picIn2Parameter = picIn2 != null ?
                new ObjectParameter("PicIn2", picIn2) :
                new ObjectParameter("PicIn2", typeof(string));
    
            var picIn3Parameter = picIn3 != null ?
                new ObjectParameter("PicIn3", picIn3) :
                new ObjectParameter("PicIn3", typeof(string));
    
            var picIn4Parameter = picIn4 != null ?
                new ObjectParameter("PicIn4", picIn4) :
                new ObjectParameter("PicIn4", typeof(string));
    
            var vNIDParameter = vNID != null ?
                new ObjectParameter("VNID", vNID) :
                new ObjectParameter("VNID", typeof(string));
    
            var vNIDFNameTParameter = vNIDFNameT != null ?
                new ObjectParameter("VNIDFNameT", vNIDFNameT) :
                new ObjectParameter("VNIDFNameT", typeof(string));
    
            var vNIDLNameTParameter = vNIDLNameT != null ?
                new ObjectParameter("VNIDLNameT", vNIDLNameT) :
                new ObjectParameter("VNIDLNameT", typeof(string));
    
            var vNIDFNameEParameter = vNIDFNameE != null ?
                new ObjectParameter("VNIDFNameE", vNIDFNameE) :
                new ObjectParameter("VNIDFNameE", typeof(string));
    
            var vNIDLNameEParameter = vNIDLNameE != null ?
                new ObjectParameter("VNIDLNameE", vNIDLNameE) :
                new ObjectParameter("VNIDLNameE", typeof(string));
    
            var vNIDBDParameter = vNIDBD.HasValue ?
                new ObjectParameter("VNIDBD", vNIDBD) :
                new ObjectParameter("VNIDBD", typeof(System.DateTime));
    
            var vNIDExpireDateParameter = vNIDExpireDate.HasValue ?
                new ObjectParameter("VNIDExpireDate", vNIDExpireDate) :
                new ObjectParameter("VNIDExpireDate", typeof(System.DateTime));
    
            var vNIDIssueDateParameter = vNIDIssueDate.HasValue ?
                new ObjectParameter("VNIDIssueDate", vNIDIssueDate) :
                new ObjectParameter("VNIDIssueDate", typeof(System.DateTime));
    
            var vNIDAddressParameter = vNIDAddress != null ?
                new ObjectParameter("VNIDAddress", vNIDAddress) :
                new ObjectParameter("VNIDAddress", typeof(string));
    
            var sFParameter = sF.HasValue ?
                new ObjectParameter("SF", sF) :
                new ObjectParameter("SF", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pkinouttran_Insert_4IN2V", inOutTran_IDParameter, caridParameter, picIn1Parameter, picIn2Parameter, picIn3Parameter, picIn4Parameter, vNIDParameter, vNIDFNameTParameter, vNIDLNameTParameter, vNIDFNameEParameter, vNIDLNameEParameter, vNIDBDParameter, vNIDExpireDateParameter, vNIDIssueDateParameter, vNIDAddressParameter, sFParameter);
        }
    
        public virtual int Pkinouttran_Insert_4OUT(Nullable<int> lastloc_id, Nullable<int> lastequip_id, string lost_Card, Nullable<int> usemin, Nullable<int> sumtotal, Nullable<int> hourtotal, Nullable<decimal> lost_Card_Fine, Nullable<decimal> lost_slip_Fine, Nullable<int> completeFlag, Nullable<System.DateTime> outdate, Nullable<System.DateTime> dateout1, Nullable<System.TimeSpan> timeout1, string inOutTran_ID, string picout1, string picout2, string picout3, string picout4, string euser, Nullable<System.DateTime> last_Upd)
        {
            var lastloc_idParameter = lastloc_id.HasValue ?
                new ObjectParameter("lastloc_id", lastloc_id) :
                new ObjectParameter("lastloc_id", typeof(int));
    
            var lastequip_idParameter = lastequip_id.HasValue ?
                new ObjectParameter("lastequip_id", lastequip_id) :
                new ObjectParameter("lastequip_id", typeof(int));
    
            var lost_CardParameter = lost_Card != null ?
                new ObjectParameter("Lost_Card", lost_Card) :
                new ObjectParameter("Lost_Card", typeof(string));
    
            var useminParameter = usemin.HasValue ?
                new ObjectParameter("usemin", usemin) :
                new ObjectParameter("usemin", typeof(int));
    
            var sumtotalParameter = sumtotal.HasValue ?
                new ObjectParameter("sumtotal", sumtotal) :
                new ObjectParameter("sumtotal", typeof(int));
    
            var hourtotalParameter = hourtotal.HasValue ?
                new ObjectParameter("hourtotal", hourtotal) :
                new ObjectParameter("hourtotal", typeof(int));
    
            var lost_Card_FineParameter = lost_Card_Fine.HasValue ?
                new ObjectParameter("Lost_Card_Fine", lost_Card_Fine) :
                new ObjectParameter("Lost_Card_Fine", typeof(decimal));
    
            var lost_slip_FineParameter = lost_slip_Fine.HasValue ?
                new ObjectParameter("Lost_slip_Fine", lost_slip_Fine) :
                new ObjectParameter("Lost_slip_Fine", typeof(decimal));
    
            var completeFlagParameter = completeFlag.HasValue ?
                new ObjectParameter("CompleteFlag", completeFlag) :
                new ObjectParameter("CompleteFlag", typeof(int));
    
            var outdateParameter = outdate.HasValue ?
                new ObjectParameter("outdate", outdate) :
                new ObjectParameter("outdate", typeof(System.DateTime));
    
            var dateout1Parameter = dateout1.HasValue ?
                new ObjectParameter("dateout1", dateout1) :
                new ObjectParameter("dateout1", typeof(System.DateTime));
    
            var timeout1Parameter = timeout1.HasValue ?
                new ObjectParameter("timeout1", timeout1) :
                new ObjectParameter("timeout1", typeof(System.TimeSpan));
    
            var inOutTran_IDParameter = inOutTran_ID != null ?
                new ObjectParameter("InOutTran_ID", inOutTran_ID) :
                new ObjectParameter("InOutTran_ID", typeof(string));
    
            var picout1Parameter = picout1 != null ?
                new ObjectParameter("Picout1", picout1) :
                new ObjectParameter("Picout1", typeof(string));
    
            var picout2Parameter = picout2 != null ?
                new ObjectParameter("Picout2", picout2) :
                new ObjectParameter("Picout2", typeof(string));
    
            var picout3Parameter = picout3 != null ?
                new ObjectParameter("picout3", picout3) :
                new ObjectParameter("picout3", typeof(string));
    
            var picout4Parameter = picout4 != null ?
                new ObjectParameter("picout4", picout4) :
                new ObjectParameter("picout4", typeof(string));
    
            var euserParameter = euser != null ?
                new ObjectParameter("Euser", euser) :
                new ObjectParameter("Euser", typeof(string));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pkinouttran_Insert_4OUT", lastloc_idParameter, lastequip_idParameter, lost_CardParameter, useminParameter, sumtotalParameter, hourtotalParameter, lost_Card_FineParameter, lost_slip_FineParameter, completeFlagParameter, outdateParameter, dateout1Parameter, timeout1Parameter, inOutTran_IDParameter, picout1Parameter, picout2Parameter, picout3Parameter, picout4Parameter, euserParameter, last_UpdParameter);
        }
    
        public virtual int Pkinouttran_insert_IN(string inouttran_id, string scr_no, string cscmain_id, string rabbit_id, Nullable<int> loc_id, Nullable<System.DateTime> indate, Nullable<System.DateTime> datein1, Nullable<System.TimeSpan> timein1, string custno, Nullable<int> typecard, Nullable<int> lastloc_id, string carid, string picIn1, string picIn2, Nullable<int> equip_ID, Nullable<int> trans_Event, Nullable<int> completeFlag, string zUser, Nullable<System.DateTime> last_Upd)
        {
            var inouttran_idParameter = inouttran_id != null ?
                new ObjectParameter("inouttran_id", inouttran_id) :
                new ObjectParameter("inouttran_id", typeof(string));
    
            var scr_noParameter = scr_no != null ?
                new ObjectParameter("scr_no", scr_no) :
                new ObjectParameter("scr_no", typeof(string));
    
            var cscmain_idParameter = cscmain_id != null ?
                new ObjectParameter("cscmain_id", cscmain_id) :
                new ObjectParameter("cscmain_id", typeof(string));
    
            var rabbit_idParameter = rabbit_id != null ?
                new ObjectParameter("rabbit_id", rabbit_id) :
                new ObjectParameter("rabbit_id", typeof(string));
    
            var loc_idParameter = loc_id.HasValue ?
                new ObjectParameter("loc_id", loc_id) :
                new ObjectParameter("loc_id", typeof(int));
    
            var indateParameter = indate.HasValue ?
                new ObjectParameter("indate", indate) :
                new ObjectParameter("indate", typeof(System.DateTime));
    
            var datein1Parameter = datein1.HasValue ?
                new ObjectParameter("datein1", datein1) :
                new ObjectParameter("datein1", typeof(System.DateTime));
    
            var timein1Parameter = timein1.HasValue ?
                new ObjectParameter("timein1", timein1) :
                new ObjectParameter("timein1", typeof(System.TimeSpan));
    
            var custnoParameter = custno != null ?
                new ObjectParameter("custno", custno) :
                new ObjectParameter("custno", typeof(string));
    
            var typecardParameter = typecard.HasValue ?
                new ObjectParameter("typecard", typecard) :
                new ObjectParameter("typecard", typeof(int));
    
            var lastloc_idParameter = lastloc_id.HasValue ?
                new ObjectParameter("lastloc_id", lastloc_id) :
                new ObjectParameter("lastloc_id", typeof(int));
    
            var caridParameter = carid != null ?
                new ObjectParameter("carid", carid) :
                new ObjectParameter("carid", typeof(string));
    
            var picIn1Parameter = picIn1 != null ?
                new ObjectParameter("PicIn1", picIn1) :
                new ObjectParameter("PicIn1", typeof(string));
    
            var picIn2Parameter = picIn2 != null ?
                new ObjectParameter("PicIn2", picIn2) :
                new ObjectParameter("PicIn2", typeof(string));
    
            var equip_IDParameter = equip_ID.HasValue ?
                new ObjectParameter("Equip_ID", equip_ID) :
                new ObjectParameter("Equip_ID", typeof(int));
    
            var trans_EventParameter = trans_Event.HasValue ?
                new ObjectParameter("Trans_Event", trans_Event) :
                new ObjectParameter("Trans_Event", typeof(int));
    
            var completeFlagParameter = completeFlag.HasValue ?
                new ObjectParameter("CompleteFlag", completeFlag) :
                new ObjectParameter("CompleteFlag", typeof(int));
    
            var zUserParameter = zUser != null ?
                new ObjectParameter("ZUser", zUser) :
                new ObjectParameter("ZUser", typeof(string));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pkinouttran_insert_IN", inouttran_idParameter, scr_noParameter, cscmain_idParameter, rabbit_idParameter, loc_idParameter, indateParameter, datein1Parameter, timein1Parameter, custnoParameter, typecardParameter, lastloc_idParameter, caridParameter, picIn1Parameter, picIn2Parameter, equip_IDParameter, trans_EventParameter, completeFlagParameter, zUserParameter, last_UpdParameter);
        }
    
        public virtual int Pkinouttran_insert_IN2(string cscmain_id)
        {
            var cscmain_idParameter = cscmain_id != null ?
                new ObjectParameter("cscmain_id", cscmain_id) :
                new ObjectParameter("cscmain_id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pkinouttran_insert_IN2", cscmain_idParameter);
        }
    
        public virtual int Pkinouttran_insert_IN3(string inouttran_id, string scr_no, string cscmain_id, string rabbit_id, Nullable<int> loc_id, Nullable<System.DateTime> indate, Nullable<System.DateTime> datein1, Nullable<System.TimeSpan> timein1, string custno, Nullable<int> typecard, Nullable<int> lastloc_id, string carid, string picIn1, string picIn2, Nullable<int> equip_ID, Nullable<int> trans_Event, Nullable<int> completeFlag, string zUser, Nullable<System.DateTime> last_Upd, string customerID)
        {
            var inouttran_idParameter = inouttran_id != null ?
                new ObjectParameter("inouttran_id", inouttran_id) :
                new ObjectParameter("inouttran_id", typeof(string));
    
            var scr_noParameter = scr_no != null ?
                new ObjectParameter("scr_no", scr_no) :
                new ObjectParameter("scr_no", typeof(string));
    
            var cscmain_idParameter = cscmain_id != null ?
                new ObjectParameter("cscmain_id", cscmain_id) :
                new ObjectParameter("cscmain_id", typeof(string));
    
            var rabbit_idParameter = rabbit_id != null ?
                new ObjectParameter("rabbit_id", rabbit_id) :
                new ObjectParameter("rabbit_id", typeof(string));
    
            var loc_idParameter = loc_id.HasValue ?
                new ObjectParameter("loc_id", loc_id) :
                new ObjectParameter("loc_id", typeof(int));
    
            var indateParameter = indate.HasValue ?
                new ObjectParameter("indate", indate) :
                new ObjectParameter("indate", typeof(System.DateTime));
    
            var datein1Parameter = datein1.HasValue ?
                new ObjectParameter("datein1", datein1) :
                new ObjectParameter("datein1", typeof(System.DateTime));
    
            var timein1Parameter = timein1.HasValue ?
                new ObjectParameter("timein1", timein1) :
                new ObjectParameter("timein1", typeof(System.TimeSpan));
    
            var custnoParameter = custno != null ?
                new ObjectParameter("custno", custno) :
                new ObjectParameter("custno", typeof(string));
    
            var typecardParameter = typecard.HasValue ?
                new ObjectParameter("typecard", typecard) :
                new ObjectParameter("typecard", typeof(int));
    
            var lastloc_idParameter = lastloc_id.HasValue ?
                new ObjectParameter("lastloc_id", lastloc_id) :
                new ObjectParameter("lastloc_id", typeof(int));
    
            var caridParameter = carid != null ?
                new ObjectParameter("carid", carid) :
                new ObjectParameter("carid", typeof(string));
    
            var picIn1Parameter = picIn1 != null ?
                new ObjectParameter("PicIn1", picIn1) :
                new ObjectParameter("PicIn1", typeof(string));
    
            var picIn2Parameter = picIn2 != null ?
                new ObjectParameter("PicIn2", picIn2) :
                new ObjectParameter("PicIn2", typeof(string));
    
            var equip_IDParameter = equip_ID.HasValue ?
                new ObjectParameter("Equip_ID", equip_ID) :
                new ObjectParameter("Equip_ID", typeof(int));
    
            var trans_EventParameter = trans_Event.HasValue ?
                new ObjectParameter("Trans_Event", trans_Event) :
                new ObjectParameter("Trans_Event", typeof(int));
    
            var completeFlagParameter = completeFlag.HasValue ?
                new ObjectParameter("CompleteFlag", completeFlag) :
                new ObjectParameter("CompleteFlag", typeof(int));
    
            var zUserParameter = zUser != null ?
                new ObjectParameter("ZUser", zUser) :
                new ObjectParameter("ZUser", typeof(string));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pkinouttran_insert_IN3", inouttran_idParameter, scr_noParameter, cscmain_idParameter, rabbit_idParameter, loc_idParameter, indateParameter, datein1Parameter, timein1Parameter, custnoParameter, typecardParameter, lastloc_idParameter, caridParameter, picIn1Parameter, picIn2Parameter, equip_IDParameter, trans_EventParameter, completeFlagParameter, zUserParameter, last_UpdParameter, customerIDParameter);
        }
    
        public virtual int Pkinouttran_insert_member(string inouttran_id, string scr_no, string cscmain_id, string rabbit_id, Nullable<int> loc_id, Nullable<int> equip_id, Nullable<System.DateTime> indate, Nullable<System.DateTime> datein1, Nullable<System.TimeSpan> timein1, string picin1, string picin2, string custno, Nullable<int> typecard, Nullable<int> lastloc_id, string carid, string zuser, Nullable<int> sf, Nullable<System.DateTime> last_upd)
        {
            var inouttran_idParameter = inouttran_id != null ?
                new ObjectParameter("inouttran_id", inouttran_id) :
                new ObjectParameter("inouttran_id", typeof(string));
    
            var scr_noParameter = scr_no != null ?
                new ObjectParameter("scr_no", scr_no) :
                new ObjectParameter("scr_no", typeof(string));
    
            var cscmain_idParameter = cscmain_id != null ?
                new ObjectParameter("cscmain_id", cscmain_id) :
                new ObjectParameter("cscmain_id", typeof(string));
    
            var rabbit_idParameter = rabbit_id != null ?
                new ObjectParameter("rabbit_id", rabbit_id) :
                new ObjectParameter("rabbit_id", typeof(string));
    
            var loc_idParameter = loc_id.HasValue ?
                new ObjectParameter("loc_id", loc_id) :
                new ObjectParameter("loc_id", typeof(int));
    
            var equip_idParameter = equip_id.HasValue ?
                new ObjectParameter("equip_id", equip_id) :
                new ObjectParameter("equip_id", typeof(int));
    
            var indateParameter = indate.HasValue ?
                new ObjectParameter("indate", indate) :
                new ObjectParameter("indate", typeof(System.DateTime));
    
            var datein1Parameter = datein1.HasValue ?
                new ObjectParameter("datein1", datein1) :
                new ObjectParameter("datein1", typeof(System.DateTime));
    
            var timein1Parameter = timein1.HasValue ?
                new ObjectParameter("timein1", timein1) :
                new ObjectParameter("timein1", typeof(System.TimeSpan));
    
            var picin1Parameter = picin1 != null ?
                new ObjectParameter("picin1", picin1) :
                new ObjectParameter("picin1", typeof(string));
    
            var picin2Parameter = picin2 != null ?
                new ObjectParameter("picin2", picin2) :
                new ObjectParameter("picin2", typeof(string));
    
            var custnoParameter = custno != null ?
                new ObjectParameter("custno", custno) :
                new ObjectParameter("custno", typeof(string));
    
            var typecardParameter = typecard.HasValue ?
                new ObjectParameter("typecard", typecard) :
                new ObjectParameter("typecard", typeof(int));
    
            var lastloc_idParameter = lastloc_id.HasValue ?
                new ObjectParameter("lastloc_id", lastloc_id) :
                new ObjectParameter("lastloc_id", typeof(int));
    
            var caridParameter = carid != null ?
                new ObjectParameter("carid", carid) :
                new ObjectParameter("carid", typeof(string));
    
            var zuserParameter = zuser != null ?
                new ObjectParameter("Zuser", zuser) :
                new ObjectParameter("Zuser", typeof(string));
    
            var sfParameter = sf.HasValue ?
                new ObjectParameter("sf", sf) :
                new ObjectParameter("sf", typeof(int));
    
            var last_updParameter = last_upd.HasValue ?
                new ObjectParameter("last_upd", last_upd) :
                new ObjectParameter("last_upd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pkinouttran_insert_member", inouttran_idParameter, scr_noParameter, cscmain_idParameter, rabbit_idParameter, loc_idParameter, equip_idParameter, indateParameter, datein1Parameter, timein1Parameter, picin1Parameter, picin2Parameter, custnoParameter, typecardParameter, lastloc_idParameter, caridParameter, zuserParameter, sfParameter, last_updParameter);
        }
    
        public virtual int Pkinouttran_Insert_OUT(Nullable<int> lastloc_id, Nullable<int> lastequip_id, string lost_Card, Nullable<int> usemin, Nullable<int> sumtotal, Nullable<int> hourtotal, Nullable<decimal> lost_Card_Fine, Nullable<decimal> lost_slip_Fine, Nullable<int> completeFlag, Nullable<System.DateTime> outdate, Nullable<System.DateTime> dateout1, Nullable<System.TimeSpan> timeout1, string inOutTran_ID, string picout1, string picout2, string picout3, string euser, Nullable<System.DateTime> last_Upd)
        {
            var lastloc_idParameter = lastloc_id.HasValue ?
                new ObjectParameter("lastloc_id", lastloc_id) :
                new ObjectParameter("lastloc_id", typeof(int));
    
            var lastequip_idParameter = lastequip_id.HasValue ?
                new ObjectParameter("lastequip_id", lastequip_id) :
                new ObjectParameter("lastequip_id", typeof(int));
    
            var lost_CardParameter = lost_Card != null ?
                new ObjectParameter("Lost_Card", lost_Card) :
                new ObjectParameter("Lost_Card", typeof(string));
    
            var useminParameter = usemin.HasValue ?
                new ObjectParameter("usemin", usemin) :
                new ObjectParameter("usemin", typeof(int));
    
            var sumtotalParameter = sumtotal.HasValue ?
                new ObjectParameter("sumtotal", sumtotal) :
                new ObjectParameter("sumtotal", typeof(int));
    
            var hourtotalParameter = hourtotal.HasValue ?
                new ObjectParameter("hourtotal", hourtotal) :
                new ObjectParameter("hourtotal", typeof(int));
    
            var lost_Card_FineParameter = lost_Card_Fine.HasValue ?
                new ObjectParameter("Lost_Card_Fine", lost_Card_Fine) :
                new ObjectParameter("Lost_Card_Fine", typeof(decimal));
    
            var lost_slip_FineParameter = lost_slip_Fine.HasValue ?
                new ObjectParameter("Lost_slip_Fine", lost_slip_Fine) :
                new ObjectParameter("Lost_slip_Fine", typeof(decimal));
    
            var completeFlagParameter = completeFlag.HasValue ?
                new ObjectParameter("CompleteFlag", completeFlag) :
                new ObjectParameter("CompleteFlag", typeof(int));
    
            var outdateParameter = outdate.HasValue ?
                new ObjectParameter("outdate", outdate) :
                new ObjectParameter("outdate", typeof(System.DateTime));
    
            var dateout1Parameter = dateout1.HasValue ?
                new ObjectParameter("dateout1", dateout1) :
                new ObjectParameter("dateout1", typeof(System.DateTime));
    
            var timeout1Parameter = timeout1.HasValue ?
                new ObjectParameter("timeout1", timeout1) :
                new ObjectParameter("timeout1", typeof(System.TimeSpan));
    
            var inOutTran_IDParameter = inOutTran_ID != null ?
                new ObjectParameter("InOutTran_ID", inOutTran_ID) :
                new ObjectParameter("InOutTran_ID", typeof(string));
    
            var picout1Parameter = picout1 != null ?
                new ObjectParameter("Picout1", picout1) :
                new ObjectParameter("Picout1", typeof(string));
    
            var picout2Parameter = picout2 != null ?
                new ObjectParameter("Picout2", picout2) :
                new ObjectParameter("Picout2", typeof(string));
    
            var picout3Parameter = picout3 != null ?
                new ObjectParameter("picout3", picout3) :
                new ObjectParameter("picout3", typeof(string));
    
            var euserParameter = euser != null ?
                new ObjectParameter("Euser", euser) :
                new ObjectParameter("Euser", typeof(string));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pkinouttran_Insert_OUT", lastloc_idParameter, lastequip_idParameter, lost_CardParameter, useminParameter, sumtotalParameter, hourtotalParameter, lost_Card_FineParameter, lost_slip_FineParameter, completeFlagParameter, outdateParameter, dateout1Parameter, timeout1Parameter, inOutTran_IDParameter, picout1Parameter, picout2Parameter, picout3Parameter, euserParameter, last_UpdParameter);
        }
    
        public virtual int Pkinouttran_Insert_OUT_3(Nullable<int> lastloc_id, Nullable<int> lastequip_id, string lost_Card, Nullable<int> usemin, Nullable<int> sumtotal, Nullable<int> hourtotal, Nullable<decimal> lost_Card_Fine, Nullable<decimal> lost_slip_Fine, Nullable<int> completeFlag, Nullable<System.DateTime> outdate, Nullable<System.DateTime> dateout1, Nullable<System.TimeSpan> timeout1, string inOutTran_ID, string picout1, string picout2, string picout3, string euser, Nullable<System.DateTime> last_Upd, string customerID, string custno)
        {
            var lastloc_idParameter = lastloc_id.HasValue ?
                new ObjectParameter("lastloc_id", lastloc_id) :
                new ObjectParameter("lastloc_id", typeof(int));
    
            var lastequip_idParameter = lastequip_id.HasValue ?
                new ObjectParameter("lastequip_id", lastequip_id) :
                new ObjectParameter("lastequip_id", typeof(int));
    
            var lost_CardParameter = lost_Card != null ?
                new ObjectParameter("Lost_Card", lost_Card) :
                new ObjectParameter("Lost_Card", typeof(string));
    
            var useminParameter = usemin.HasValue ?
                new ObjectParameter("usemin", usemin) :
                new ObjectParameter("usemin", typeof(int));
    
            var sumtotalParameter = sumtotal.HasValue ?
                new ObjectParameter("sumtotal", sumtotal) :
                new ObjectParameter("sumtotal", typeof(int));
    
            var hourtotalParameter = hourtotal.HasValue ?
                new ObjectParameter("hourtotal", hourtotal) :
                new ObjectParameter("hourtotal", typeof(int));
    
            var lost_Card_FineParameter = lost_Card_Fine.HasValue ?
                new ObjectParameter("Lost_Card_Fine", lost_Card_Fine) :
                new ObjectParameter("Lost_Card_Fine", typeof(decimal));
    
            var lost_slip_FineParameter = lost_slip_Fine.HasValue ?
                new ObjectParameter("Lost_slip_Fine", lost_slip_Fine) :
                new ObjectParameter("Lost_slip_Fine", typeof(decimal));
    
            var completeFlagParameter = completeFlag.HasValue ?
                new ObjectParameter("CompleteFlag", completeFlag) :
                new ObjectParameter("CompleteFlag", typeof(int));
    
            var outdateParameter = outdate.HasValue ?
                new ObjectParameter("outdate", outdate) :
                new ObjectParameter("outdate", typeof(System.DateTime));
    
            var dateout1Parameter = dateout1.HasValue ?
                new ObjectParameter("dateout1", dateout1) :
                new ObjectParameter("dateout1", typeof(System.DateTime));
    
            var timeout1Parameter = timeout1.HasValue ?
                new ObjectParameter("timeout1", timeout1) :
                new ObjectParameter("timeout1", typeof(System.TimeSpan));
    
            var inOutTran_IDParameter = inOutTran_ID != null ?
                new ObjectParameter("InOutTran_ID", inOutTran_ID) :
                new ObjectParameter("InOutTran_ID", typeof(string));
    
            var picout1Parameter = picout1 != null ?
                new ObjectParameter("Picout1", picout1) :
                new ObjectParameter("Picout1", typeof(string));
    
            var picout2Parameter = picout2 != null ?
                new ObjectParameter("Picout2", picout2) :
                new ObjectParameter("Picout2", typeof(string));
    
            var picout3Parameter = picout3 != null ?
                new ObjectParameter("picout3", picout3) :
                new ObjectParameter("picout3", typeof(string));
    
            var euserParameter = euser != null ?
                new ObjectParameter("Euser", euser) :
                new ObjectParameter("Euser", typeof(string));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            var custnoParameter = custno != null ?
                new ObjectParameter("custno", custno) :
                new ObjectParameter("custno", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pkinouttran_Insert_OUT_3", lastloc_idParameter, lastequip_idParameter, lost_CardParameter, useminParameter, sumtotalParameter, hourtotalParameter, lost_Card_FineParameter, lost_slip_FineParameter, completeFlagParameter, outdateParameter, dateout1Parameter, timeout1Parameter, inOutTran_IDParameter, picout1Parameter, picout2Parameter, picout3Parameter, euserParameter, last_UpdParameter, customerIDParameter, custnoParameter);
        }
    
        public virtual int Pkinouttran_Insert_OUT_4(Nullable<int> lastloc_id, Nullable<int> lastequip_id, string lost_Card, Nullable<int> usemin, Nullable<int> sumtotal, Nullable<int> hourtotal, Nullable<decimal> lost_Card_Fine, Nullable<decimal> lost_slip_Fine, Nullable<int> completeFlag, Nullable<System.DateTime> outdate, Nullable<System.DateTime> dateout1, Nullable<System.TimeSpan> timeout1, string inOutTran_ID, string picout1, string picout2, string picout3, string euser, Nullable<System.DateTime> last_Upd, string customerID, string custno, Nullable<decimal> overnightpark_Fine, Nullable<int> paytype, Nullable<int> paid)
        {
            var lastloc_idParameter = lastloc_id.HasValue ?
                new ObjectParameter("lastloc_id", lastloc_id) :
                new ObjectParameter("lastloc_id", typeof(int));
    
            var lastequip_idParameter = lastequip_id.HasValue ?
                new ObjectParameter("lastequip_id", lastequip_id) :
                new ObjectParameter("lastequip_id", typeof(int));
    
            var lost_CardParameter = lost_Card != null ?
                new ObjectParameter("Lost_Card", lost_Card) :
                new ObjectParameter("Lost_Card", typeof(string));
    
            var useminParameter = usemin.HasValue ?
                new ObjectParameter("usemin", usemin) :
                new ObjectParameter("usemin", typeof(int));
    
            var sumtotalParameter = sumtotal.HasValue ?
                new ObjectParameter("sumtotal", sumtotal) :
                new ObjectParameter("sumtotal", typeof(int));
    
            var hourtotalParameter = hourtotal.HasValue ?
                new ObjectParameter("hourtotal", hourtotal) :
                new ObjectParameter("hourtotal", typeof(int));
    
            var lost_Card_FineParameter = lost_Card_Fine.HasValue ?
                new ObjectParameter("Lost_Card_Fine", lost_Card_Fine) :
                new ObjectParameter("Lost_Card_Fine", typeof(decimal));
    
            var lost_slip_FineParameter = lost_slip_Fine.HasValue ?
                new ObjectParameter("Lost_slip_Fine", lost_slip_Fine) :
                new ObjectParameter("Lost_slip_Fine", typeof(decimal));
    
            var completeFlagParameter = completeFlag.HasValue ?
                new ObjectParameter("CompleteFlag", completeFlag) :
                new ObjectParameter("CompleteFlag", typeof(int));
    
            var outdateParameter = outdate.HasValue ?
                new ObjectParameter("outdate", outdate) :
                new ObjectParameter("outdate", typeof(System.DateTime));
    
            var dateout1Parameter = dateout1.HasValue ?
                new ObjectParameter("dateout1", dateout1) :
                new ObjectParameter("dateout1", typeof(System.DateTime));
    
            var timeout1Parameter = timeout1.HasValue ?
                new ObjectParameter("timeout1", timeout1) :
                new ObjectParameter("timeout1", typeof(System.TimeSpan));
    
            var inOutTran_IDParameter = inOutTran_ID != null ?
                new ObjectParameter("InOutTran_ID", inOutTran_ID) :
                new ObjectParameter("InOutTran_ID", typeof(string));
    
            var picout1Parameter = picout1 != null ?
                new ObjectParameter("Picout1", picout1) :
                new ObjectParameter("Picout1", typeof(string));
    
            var picout2Parameter = picout2 != null ?
                new ObjectParameter("Picout2", picout2) :
                new ObjectParameter("Picout2", typeof(string));
    
            var picout3Parameter = picout3 != null ?
                new ObjectParameter("picout3", picout3) :
                new ObjectParameter("picout3", typeof(string));
    
            var euserParameter = euser != null ?
                new ObjectParameter("Euser", euser) :
                new ObjectParameter("Euser", typeof(string));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            var custnoParameter = custno != null ?
                new ObjectParameter("custno", custno) :
                new ObjectParameter("custno", typeof(string));
    
            var overnightpark_FineParameter = overnightpark_Fine.HasValue ?
                new ObjectParameter("Overnightpark_Fine", overnightpark_Fine) :
                new ObjectParameter("Overnightpark_Fine", typeof(decimal));
    
            var paytypeParameter = paytype.HasValue ?
                new ObjectParameter("Paytype", paytype) :
                new ObjectParameter("Paytype", typeof(int));
    
            var paidParameter = paid.HasValue ?
                new ObjectParameter("Paid", paid) :
                new ObjectParameter("Paid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pkinouttran_Insert_OUT_4", lastloc_idParameter, lastequip_idParameter, lost_CardParameter, useminParameter, sumtotalParameter, hourtotalParameter, lost_Card_FineParameter, lost_slip_FineParameter, completeFlagParameter, outdateParameter, dateout1Parameter, timeout1Parameter, inOutTran_IDParameter, picout1Parameter, picout2Parameter, picout3Parameter, euserParameter, last_UpdParameter, customerIDParameter, custnoParameter, overnightpark_FineParameter, paytypeParameter, paidParameter);
        }
    
        public virtual int Pkinouttran_Insert_OUT_5(Nullable<int> lastloc_id, Nullable<int> lastequip_id, string lost_Card, Nullable<int> usemin, Nullable<int> sumtotal, Nullable<int> hourtotal, Nullable<decimal> lost_Card_Fine, Nullable<decimal> lost_slip_Fine, Nullable<int> completeFlag, Nullable<System.DateTime> outdate, Nullable<System.DateTime> dateout1, Nullable<System.TimeSpan> timeout1, string inOutTran_ID, string picout1, string picout2, string picout3, string euser, Nullable<System.DateTime> last_Upd, string customerID, string custno, Nullable<decimal> overnightpark_Fine, Nullable<int> paytype, Nullable<int> paid, Nullable<int> exceptfee, Nullable<decimal> exceptfeeamount)
        {
            var lastloc_idParameter = lastloc_id.HasValue ?
                new ObjectParameter("lastloc_id", lastloc_id) :
                new ObjectParameter("lastloc_id", typeof(int));
    
            var lastequip_idParameter = lastequip_id.HasValue ?
                new ObjectParameter("lastequip_id", lastequip_id) :
                new ObjectParameter("lastequip_id", typeof(int));
    
            var lost_CardParameter = lost_Card != null ?
                new ObjectParameter("Lost_Card", lost_Card) :
                new ObjectParameter("Lost_Card", typeof(string));
    
            var useminParameter = usemin.HasValue ?
                new ObjectParameter("usemin", usemin) :
                new ObjectParameter("usemin", typeof(int));
    
            var sumtotalParameter = sumtotal.HasValue ?
                new ObjectParameter("sumtotal", sumtotal) :
                new ObjectParameter("sumtotal", typeof(int));
    
            var hourtotalParameter = hourtotal.HasValue ?
                new ObjectParameter("hourtotal", hourtotal) :
                new ObjectParameter("hourtotal", typeof(int));
    
            var lost_Card_FineParameter = lost_Card_Fine.HasValue ?
                new ObjectParameter("Lost_Card_Fine", lost_Card_Fine) :
                new ObjectParameter("Lost_Card_Fine", typeof(decimal));
    
            var lost_slip_FineParameter = lost_slip_Fine.HasValue ?
                new ObjectParameter("Lost_slip_Fine", lost_slip_Fine) :
                new ObjectParameter("Lost_slip_Fine", typeof(decimal));
    
            var completeFlagParameter = completeFlag.HasValue ?
                new ObjectParameter("CompleteFlag", completeFlag) :
                new ObjectParameter("CompleteFlag", typeof(int));
    
            var outdateParameter = outdate.HasValue ?
                new ObjectParameter("outdate", outdate) :
                new ObjectParameter("outdate", typeof(System.DateTime));
    
            var dateout1Parameter = dateout1.HasValue ?
                new ObjectParameter("dateout1", dateout1) :
                new ObjectParameter("dateout1", typeof(System.DateTime));
    
            var timeout1Parameter = timeout1.HasValue ?
                new ObjectParameter("timeout1", timeout1) :
                new ObjectParameter("timeout1", typeof(System.TimeSpan));
    
            var inOutTran_IDParameter = inOutTran_ID != null ?
                new ObjectParameter("InOutTran_ID", inOutTran_ID) :
                new ObjectParameter("InOutTran_ID", typeof(string));
    
            var picout1Parameter = picout1 != null ?
                new ObjectParameter("Picout1", picout1) :
                new ObjectParameter("Picout1", typeof(string));
    
            var picout2Parameter = picout2 != null ?
                new ObjectParameter("Picout2", picout2) :
                new ObjectParameter("Picout2", typeof(string));
    
            var picout3Parameter = picout3 != null ?
                new ObjectParameter("picout3", picout3) :
                new ObjectParameter("picout3", typeof(string));
    
            var euserParameter = euser != null ?
                new ObjectParameter("Euser", euser) :
                new ObjectParameter("Euser", typeof(string));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            var custnoParameter = custno != null ?
                new ObjectParameter("custno", custno) :
                new ObjectParameter("custno", typeof(string));
    
            var overnightpark_FineParameter = overnightpark_Fine.HasValue ?
                new ObjectParameter("Overnightpark_Fine", overnightpark_Fine) :
                new ObjectParameter("Overnightpark_Fine", typeof(decimal));
    
            var paytypeParameter = paytype.HasValue ?
                new ObjectParameter("Paytype", paytype) :
                new ObjectParameter("Paytype", typeof(int));
    
            var paidParameter = paid.HasValue ?
                new ObjectParameter("Paid", paid) :
                new ObjectParameter("Paid", typeof(int));
    
            var exceptfeeParameter = exceptfee.HasValue ?
                new ObjectParameter("exceptfee", exceptfee) :
                new ObjectParameter("exceptfee", typeof(int));
    
            var exceptfeeamountParameter = exceptfeeamount.HasValue ?
                new ObjectParameter("exceptfeeamount", exceptfeeamount) :
                new ObjectParameter("exceptfeeamount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pkinouttran_Insert_OUT_5", lastloc_idParameter, lastequip_idParameter, lost_CardParameter, useminParameter, sumtotalParameter, hourtotalParameter, lost_Card_FineParameter, lost_slip_FineParameter, completeFlagParameter, outdateParameter, dateout1Parameter, timeout1Parameter, inOutTran_IDParameter, picout1Parameter, picout2Parameter, picout3Parameter, euserParameter, last_UpdParameter, customerIDParameter, custnoParameter, overnightpark_FineParameter, paytypeParameter, paidParameter, exceptfeeParameter, exceptfeeamountParameter);
        }
    
        public virtual int Pkinouttran_Insert_OUT2(string cscmain_id)
        {
            var cscmain_idParameter = cscmain_id != null ?
                new ObjectParameter("cscmain_id", cscmain_id) :
                new ObjectParameter("cscmain_id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pkinouttran_Insert_OUT2", cscmain_idParameter);
        }
    
        public virtual int Pkinouttran_Insert_OUT3(string inOutTran_ID, Nullable<int> sF)
        {
            var inOutTran_IDParameter = inOutTran_ID != null ?
                new ObjectParameter("InOutTran_ID", inOutTran_ID) :
                new ObjectParameter("InOutTran_ID", typeof(string));
    
            var sFParameter = sF.HasValue ?
                new ObjectParameter("SF", sF) :
                new ObjectParameter("SF", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pkinouttran_Insert_OUT3", inOutTran_IDParameter, sFParameter);
        }
    
        public virtual int Pkinouttran_insertall(string inouttran_id, string scr_no, string cscmain_id, string rabbit_id, Nullable<int> loc_id, Nullable<System.DateTime> indate, Nullable<System.DateTime> datein1, Nullable<System.TimeSpan> timein1, string custno, Nullable<int> typecard, Nullable<int> lastloc_id, string carid, string picIn1, string picIn2, Nullable<int> equip_ID, Nullable<int> trans_Event, Nullable<int> completeFlag, Nullable<int> person_ID, Nullable<int> usemin, Nullable<int> sumtotal, Nullable<int> hourtotal, Nullable<decimal> lost_Card_Fine, Nullable<decimal> lost_slip_Fine, string lost_card, string lost_Slip, Nullable<System.DateTime> outdate, Nullable<System.DateTime> dateout1, Nullable<System.TimeSpan> timeout1, string picout1, string picout2, string picout3, string zuser, string euser, Nullable<int> sf, Nullable<System.DateTime> last_upd)
        {
            var inouttran_idParameter = inouttran_id != null ?
                new ObjectParameter("inouttran_id", inouttran_id) :
                new ObjectParameter("inouttran_id", typeof(string));
    
            var scr_noParameter = scr_no != null ?
                new ObjectParameter("scr_no", scr_no) :
                new ObjectParameter("scr_no", typeof(string));
    
            var cscmain_idParameter = cscmain_id != null ?
                new ObjectParameter("cscmain_id", cscmain_id) :
                new ObjectParameter("cscmain_id", typeof(string));
    
            var rabbit_idParameter = rabbit_id != null ?
                new ObjectParameter("rabbit_id", rabbit_id) :
                new ObjectParameter("rabbit_id", typeof(string));
    
            var loc_idParameter = loc_id.HasValue ?
                new ObjectParameter("loc_id", loc_id) :
                new ObjectParameter("loc_id", typeof(int));
    
            var indateParameter = indate.HasValue ?
                new ObjectParameter("indate", indate) :
                new ObjectParameter("indate", typeof(System.DateTime));
    
            var datein1Parameter = datein1.HasValue ?
                new ObjectParameter("datein1", datein1) :
                new ObjectParameter("datein1", typeof(System.DateTime));
    
            var timein1Parameter = timein1.HasValue ?
                new ObjectParameter("timein1", timein1) :
                new ObjectParameter("timein1", typeof(System.TimeSpan));
    
            var custnoParameter = custno != null ?
                new ObjectParameter("custno", custno) :
                new ObjectParameter("custno", typeof(string));
    
            var typecardParameter = typecard.HasValue ?
                new ObjectParameter("typecard", typecard) :
                new ObjectParameter("typecard", typeof(int));
    
            var lastloc_idParameter = lastloc_id.HasValue ?
                new ObjectParameter("lastloc_id", lastloc_id) :
                new ObjectParameter("lastloc_id", typeof(int));
    
            var caridParameter = carid != null ?
                new ObjectParameter("carid", carid) :
                new ObjectParameter("carid", typeof(string));
    
            var picIn1Parameter = picIn1 != null ?
                new ObjectParameter("PicIn1", picIn1) :
                new ObjectParameter("PicIn1", typeof(string));
    
            var picIn2Parameter = picIn2 != null ?
                new ObjectParameter("PicIn2", picIn2) :
                new ObjectParameter("PicIn2", typeof(string));
    
            var equip_IDParameter = equip_ID.HasValue ?
                new ObjectParameter("Equip_ID", equip_ID) :
                new ObjectParameter("Equip_ID", typeof(int));
    
            var trans_EventParameter = trans_Event.HasValue ?
                new ObjectParameter("Trans_Event", trans_Event) :
                new ObjectParameter("Trans_Event", typeof(int));
    
            var completeFlagParameter = completeFlag.HasValue ?
                new ObjectParameter("CompleteFlag", completeFlag) :
                new ObjectParameter("CompleteFlag", typeof(int));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var useminParameter = usemin.HasValue ?
                new ObjectParameter("usemin", usemin) :
                new ObjectParameter("usemin", typeof(int));
    
            var sumtotalParameter = sumtotal.HasValue ?
                new ObjectParameter("sumtotal", sumtotal) :
                new ObjectParameter("sumtotal", typeof(int));
    
            var hourtotalParameter = hourtotal.HasValue ?
                new ObjectParameter("hourtotal", hourtotal) :
                new ObjectParameter("hourtotal", typeof(int));
    
            var lost_Card_FineParameter = lost_Card_Fine.HasValue ?
                new ObjectParameter("Lost_Card_Fine", lost_Card_Fine) :
                new ObjectParameter("Lost_Card_Fine", typeof(decimal));
    
            var lost_slip_FineParameter = lost_slip_Fine.HasValue ?
                new ObjectParameter("Lost_slip_Fine", lost_slip_Fine) :
                new ObjectParameter("Lost_slip_Fine", typeof(decimal));
    
            var lost_cardParameter = lost_card != null ?
                new ObjectParameter("Lost_card", lost_card) :
                new ObjectParameter("Lost_card", typeof(string));
    
            var lost_SlipParameter = lost_Slip != null ?
                new ObjectParameter("lost_Slip", lost_Slip) :
                new ObjectParameter("lost_Slip", typeof(string));
    
            var outdateParameter = outdate.HasValue ?
                new ObjectParameter("outdate", outdate) :
                new ObjectParameter("outdate", typeof(System.DateTime));
    
            var dateout1Parameter = dateout1.HasValue ?
                new ObjectParameter("dateout1", dateout1) :
                new ObjectParameter("dateout1", typeof(System.DateTime));
    
            var timeout1Parameter = timeout1.HasValue ?
                new ObjectParameter("timeout1", timeout1) :
                new ObjectParameter("timeout1", typeof(System.TimeSpan));
    
            var picout1Parameter = picout1 != null ?
                new ObjectParameter("Picout1", picout1) :
                new ObjectParameter("Picout1", typeof(string));
    
            var picout2Parameter = picout2 != null ?
                new ObjectParameter("Picout2", picout2) :
                new ObjectParameter("Picout2", typeof(string));
    
            var picout3Parameter = picout3 != null ?
                new ObjectParameter("picout3", picout3) :
                new ObjectParameter("picout3", typeof(string));
    
            var zuserParameter = zuser != null ?
                new ObjectParameter("zuser", zuser) :
                new ObjectParameter("zuser", typeof(string));
    
            var euserParameter = euser != null ?
                new ObjectParameter("euser", euser) :
                new ObjectParameter("euser", typeof(string));
    
            var sfParameter = sf.HasValue ?
                new ObjectParameter("sf", sf) :
                new ObjectParameter("sf", typeof(int));
    
            var last_updParameter = last_upd.HasValue ?
                new ObjectParameter("last_upd", last_upd) :
                new ObjectParameter("last_upd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pkinouttran_insertall", inouttran_idParameter, scr_noParameter, cscmain_idParameter, rabbit_idParameter, loc_idParameter, indateParameter, datein1Parameter, timein1Parameter, custnoParameter, typecardParameter, lastloc_idParameter, caridParameter, picIn1Parameter, picIn2Parameter, equip_IDParameter, trans_EventParameter, completeFlagParameter, person_IDParameter, useminParameter, sumtotalParameter, hourtotalParameter, lost_Card_FineParameter, lost_slip_FineParameter, lost_cardParameter, lost_SlipParameter, outdateParameter, dateout1Parameter, timeout1Parameter, picout1Parameter, picout2Parameter, picout3Parameter, zuserParameter, euserParameter, sfParameter, last_updParameter);
        }
    
        public virtual int PkInoutTran_inv_update(string inOutTran_ID, string iNV_ID, Nullable<int> iNVF)
        {
            var inOutTran_IDParameter = inOutTran_ID != null ?
                new ObjectParameter("InOutTran_ID", inOutTran_ID) :
                new ObjectParameter("InOutTran_ID", typeof(string));
    
            var iNV_IDParameter = iNV_ID != null ?
                new ObjectParameter("INV_ID", iNV_ID) :
                new ObjectParameter("INV_ID", typeof(string));
    
            var iNVFParameter = iNVF.HasValue ?
                new ObjectParameter("INVF", iNVF) :
                new ObjectParameter("INVF", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PkInoutTran_inv_update", inOutTran_IDParameter, iNV_IDParameter, iNVFParameter);
        }
    
        public virtual int Pkinouttran_update(Nullable<int> lastloc_id, Nullable<int> lastequip_id, Nullable<int> usemin, Nullable<int> sumtotal, Nullable<int> hourtotal, string lost_Card, Nullable<decimal> lost_Card_Fine, Nullable<decimal> lost_slip_Fine, Nullable<decimal> overnightpark_Fine, Nullable<int> completeFlag, Nullable<System.DateTime> outdate, Nullable<System.DateTime> dateout1, Nullable<System.TimeSpan> timeout1, string inOutTran_ID, string euser, Nullable<int> paytype, Nullable<int> paid, Nullable<System.DateTime> last_upd, Nullable<int> sf, string note1)
        {
            var lastloc_idParameter = lastloc_id.HasValue ?
                new ObjectParameter("lastloc_id", lastloc_id) :
                new ObjectParameter("lastloc_id", typeof(int));
    
            var lastequip_idParameter = lastequip_id.HasValue ?
                new ObjectParameter("lastequip_id", lastequip_id) :
                new ObjectParameter("lastequip_id", typeof(int));
    
            var useminParameter = usemin.HasValue ?
                new ObjectParameter("usemin", usemin) :
                new ObjectParameter("usemin", typeof(int));
    
            var sumtotalParameter = sumtotal.HasValue ?
                new ObjectParameter("sumtotal", sumtotal) :
                new ObjectParameter("sumtotal", typeof(int));
    
            var hourtotalParameter = hourtotal.HasValue ?
                new ObjectParameter("hourtotal", hourtotal) :
                new ObjectParameter("hourtotal", typeof(int));
    
            var lost_CardParameter = lost_Card != null ?
                new ObjectParameter("Lost_Card", lost_Card) :
                new ObjectParameter("Lost_Card", typeof(string));
    
            var lost_Card_FineParameter = lost_Card_Fine.HasValue ?
                new ObjectParameter("Lost_Card_Fine", lost_Card_Fine) :
                new ObjectParameter("Lost_Card_Fine", typeof(decimal));
    
            var lost_slip_FineParameter = lost_slip_Fine.HasValue ?
                new ObjectParameter("Lost_slip_Fine", lost_slip_Fine) :
                new ObjectParameter("Lost_slip_Fine", typeof(decimal));
    
            var overnightpark_FineParameter = overnightpark_Fine.HasValue ?
                new ObjectParameter("overnightpark_Fine", overnightpark_Fine) :
                new ObjectParameter("overnightpark_Fine", typeof(decimal));
    
            var completeFlagParameter = completeFlag.HasValue ?
                new ObjectParameter("CompleteFlag", completeFlag) :
                new ObjectParameter("CompleteFlag", typeof(int));
    
            var outdateParameter = outdate.HasValue ?
                new ObjectParameter("outdate", outdate) :
                new ObjectParameter("outdate", typeof(System.DateTime));
    
            var dateout1Parameter = dateout1.HasValue ?
                new ObjectParameter("dateout1", dateout1) :
                new ObjectParameter("dateout1", typeof(System.DateTime));
    
            var timeout1Parameter = timeout1.HasValue ?
                new ObjectParameter("timeout1", timeout1) :
                new ObjectParameter("timeout1", typeof(System.TimeSpan));
    
            var inOutTran_IDParameter = inOutTran_ID != null ?
                new ObjectParameter("InOutTran_ID", inOutTran_ID) :
                new ObjectParameter("InOutTran_ID", typeof(string));
    
            var euserParameter = euser != null ?
                new ObjectParameter("Euser", euser) :
                new ObjectParameter("Euser", typeof(string));
    
            var paytypeParameter = paytype.HasValue ?
                new ObjectParameter("Paytype", paytype) :
                new ObjectParameter("Paytype", typeof(int));
    
            var paidParameter = paid.HasValue ?
                new ObjectParameter("Paid", paid) :
                new ObjectParameter("Paid", typeof(int));
    
            var last_updParameter = last_upd.HasValue ?
                new ObjectParameter("last_upd", last_upd) :
                new ObjectParameter("last_upd", typeof(System.DateTime));
    
            var sfParameter = sf.HasValue ?
                new ObjectParameter("sf", sf) :
                new ObjectParameter("sf", typeof(int));
    
            var note1Parameter = note1 != null ?
                new ObjectParameter("note1", note1) :
                new ObjectParameter("note1", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pkinouttran_update", lastloc_idParameter, lastequip_idParameter, useminParameter, sumtotalParameter, hourtotalParameter, lost_CardParameter, lost_Card_FineParameter, lost_slip_FineParameter, overnightpark_FineParameter, completeFlagParameter, outdateParameter, dateout1Parameter, timeout1Parameter, inOutTran_IDParameter, euserParameter, paytypeParameter, paidParameter, last_updParameter, sfParameter, note1Parameter);
        }
    
        public virtual int Pkinouttran_update_Car_Vistor(string inouttran_id, string picin1, string picin2, Nullable<System.DateTime> indate, Nullable<System.DateTime> datein1, Nullable<System.TimeSpan> timein1)
        {
            var inouttran_idParameter = inouttran_id != null ?
                new ObjectParameter("inouttran_id", inouttran_id) :
                new ObjectParameter("inouttran_id", typeof(string));
    
            var picin1Parameter = picin1 != null ?
                new ObjectParameter("picin1", picin1) :
                new ObjectParameter("picin1", typeof(string));
    
            var picin2Parameter = picin2 != null ?
                new ObjectParameter("picin2", picin2) :
                new ObjectParameter("picin2", typeof(string));
    
            var indateParameter = indate.HasValue ?
                new ObjectParameter("indate", indate) :
                new ObjectParameter("indate", typeof(System.DateTime));
    
            var datein1Parameter = datein1.HasValue ?
                new ObjectParameter("datein1", datein1) :
                new ObjectParameter("datein1", typeof(System.DateTime));
    
            var timein1Parameter = timein1.HasValue ?
                new ObjectParameter("timein1", timein1) :
                new ObjectParameter("timein1", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pkinouttran_update_Car_Vistor", inouttran_idParameter, picin1Parameter, picin2Parameter, indateParameter, datein1Parameter, timein1Parameter);
        }
    
        public virtual int Pkinouttran_update_Member(Nullable<int> lastloc_id, Nullable<int> lastequip_id, Nullable<int> usemin, Nullable<int> sumtotal, Nullable<int> hourtotal, string lost_Card, Nullable<decimal> lost_Card_Fine, Nullable<decimal> lost_slip_Fine, Nullable<int> completeFlag, Nullable<System.DateTime> outdate, Nullable<System.DateTime> dateout1, Nullable<System.TimeSpan> timeout1, string picout1, string picout2, string inOutTran_ID, string euser, Nullable<System.DateTime> last_upd, Nullable<int> sf, Nullable<int> overnightpark_Fine, Nullable<int> paytype)
        {
            var lastloc_idParameter = lastloc_id.HasValue ?
                new ObjectParameter("lastloc_id", lastloc_id) :
                new ObjectParameter("lastloc_id", typeof(int));
    
            var lastequip_idParameter = lastequip_id.HasValue ?
                new ObjectParameter("lastequip_id", lastequip_id) :
                new ObjectParameter("lastequip_id", typeof(int));
    
            var useminParameter = usemin.HasValue ?
                new ObjectParameter("usemin", usemin) :
                new ObjectParameter("usemin", typeof(int));
    
            var sumtotalParameter = sumtotal.HasValue ?
                new ObjectParameter("sumtotal", sumtotal) :
                new ObjectParameter("sumtotal", typeof(int));
    
            var hourtotalParameter = hourtotal.HasValue ?
                new ObjectParameter("hourtotal", hourtotal) :
                new ObjectParameter("hourtotal", typeof(int));
    
            var lost_CardParameter = lost_Card != null ?
                new ObjectParameter("Lost_Card", lost_Card) :
                new ObjectParameter("Lost_Card", typeof(string));
    
            var lost_Card_FineParameter = lost_Card_Fine.HasValue ?
                new ObjectParameter("Lost_Card_Fine", lost_Card_Fine) :
                new ObjectParameter("Lost_Card_Fine", typeof(decimal));
    
            var lost_slip_FineParameter = lost_slip_Fine.HasValue ?
                new ObjectParameter("Lost_slip_Fine", lost_slip_Fine) :
                new ObjectParameter("Lost_slip_Fine", typeof(decimal));
    
            var completeFlagParameter = completeFlag.HasValue ?
                new ObjectParameter("CompleteFlag", completeFlag) :
                new ObjectParameter("CompleteFlag", typeof(int));
    
            var outdateParameter = outdate.HasValue ?
                new ObjectParameter("outdate", outdate) :
                new ObjectParameter("outdate", typeof(System.DateTime));
    
            var dateout1Parameter = dateout1.HasValue ?
                new ObjectParameter("dateout1", dateout1) :
                new ObjectParameter("dateout1", typeof(System.DateTime));
    
            var timeout1Parameter = timeout1.HasValue ?
                new ObjectParameter("timeout1", timeout1) :
                new ObjectParameter("timeout1", typeof(System.TimeSpan));
    
            var picout1Parameter = picout1 != null ?
                new ObjectParameter("picout1", picout1) :
                new ObjectParameter("picout1", typeof(string));
    
            var picout2Parameter = picout2 != null ?
                new ObjectParameter("picout2", picout2) :
                new ObjectParameter("picout2", typeof(string));
    
            var inOutTran_IDParameter = inOutTran_ID != null ?
                new ObjectParameter("InOutTran_ID", inOutTran_ID) :
                new ObjectParameter("InOutTran_ID", typeof(string));
    
            var euserParameter = euser != null ?
                new ObjectParameter("Euser", euser) :
                new ObjectParameter("Euser", typeof(string));
    
            var last_updParameter = last_upd.HasValue ?
                new ObjectParameter("last_upd", last_upd) :
                new ObjectParameter("last_upd", typeof(System.DateTime));
    
            var sfParameter = sf.HasValue ?
                new ObjectParameter("sf", sf) :
                new ObjectParameter("sf", typeof(int));
    
            var overnightpark_FineParameter = overnightpark_Fine.HasValue ?
                new ObjectParameter("overnightpark_Fine", overnightpark_Fine) :
                new ObjectParameter("overnightpark_Fine", typeof(int));
    
            var paytypeParameter = paytype.HasValue ?
                new ObjectParameter("paytype", paytype) :
                new ObjectParameter("paytype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pkinouttran_update_Member", lastloc_idParameter, lastequip_idParameter, useminParameter, sumtotalParameter, hourtotalParameter, lost_CardParameter, lost_Card_FineParameter, lost_slip_FineParameter, completeFlagParameter, outdateParameter, dateout1Parameter, timeout1Parameter, picout1Parameter, picout2Parameter, inOutTran_IDParameter, euserParameter, last_updParameter, sfParameter, overnightpark_FineParameter, paytypeParameter);
        }
    
        public virtual int Pkinouttranstamp_update(string inouttran_id, string stampcode, Nullable<decimal> feetenant, Nullable<decimal> feevisitor, Nullable<int> active1, Nullable<int> mintenant, Nullable<System.DateTime> last_upd)
        {
            var inouttran_idParameter = inouttran_id != null ?
                new ObjectParameter("inouttran_id", inouttran_id) :
                new ObjectParameter("inouttran_id", typeof(string));
    
            var stampcodeParameter = stampcode != null ?
                new ObjectParameter("stampcode", stampcode) :
                new ObjectParameter("stampcode", typeof(string));
    
            var feetenantParameter = feetenant.HasValue ?
                new ObjectParameter("feetenant", feetenant) :
                new ObjectParameter("feetenant", typeof(decimal));
    
            var feevisitorParameter = feevisitor.HasValue ?
                new ObjectParameter("feevisitor", feevisitor) :
                new ObjectParameter("feevisitor", typeof(decimal));
    
            var active1Parameter = active1.HasValue ?
                new ObjectParameter("active1", active1) :
                new ObjectParameter("active1", typeof(int));
    
            var mintenantParameter = mintenant.HasValue ?
                new ObjectParameter("mintenant", mintenant) :
                new ObjectParameter("mintenant", typeof(int));
    
            var last_updParameter = last_upd.HasValue ?
                new ObjectParameter("last_upd", last_upd) :
                new ObjectParameter("last_upd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pkinouttranstamp_update", inouttran_idParameter, stampcodeParameter, feetenantParameter, feevisitorParameter, active1Parameter, mintenantParameter, last_updParameter);
        }
    
        public virtual ObjectResult<PKInoutTrasaction_In_Result> PKInoutTrasaction_In(string date1, string date2)
        {
            var date1Parameter = date1 != null ?
                new ObjectParameter("date1", date1) :
                new ObjectParameter("date1", typeof(string));
    
            var date2Parameter = date2 != null ?
                new ObjectParameter("date2", date2) :
                new ObjectParameter("date2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PKInoutTrasaction_In_Result>("PKInoutTrasaction_In", date1Parameter, date2Parameter);
        }
    
        public virtual ObjectResult<PKInoutTrasaction_Out_Result> PKInoutTrasaction_Out(string date1, string date2)
        {
            var date1Parameter = date1 != null ?
                new ObjectParameter("date1", date1) :
                new ObjectParameter("date1", typeof(string));
    
            var date2Parameter = date2 != null ?
                new ObjectParameter("date2", date2) :
                new ObjectParameter("date2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PKInoutTrasaction_Out_Result>("PKInoutTrasaction_Out", date1Parameter, date2Parameter);
        }
    
        public virtual int Pkmonthlychangedata_insertV2(Nullable<int> month1, Nullable<int> year1, Nullable<int> period1, string cartype, string cscmain_id, Nullable<System.DateTime> issuedate, Nullable<System.DateTime> startdate, Nullable<System.DateTime> endDate, string ternCode, string ternSubCode, string ternname, string scr_no, string name, Nullable<int> overnighttimes, Nullable<decimal> overnightfee, Nullable<int> lostcardtimes, Nullable<decimal> lostCardfine, Nullable<int> changedatatimes, Nullable<decimal> changedatafee, Nullable<decimal> vat, Nullable<decimal> taxwithholding, Nullable<decimal> monthlyFeeVat, Nullable<decimal> monthlywithholding, Nullable<decimal> netFee, string memo, Nullable<int> typecompany, Nullable<int> overnighttimesbill, Nullable<decimal> overnightfeebill, Nullable<int> lostcardtimesbill, Nullable<decimal> lostCardfinebill, Nullable<int> changedatatimesbill, Nullable<decimal> changedatafeebill)
        {
            var month1Parameter = month1.HasValue ?
                new ObjectParameter("Month1", month1) :
                new ObjectParameter("Month1", typeof(int));
    
            var year1Parameter = year1.HasValue ?
                new ObjectParameter("Year1", year1) :
                new ObjectParameter("Year1", typeof(int));
    
            var period1Parameter = period1.HasValue ?
                new ObjectParameter("Period1", period1) :
                new ObjectParameter("Period1", typeof(int));
    
            var cartypeParameter = cartype != null ?
                new ObjectParameter("cartype", cartype) :
                new ObjectParameter("cartype", typeof(string));
    
            var cscmain_idParameter = cscmain_id != null ?
                new ObjectParameter("Cscmain_id", cscmain_id) :
                new ObjectParameter("Cscmain_id", typeof(string));
    
            var issuedateParameter = issuedate.HasValue ?
                new ObjectParameter("Issuedate", issuedate) :
                new ObjectParameter("Issuedate", typeof(System.DateTime));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("Startdate", startdate) :
                new ObjectParameter("Startdate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var ternCodeParameter = ternCode != null ?
                new ObjectParameter("TernCode", ternCode) :
                new ObjectParameter("TernCode", typeof(string));
    
            var ternSubCodeParameter = ternSubCode != null ?
                new ObjectParameter("TernSubCode", ternSubCode) :
                new ObjectParameter("TernSubCode", typeof(string));
    
            var ternnameParameter = ternname != null ?
                new ObjectParameter("ternname", ternname) :
                new ObjectParameter("ternname", typeof(string));
    
            var scr_noParameter = scr_no != null ?
                new ObjectParameter("Scr_no", scr_no) :
                new ObjectParameter("Scr_no", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var overnighttimesParameter = overnighttimes.HasValue ?
                new ObjectParameter("Overnighttimes", overnighttimes) :
                new ObjectParameter("Overnighttimes", typeof(int));
    
            var overnightfeeParameter = overnightfee.HasValue ?
                new ObjectParameter("Overnightfee", overnightfee) :
                new ObjectParameter("Overnightfee", typeof(decimal));
    
            var lostcardtimesParameter = lostcardtimes.HasValue ?
                new ObjectParameter("Lostcardtimes", lostcardtimes) :
                new ObjectParameter("Lostcardtimes", typeof(int));
    
            var lostCardfineParameter = lostCardfine.HasValue ?
                new ObjectParameter("LostCardfine", lostCardfine) :
                new ObjectParameter("LostCardfine", typeof(decimal));
    
            var changedatatimesParameter = changedatatimes.HasValue ?
                new ObjectParameter("Changedatatimes", changedatatimes) :
                new ObjectParameter("Changedatatimes", typeof(int));
    
            var changedatafeeParameter = changedatafee.HasValue ?
                new ObjectParameter("Changedatafee", changedatafee) :
                new ObjectParameter("Changedatafee", typeof(decimal));
    
            var vatParameter = vat.HasValue ?
                new ObjectParameter("Vat", vat) :
                new ObjectParameter("Vat", typeof(decimal));
    
            var taxwithholdingParameter = taxwithholding.HasValue ?
                new ObjectParameter("Taxwithholding", taxwithholding) :
                new ObjectParameter("Taxwithholding", typeof(decimal));
    
            var monthlyFeeVatParameter = monthlyFeeVat.HasValue ?
                new ObjectParameter("MonthlyFeeVat", monthlyFeeVat) :
                new ObjectParameter("MonthlyFeeVat", typeof(decimal));
    
            var monthlywithholdingParameter = monthlywithholding.HasValue ?
                new ObjectParameter("Monthlywithholding", monthlywithholding) :
                new ObjectParameter("Monthlywithholding", typeof(decimal));
    
            var netFeeParameter = netFee.HasValue ?
                new ObjectParameter("NetFee", netFee) :
                new ObjectParameter("NetFee", typeof(decimal));
    
            var memoParameter = memo != null ?
                new ObjectParameter("Memo", memo) :
                new ObjectParameter("Memo", typeof(string));
    
            var typecompanyParameter = typecompany.HasValue ?
                new ObjectParameter("Typecompany", typecompany) :
                new ObjectParameter("Typecompany", typeof(int));
    
            var overnighttimesbillParameter = overnighttimesbill.HasValue ?
                new ObjectParameter("Overnighttimesbill", overnighttimesbill) :
                new ObjectParameter("Overnighttimesbill", typeof(int));
    
            var overnightfeebillParameter = overnightfeebill.HasValue ?
                new ObjectParameter("Overnightfeebill", overnightfeebill) :
                new ObjectParameter("Overnightfeebill", typeof(decimal));
    
            var lostcardtimesbillParameter = lostcardtimesbill.HasValue ?
                new ObjectParameter("Lostcardtimesbill", lostcardtimesbill) :
                new ObjectParameter("Lostcardtimesbill", typeof(int));
    
            var lostCardfinebillParameter = lostCardfinebill.HasValue ?
                new ObjectParameter("LostCardfinebill", lostCardfinebill) :
                new ObjectParameter("LostCardfinebill", typeof(decimal));
    
            var changedatatimesbillParameter = changedatatimesbill.HasValue ?
                new ObjectParameter("Changedatatimesbill", changedatatimesbill) :
                new ObjectParameter("Changedatatimesbill", typeof(int));
    
            var changedatafeebillParameter = changedatafeebill.HasValue ?
                new ObjectParameter("Changedatafeebill", changedatafeebill) :
                new ObjectParameter("Changedatafeebill", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pkmonthlychangedata_insertV2", month1Parameter, year1Parameter, period1Parameter, cartypeParameter, cscmain_idParameter, issuedateParameter, startdateParameter, endDateParameter, ternCodeParameter, ternSubCodeParameter, ternnameParameter, scr_noParameter, nameParameter, overnighttimesParameter, overnightfeeParameter, lostcardtimesParameter, lostCardfineParameter, changedatatimesParameter, changedatafeeParameter, vatParameter, taxwithholdingParameter, monthlyFeeVatParameter, monthlywithholdingParameter, netFeeParameter, memoParameter, typecompanyParameter, overnighttimesbillParameter, overnightfeebillParameter, lostcardtimesbillParameter, lostCardfinebillParameter, changedatatimesbillParameter, changedatafeebillParameter);
        }
    
        public virtual int Pkmonthlychangedata_updateV2(Nullable<int> month1, Nullable<int> year1, Nullable<int> period1, string cartype, string cscmain_id, Nullable<System.DateTime> issuedate, Nullable<System.DateTime> startdate, Nullable<System.DateTime> endDate, string ternCode, string ternSubCode, string ternname, string scr_no, string name, Nullable<int> overnighttimes, Nullable<decimal> overnightfee, Nullable<int> lostcardtimes, Nullable<decimal> lostCardfine, Nullable<int> changedatatimes, Nullable<decimal> changedatafee, Nullable<decimal> vat, Nullable<decimal> taxwithholding, Nullable<decimal> monthlyFeeVat, Nullable<decimal> monthlywithholding, Nullable<decimal> netFee, string memo, Nullable<int> typecompany, Nullable<int> overnighttimesbill, Nullable<decimal> overnightfeebill, Nullable<int> lostcardtimesbill, Nullable<decimal> lostCardfinebill, Nullable<int> changedatatimesbill, Nullable<decimal> changedatafeebill)
        {
            var month1Parameter = month1.HasValue ?
                new ObjectParameter("Month1", month1) :
                new ObjectParameter("Month1", typeof(int));
    
            var year1Parameter = year1.HasValue ?
                new ObjectParameter("Year1", year1) :
                new ObjectParameter("Year1", typeof(int));
    
            var period1Parameter = period1.HasValue ?
                new ObjectParameter("Period1", period1) :
                new ObjectParameter("Period1", typeof(int));
    
            var cartypeParameter = cartype != null ?
                new ObjectParameter("cartype", cartype) :
                new ObjectParameter("cartype", typeof(string));
    
            var cscmain_idParameter = cscmain_id != null ?
                new ObjectParameter("Cscmain_id", cscmain_id) :
                new ObjectParameter("Cscmain_id", typeof(string));
    
            var issuedateParameter = issuedate.HasValue ?
                new ObjectParameter("Issuedate", issuedate) :
                new ObjectParameter("Issuedate", typeof(System.DateTime));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("Startdate", startdate) :
                new ObjectParameter("Startdate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var ternCodeParameter = ternCode != null ?
                new ObjectParameter("TernCode", ternCode) :
                new ObjectParameter("TernCode", typeof(string));
    
            var ternSubCodeParameter = ternSubCode != null ?
                new ObjectParameter("TernSubCode", ternSubCode) :
                new ObjectParameter("TernSubCode", typeof(string));
    
            var ternnameParameter = ternname != null ?
                new ObjectParameter("ternname", ternname) :
                new ObjectParameter("ternname", typeof(string));
    
            var scr_noParameter = scr_no != null ?
                new ObjectParameter("Scr_no", scr_no) :
                new ObjectParameter("Scr_no", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var overnighttimesParameter = overnighttimes.HasValue ?
                new ObjectParameter("Overnighttimes", overnighttimes) :
                new ObjectParameter("Overnighttimes", typeof(int));
    
            var overnightfeeParameter = overnightfee.HasValue ?
                new ObjectParameter("Overnightfee", overnightfee) :
                new ObjectParameter("Overnightfee", typeof(decimal));
    
            var lostcardtimesParameter = lostcardtimes.HasValue ?
                new ObjectParameter("Lostcardtimes", lostcardtimes) :
                new ObjectParameter("Lostcardtimes", typeof(int));
    
            var lostCardfineParameter = lostCardfine.HasValue ?
                new ObjectParameter("LostCardfine", lostCardfine) :
                new ObjectParameter("LostCardfine", typeof(decimal));
    
            var changedatatimesParameter = changedatatimes.HasValue ?
                new ObjectParameter("Changedatatimes", changedatatimes) :
                new ObjectParameter("Changedatatimes", typeof(int));
    
            var changedatafeeParameter = changedatafee.HasValue ?
                new ObjectParameter("Changedatafee", changedatafee) :
                new ObjectParameter("Changedatafee", typeof(decimal));
    
            var vatParameter = vat.HasValue ?
                new ObjectParameter("Vat", vat) :
                new ObjectParameter("Vat", typeof(decimal));
    
            var taxwithholdingParameter = taxwithholding.HasValue ?
                new ObjectParameter("Taxwithholding", taxwithholding) :
                new ObjectParameter("Taxwithholding", typeof(decimal));
    
            var monthlyFeeVatParameter = monthlyFeeVat.HasValue ?
                new ObjectParameter("MonthlyFeeVat", monthlyFeeVat) :
                new ObjectParameter("MonthlyFeeVat", typeof(decimal));
    
            var monthlywithholdingParameter = monthlywithholding.HasValue ?
                new ObjectParameter("Monthlywithholding", monthlywithholding) :
                new ObjectParameter("Monthlywithholding", typeof(decimal));
    
            var netFeeParameter = netFee.HasValue ?
                new ObjectParameter("NetFee", netFee) :
                new ObjectParameter("NetFee", typeof(decimal));
    
            var memoParameter = memo != null ?
                new ObjectParameter("Memo", memo) :
                new ObjectParameter("Memo", typeof(string));
    
            var typecompanyParameter = typecompany.HasValue ?
                new ObjectParameter("Typecompany", typecompany) :
                new ObjectParameter("Typecompany", typeof(int));
    
            var overnighttimesbillParameter = overnighttimesbill.HasValue ?
                new ObjectParameter("Overnighttimesbill", overnighttimesbill) :
                new ObjectParameter("Overnighttimesbill", typeof(int));
    
            var overnightfeebillParameter = overnightfeebill.HasValue ?
                new ObjectParameter("Overnightfeebill", overnightfeebill) :
                new ObjectParameter("Overnightfeebill", typeof(decimal));
    
            var lostcardtimesbillParameter = lostcardtimesbill.HasValue ?
                new ObjectParameter("Lostcardtimesbill", lostcardtimesbill) :
                new ObjectParameter("Lostcardtimesbill", typeof(int));
    
            var lostCardfinebillParameter = lostCardfinebill.HasValue ?
                new ObjectParameter("LostCardfinebill", lostCardfinebill) :
                new ObjectParameter("LostCardfinebill", typeof(decimal));
    
            var changedatatimesbillParameter = changedatatimesbill.HasValue ?
                new ObjectParameter("Changedatatimesbill", changedatatimesbill) :
                new ObjectParameter("Changedatatimesbill", typeof(int));
    
            var changedatafeebillParameter = changedatafeebill.HasValue ?
                new ObjectParameter("Changedatafeebill", changedatafeebill) :
                new ObjectParameter("Changedatafeebill", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pkmonthlychangedata_updateV2", month1Parameter, year1Parameter, period1Parameter, cartypeParameter, cscmain_idParameter, issuedateParameter, startdateParameter, endDateParameter, ternCodeParameter, ternSubCodeParameter, ternnameParameter, scr_noParameter, nameParameter, overnighttimesParameter, overnightfeeParameter, lostcardtimesParameter, lostCardfineParameter, changedatatimesParameter, changedatafeeParameter, vatParameter, taxwithholdingParameter, monthlyFeeVatParameter, monthlywithholdingParameter, netFeeParameter, memoParameter, typecompanyParameter, overnighttimesbillParameter, overnightfeebillParameter, lostcardtimesbillParameter, lostCardfinebillParameter, changedatatimesbillParameter, changedatafeebillParameter);
        }
    
        public virtual int Pkmonthlyservice_insert(Nullable<int> month1, Nullable<int> year1, string scr_no, string rabbit_id, string cscmain_id, string ternCode, string ternSubCode, string ternname, string name, string carID, string carModel, Nullable<System.DateTime> expDate, Nullable<System.DateTime> firstUse, Nullable<decimal> monthlyFee, Nullable<decimal> monthlyFeeVat, Nullable<decimal> monthlywithholding, Nullable<decimal> netFee, string memo, string typecontact, Nullable<int> typecontactsub, string cartype, string pay, string statuspay, Nullable<System.DateTime> dateActive, Nullable<int> typecompany, string group1, string address1, Nullable<decimal> overnightfee, string overnightfee_note, Nullable<decimal> monthlyfee_cash)
        {
            var month1Parameter = month1.HasValue ?
                new ObjectParameter("Month1", month1) :
                new ObjectParameter("Month1", typeof(int));
    
            var year1Parameter = year1.HasValue ?
                new ObjectParameter("Year1", year1) :
                new ObjectParameter("Year1", typeof(int));
    
            var scr_noParameter = scr_no != null ?
                new ObjectParameter("scr_no", scr_no) :
                new ObjectParameter("scr_no", typeof(string));
    
            var rabbit_idParameter = rabbit_id != null ?
                new ObjectParameter("rabbit_id", rabbit_id) :
                new ObjectParameter("rabbit_id", typeof(string));
    
            var cscmain_idParameter = cscmain_id != null ?
                new ObjectParameter("Cscmain_id", cscmain_id) :
                new ObjectParameter("Cscmain_id", typeof(string));
    
            var ternCodeParameter = ternCode != null ?
                new ObjectParameter("TernCode", ternCode) :
                new ObjectParameter("TernCode", typeof(string));
    
            var ternSubCodeParameter = ternSubCode != null ?
                new ObjectParameter("TernSubCode", ternSubCode) :
                new ObjectParameter("TernSubCode", typeof(string));
    
            var ternnameParameter = ternname != null ?
                new ObjectParameter("ternname", ternname) :
                new ObjectParameter("ternname", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var carIDParameter = carID != null ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(string));
    
            var carModelParameter = carModel != null ?
                new ObjectParameter("CarModel", carModel) :
                new ObjectParameter("CarModel", typeof(string));
    
            var expDateParameter = expDate.HasValue ?
                new ObjectParameter("ExpDate", expDate) :
                new ObjectParameter("ExpDate", typeof(System.DateTime));
    
            var firstUseParameter = firstUse.HasValue ?
                new ObjectParameter("FirstUse", firstUse) :
                new ObjectParameter("FirstUse", typeof(System.DateTime));
    
            var monthlyFeeParameter = monthlyFee.HasValue ?
                new ObjectParameter("MonthlyFee", monthlyFee) :
                new ObjectParameter("MonthlyFee", typeof(decimal));
    
            var monthlyFeeVatParameter = monthlyFeeVat.HasValue ?
                new ObjectParameter("MonthlyFeeVat", monthlyFeeVat) :
                new ObjectParameter("MonthlyFeeVat", typeof(decimal));
    
            var monthlywithholdingParameter = monthlywithholding.HasValue ?
                new ObjectParameter("Monthlywithholding", monthlywithholding) :
                new ObjectParameter("Monthlywithholding", typeof(decimal));
    
            var netFeeParameter = netFee.HasValue ?
                new ObjectParameter("NetFee", netFee) :
                new ObjectParameter("NetFee", typeof(decimal));
    
            var memoParameter = memo != null ?
                new ObjectParameter("Memo", memo) :
                new ObjectParameter("Memo", typeof(string));
    
            var typecontactParameter = typecontact != null ?
                new ObjectParameter("typecontact", typecontact) :
                new ObjectParameter("typecontact", typeof(string));
    
            var typecontactsubParameter = typecontactsub.HasValue ?
                new ObjectParameter("typecontactsub", typecontactsub) :
                new ObjectParameter("typecontactsub", typeof(int));
    
            var cartypeParameter = cartype != null ?
                new ObjectParameter("cartype", cartype) :
                new ObjectParameter("cartype", typeof(string));
    
            var payParameter = pay != null ?
                new ObjectParameter("Pay", pay) :
                new ObjectParameter("Pay", typeof(string));
    
            var statuspayParameter = statuspay != null ?
                new ObjectParameter("Statuspay", statuspay) :
                new ObjectParameter("Statuspay", typeof(string));
    
            var dateActiveParameter = dateActive.HasValue ?
                new ObjectParameter("DateActive", dateActive) :
                new ObjectParameter("DateActive", typeof(System.DateTime));
    
            var typecompanyParameter = typecompany.HasValue ?
                new ObjectParameter("typecompany", typecompany) :
                new ObjectParameter("typecompany", typeof(int));
    
            var group1Parameter = group1 != null ?
                new ObjectParameter("Group1", group1) :
                new ObjectParameter("Group1", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var overnightfeeParameter = overnightfee.HasValue ?
                new ObjectParameter("overnightfee", overnightfee) :
                new ObjectParameter("overnightfee", typeof(decimal));
    
            var overnightfee_noteParameter = overnightfee_note != null ?
                new ObjectParameter("overnightfee_note", overnightfee_note) :
                new ObjectParameter("overnightfee_note", typeof(string));
    
            var monthlyfee_cashParameter = monthlyfee_cash.HasValue ?
                new ObjectParameter("monthlyfee_cash", monthlyfee_cash) :
                new ObjectParameter("monthlyfee_cash", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pkmonthlyservice_insert", month1Parameter, year1Parameter, scr_noParameter, rabbit_idParameter, cscmain_idParameter, ternCodeParameter, ternSubCodeParameter, ternnameParameter, nameParameter, carIDParameter, carModelParameter, expDateParameter, firstUseParameter, monthlyFeeParameter, monthlyFeeVatParameter, monthlywithholdingParameter, netFeeParameter, memoParameter, typecontactParameter, typecontactsubParameter, cartypeParameter, payParameter, statuspayParameter, dateActiveParameter, typecompanyParameter, group1Parameter, address1Parameter, overnightfeeParameter, overnightfee_noteParameter, monthlyfee_cashParameter);
        }
    
        public virtual int Pkmonthlyservice_insertV2(Nullable<int> month1, Nullable<int> year1, string scr_no, string rabbit_id, string cscmain_id, string ternCode, string ternSubCode, string ternname, string name, string carID, string carModel, string carID1, string carModel1, string carID2, string carModel2, Nullable<System.DateTime> expDate, Nullable<System.DateTime> firstUse, Nullable<decimal> monthlyFee, Nullable<decimal> monthlyFeeVat, Nullable<decimal> monthlywithholding, Nullable<decimal> netFee, string memo, string typecontact, Nullable<int> typecontactsub, string cartype, string pay, string statuspay, Nullable<System.DateTime> dateActive, Nullable<int> typecompany, string group1, string address1, Nullable<decimal> overnightfee, string overnightfee_note, Nullable<decimal> monthlyfee_cash, Nullable<decimal> lostCardfine, Nullable<decimal> changedatafee, Nullable<decimal> vat, Nullable<decimal> taxwithholding, Nullable<int> period1, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<System.DateTime> issuedate, string cscmain_id1, string cscmain_id2, string cscmain_id3)
        {
            var month1Parameter = month1.HasValue ?
                new ObjectParameter("Month1", month1) :
                new ObjectParameter("Month1", typeof(int));
    
            var year1Parameter = year1.HasValue ?
                new ObjectParameter("Year1", year1) :
                new ObjectParameter("Year1", typeof(int));
    
            var scr_noParameter = scr_no != null ?
                new ObjectParameter("scr_no", scr_no) :
                new ObjectParameter("scr_no", typeof(string));
    
            var rabbit_idParameter = rabbit_id != null ?
                new ObjectParameter("rabbit_id", rabbit_id) :
                new ObjectParameter("rabbit_id", typeof(string));
    
            var cscmain_idParameter = cscmain_id != null ?
                new ObjectParameter("Cscmain_id", cscmain_id) :
                new ObjectParameter("Cscmain_id", typeof(string));
    
            var ternCodeParameter = ternCode != null ?
                new ObjectParameter("TernCode", ternCode) :
                new ObjectParameter("TernCode", typeof(string));
    
            var ternSubCodeParameter = ternSubCode != null ?
                new ObjectParameter("TernSubCode", ternSubCode) :
                new ObjectParameter("TernSubCode", typeof(string));
    
            var ternnameParameter = ternname != null ?
                new ObjectParameter("ternname", ternname) :
                new ObjectParameter("ternname", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var carIDParameter = carID != null ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(string));
    
            var carModelParameter = carModel != null ?
                new ObjectParameter("CarModel", carModel) :
                new ObjectParameter("CarModel", typeof(string));
    
            var carID1Parameter = carID1 != null ?
                new ObjectParameter("CarID1", carID1) :
                new ObjectParameter("CarID1", typeof(string));
    
            var carModel1Parameter = carModel1 != null ?
                new ObjectParameter("CarModel1", carModel1) :
                new ObjectParameter("CarModel1", typeof(string));
    
            var carID2Parameter = carID2 != null ?
                new ObjectParameter("CarID2", carID2) :
                new ObjectParameter("CarID2", typeof(string));
    
            var carModel2Parameter = carModel2 != null ?
                new ObjectParameter("CarModel2", carModel2) :
                new ObjectParameter("CarModel2", typeof(string));
    
            var expDateParameter = expDate.HasValue ?
                new ObjectParameter("ExpDate", expDate) :
                new ObjectParameter("ExpDate", typeof(System.DateTime));
    
            var firstUseParameter = firstUse.HasValue ?
                new ObjectParameter("FirstUse", firstUse) :
                new ObjectParameter("FirstUse", typeof(System.DateTime));
    
            var monthlyFeeParameter = monthlyFee.HasValue ?
                new ObjectParameter("MonthlyFee", monthlyFee) :
                new ObjectParameter("MonthlyFee", typeof(decimal));
    
            var monthlyFeeVatParameter = monthlyFeeVat.HasValue ?
                new ObjectParameter("MonthlyFeeVat", monthlyFeeVat) :
                new ObjectParameter("MonthlyFeeVat", typeof(decimal));
    
            var monthlywithholdingParameter = monthlywithholding.HasValue ?
                new ObjectParameter("Monthlywithholding", monthlywithholding) :
                new ObjectParameter("Monthlywithholding", typeof(decimal));
    
            var netFeeParameter = netFee.HasValue ?
                new ObjectParameter("NetFee", netFee) :
                new ObjectParameter("NetFee", typeof(decimal));
    
            var memoParameter = memo != null ?
                new ObjectParameter("Memo", memo) :
                new ObjectParameter("Memo", typeof(string));
    
            var typecontactParameter = typecontact != null ?
                new ObjectParameter("typecontact", typecontact) :
                new ObjectParameter("typecontact", typeof(string));
    
            var typecontactsubParameter = typecontactsub.HasValue ?
                new ObjectParameter("typecontactsub", typecontactsub) :
                new ObjectParameter("typecontactsub", typeof(int));
    
            var cartypeParameter = cartype != null ?
                new ObjectParameter("cartype", cartype) :
                new ObjectParameter("cartype", typeof(string));
    
            var payParameter = pay != null ?
                new ObjectParameter("Pay", pay) :
                new ObjectParameter("Pay", typeof(string));
    
            var statuspayParameter = statuspay != null ?
                new ObjectParameter("Statuspay", statuspay) :
                new ObjectParameter("Statuspay", typeof(string));
    
            var dateActiveParameter = dateActive.HasValue ?
                new ObjectParameter("DateActive", dateActive) :
                new ObjectParameter("DateActive", typeof(System.DateTime));
    
            var typecompanyParameter = typecompany.HasValue ?
                new ObjectParameter("typecompany", typecompany) :
                new ObjectParameter("typecompany", typeof(int));
    
            var group1Parameter = group1 != null ?
                new ObjectParameter("Group1", group1) :
                new ObjectParameter("Group1", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var overnightfeeParameter = overnightfee.HasValue ?
                new ObjectParameter("overnightfee", overnightfee) :
                new ObjectParameter("overnightfee", typeof(decimal));
    
            var overnightfee_noteParameter = overnightfee_note != null ?
                new ObjectParameter("overnightfee_note", overnightfee_note) :
                new ObjectParameter("overnightfee_note", typeof(string));
    
            var monthlyfee_cashParameter = monthlyfee_cash.HasValue ?
                new ObjectParameter("monthlyfee_cash", monthlyfee_cash) :
                new ObjectParameter("monthlyfee_cash", typeof(decimal));
    
            var lostCardfineParameter = lostCardfine.HasValue ?
                new ObjectParameter("LostCardfine", lostCardfine) :
                new ObjectParameter("LostCardfine", typeof(decimal));
    
            var changedatafeeParameter = changedatafee.HasValue ?
                new ObjectParameter("Changedatafee", changedatafee) :
                new ObjectParameter("Changedatafee", typeof(decimal));
    
            var vatParameter = vat.HasValue ?
                new ObjectParameter("Vat", vat) :
                new ObjectParameter("Vat", typeof(decimal));
    
            var taxwithholdingParameter = taxwithholding.HasValue ?
                new ObjectParameter("Taxwithholding", taxwithholding) :
                new ObjectParameter("Taxwithholding", typeof(decimal));
    
            var period1Parameter = period1.HasValue ?
                new ObjectParameter("period1", period1) :
                new ObjectParameter("period1", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var issuedateParameter = issuedate.HasValue ?
                new ObjectParameter("Issuedate", issuedate) :
                new ObjectParameter("Issuedate", typeof(System.DateTime));
    
            var cscmain_id1Parameter = cscmain_id1 != null ?
                new ObjectParameter("cscmain_id1", cscmain_id1) :
                new ObjectParameter("cscmain_id1", typeof(string));
    
            var cscmain_id2Parameter = cscmain_id2 != null ?
                new ObjectParameter("cscmain_id2", cscmain_id2) :
                new ObjectParameter("cscmain_id2", typeof(string));
    
            var cscmain_id3Parameter = cscmain_id3 != null ?
                new ObjectParameter("cscmain_id3", cscmain_id3) :
                new ObjectParameter("cscmain_id3", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pkmonthlyservice_insertV2", month1Parameter, year1Parameter, scr_noParameter, rabbit_idParameter, cscmain_idParameter, ternCodeParameter, ternSubCodeParameter, ternnameParameter, nameParameter, carIDParameter, carModelParameter, carID1Parameter, carModel1Parameter, carID2Parameter, carModel2Parameter, expDateParameter, firstUseParameter, monthlyFeeParameter, monthlyFeeVatParameter, monthlywithholdingParameter, netFeeParameter, memoParameter, typecontactParameter, typecontactsubParameter, cartypeParameter, payParameter, statuspayParameter, dateActiveParameter, typecompanyParameter, group1Parameter, address1Parameter, overnightfeeParameter, overnightfee_noteParameter, monthlyfee_cashParameter, lostCardfineParameter, changedatafeeParameter, vatParameter, taxwithholdingParameter, period1Parameter, startDateParameter, endDateParameter, issuedateParameter, cscmain_id1Parameter, cscmain_id2Parameter, cscmain_id3Parameter);
        }
    
        public virtual int Pkmonthlyservice_updateV2(Nullable<int> month1, Nullable<int> year1, string scr_no, string rabbit_id, string cscmain_id, string ternCode, string ternSubCode, string ternname, string name, string carID, string carModel, string carID1, string carModel1, string carID2, string carModel2, Nullable<System.DateTime> expDate, Nullable<System.DateTime> firstUse, Nullable<decimal> monthlyFee, Nullable<decimal> monthlyFeeVat, Nullable<decimal> monthlywithholding, Nullable<decimal> netFee, string memo, string typecontact, Nullable<int> typecontactsub, string cartype, string pay, string statuspay, Nullable<System.DateTime> dateActive, Nullable<int> typecompany, string group1, string address1, Nullable<decimal> overnightfee, string overnightfee_note, Nullable<decimal> monthlyfee_cash, Nullable<decimal> lostCardfine, Nullable<decimal> changedatafee, Nullable<decimal> vat, Nullable<decimal> taxwithholding, Nullable<int> period1, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<System.DateTime> issuedate, string cscmain_id1, string cscmain_id2, string cscmain_id3)
        {
            var month1Parameter = month1.HasValue ?
                new ObjectParameter("Month1", month1) :
                new ObjectParameter("Month1", typeof(int));
    
            var year1Parameter = year1.HasValue ?
                new ObjectParameter("Year1", year1) :
                new ObjectParameter("Year1", typeof(int));
    
            var scr_noParameter = scr_no != null ?
                new ObjectParameter("scr_no", scr_no) :
                new ObjectParameter("scr_no", typeof(string));
    
            var rabbit_idParameter = rabbit_id != null ?
                new ObjectParameter("rabbit_id", rabbit_id) :
                new ObjectParameter("rabbit_id", typeof(string));
    
            var cscmain_idParameter = cscmain_id != null ?
                new ObjectParameter("Cscmain_id", cscmain_id) :
                new ObjectParameter("Cscmain_id", typeof(string));
    
            var ternCodeParameter = ternCode != null ?
                new ObjectParameter("TernCode", ternCode) :
                new ObjectParameter("TernCode", typeof(string));
    
            var ternSubCodeParameter = ternSubCode != null ?
                new ObjectParameter("TernSubCode", ternSubCode) :
                new ObjectParameter("TernSubCode", typeof(string));
    
            var ternnameParameter = ternname != null ?
                new ObjectParameter("ternname", ternname) :
                new ObjectParameter("ternname", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var carIDParameter = carID != null ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(string));
    
            var carModelParameter = carModel != null ?
                new ObjectParameter("CarModel", carModel) :
                new ObjectParameter("CarModel", typeof(string));
    
            var carID1Parameter = carID1 != null ?
                new ObjectParameter("CarID1", carID1) :
                new ObjectParameter("CarID1", typeof(string));
    
            var carModel1Parameter = carModel1 != null ?
                new ObjectParameter("CarModel1", carModel1) :
                new ObjectParameter("CarModel1", typeof(string));
    
            var carID2Parameter = carID2 != null ?
                new ObjectParameter("CarID2", carID2) :
                new ObjectParameter("CarID2", typeof(string));
    
            var carModel2Parameter = carModel2 != null ?
                new ObjectParameter("CarModel2", carModel2) :
                new ObjectParameter("CarModel2", typeof(string));
    
            var expDateParameter = expDate.HasValue ?
                new ObjectParameter("ExpDate", expDate) :
                new ObjectParameter("ExpDate", typeof(System.DateTime));
    
            var firstUseParameter = firstUse.HasValue ?
                new ObjectParameter("FirstUse", firstUse) :
                new ObjectParameter("FirstUse", typeof(System.DateTime));
    
            var monthlyFeeParameter = monthlyFee.HasValue ?
                new ObjectParameter("MonthlyFee", monthlyFee) :
                new ObjectParameter("MonthlyFee", typeof(decimal));
    
            var monthlyFeeVatParameter = monthlyFeeVat.HasValue ?
                new ObjectParameter("MonthlyFeeVat", monthlyFeeVat) :
                new ObjectParameter("MonthlyFeeVat", typeof(decimal));
    
            var monthlywithholdingParameter = monthlywithholding.HasValue ?
                new ObjectParameter("Monthlywithholding", monthlywithholding) :
                new ObjectParameter("Monthlywithholding", typeof(decimal));
    
            var netFeeParameter = netFee.HasValue ?
                new ObjectParameter("NetFee", netFee) :
                new ObjectParameter("NetFee", typeof(decimal));
    
            var memoParameter = memo != null ?
                new ObjectParameter("Memo", memo) :
                new ObjectParameter("Memo", typeof(string));
    
            var typecontactParameter = typecontact != null ?
                new ObjectParameter("typecontact", typecontact) :
                new ObjectParameter("typecontact", typeof(string));
    
            var typecontactsubParameter = typecontactsub.HasValue ?
                new ObjectParameter("typecontactsub", typecontactsub) :
                new ObjectParameter("typecontactsub", typeof(int));
    
            var cartypeParameter = cartype != null ?
                new ObjectParameter("cartype", cartype) :
                new ObjectParameter("cartype", typeof(string));
    
            var payParameter = pay != null ?
                new ObjectParameter("Pay", pay) :
                new ObjectParameter("Pay", typeof(string));
    
            var statuspayParameter = statuspay != null ?
                new ObjectParameter("Statuspay", statuspay) :
                new ObjectParameter("Statuspay", typeof(string));
    
            var dateActiveParameter = dateActive.HasValue ?
                new ObjectParameter("DateActive", dateActive) :
                new ObjectParameter("DateActive", typeof(System.DateTime));
    
            var typecompanyParameter = typecompany.HasValue ?
                new ObjectParameter("typecompany", typecompany) :
                new ObjectParameter("typecompany", typeof(int));
    
            var group1Parameter = group1 != null ?
                new ObjectParameter("Group1", group1) :
                new ObjectParameter("Group1", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var overnightfeeParameter = overnightfee.HasValue ?
                new ObjectParameter("overnightfee", overnightfee) :
                new ObjectParameter("overnightfee", typeof(decimal));
    
            var overnightfee_noteParameter = overnightfee_note != null ?
                new ObjectParameter("overnightfee_note", overnightfee_note) :
                new ObjectParameter("overnightfee_note", typeof(string));
    
            var monthlyfee_cashParameter = monthlyfee_cash.HasValue ?
                new ObjectParameter("monthlyfee_cash", monthlyfee_cash) :
                new ObjectParameter("monthlyfee_cash", typeof(decimal));
    
            var lostCardfineParameter = lostCardfine.HasValue ?
                new ObjectParameter("LostCardfine", lostCardfine) :
                new ObjectParameter("LostCardfine", typeof(decimal));
    
            var changedatafeeParameter = changedatafee.HasValue ?
                new ObjectParameter("Changedatafee", changedatafee) :
                new ObjectParameter("Changedatafee", typeof(decimal));
    
            var vatParameter = vat.HasValue ?
                new ObjectParameter("Vat", vat) :
                new ObjectParameter("Vat", typeof(decimal));
    
            var taxwithholdingParameter = taxwithholding.HasValue ?
                new ObjectParameter("Taxwithholding", taxwithholding) :
                new ObjectParameter("Taxwithholding", typeof(decimal));
    
            var period1Parameter = period1.HasValue ?
                new ObjectParameter("period1", period1) :
                new ObjectParameter("period1", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var issuedateParameter = issuedate.HasValue ?
                new ObjectParameter("Issuedate", issuedate) :
                new ObjectParameter("Issuedate", typeof(System.DateTime));
    
            var cscmain_id1Parameter = cscmain_id1 != null ?
                new ObjectParameter("cscmain_id1", cscmain_id1) :
                new ObjectParameter("cscmain_id1", typeof(string));
    
            var cscmain_id2Parameter = cscmain_id2 != null ?
                new ObjectParameter("cscmain_id2", cscmain_id2) :
                new ObjectParameter("cscmain_id2", typeof(string));
    
            var cscmain_id3Parameter = cscmain_id3 != null ?
                new ObjectParameter("cscmain_id3", cscmain_id3) :
                new ObjectParameter("cscmain_id3", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pkmonthlyservice_updateV2", month1Parameter, year1Parameter, scr_noParameter, rabbit_idParameter, cscmain_idParameter, ternCodeParameter, ternSubCodeParameter, ternnameParameter, nameParameter, carIDParameter, carModelParameter, carID1Parameter, carModel1Parameter, carID2Parameter, carModel2Parameter, expDateParameter, firstUseParameter, monthlyFeeParameter, monthlyFeeVatParameter, monthlywithholdingParameter, netFeeParameter, memoParameter, typecontactParameter, typecontactsubParameter, cartypeParameter, payParameter, statuspayParameter, dateActiveParameter, typecompanyParameter, group1Parameter, address1Parameter, overnightfeeParameter, overnightfee_noteParameter, monthlyfee_cashParameter, lostCardfineParameter, changedatafeeParameter, vatParameter, taxwithholdingParameter, period1Parameter, startDateParameter, endDateParameter, issuedateParameter, cscmain_id1Parameter, cscmain_id2Parameter, cscmain_id3Parameter);
        }
    
        public virtual ObjectResult<Pksummarytenant_Result> Pksummarytenant(string terncode, Nullable<System.DateTime> date1, Nullable<System.DateTime> date2, Nullable<int> type1)
        {
            var terncodeParameter = terncode != null ?
                new ObjectParameter("terncode", terncode) :
                new ObjectParameter("terncode", typeof(string));
    
            var date1Parameter = date1.HasValue ?
                new ObjectParameter("date1", date1) :
                new ObjectParameter("date1", typeof(System.DateTime));
    
            var date2Parameter = date2.HasValue ?
                new ObjectParameter("date2", date2) :
                new ObjectParameter("date2", typeof(System.DateTime));
    
            var type1Parameter = type1.HasValue ?
                new ObjectParameter("type1", type1) :
                new ObjectParameter("type1", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Pksummarytenant_Result>("Pksummarytenant", terncodeParameter, date1Parameter, date2Parameter, type1Parameter);
        }
    
        public virtual ObjectResult<Pksummarytenant_car_Result> Pksummarytenant_car(string terncode, Nullable<System.DateTime> date1, Nullable<System.DateTime> date2, Nullable<int> type1)
        {
            var terncodeParameter = terncode != null ?
                new ObjectParameter("terncode", terncode) :
                new ObjectParameter("terncode", typeof(string));
    
            var date1Parameter = date1.HasValue ?
                new ObjectParameter("date1", date1) :
                new ObjectParameter("date1", typeof(System.DateTime));
    
            var date2Parameter = date2.HasValue ?
                new ObjectParameter("date2", date2) :
                new ObjectParameter("date2", typeof(System.DateTime));
    
            var type1Parameter = type1.HasValue ?
                new ObjectParameter("type1", type1) :
                new ObjectParameter("type1", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Pksummarytenant_car_Result>("Pksummarytenant_car", terncodeParameter, date1Parameter, date2Parameter, type1Parameter);
        }
    
        public virtual ObjectResult<Pksummarytenant_motor_Result> Pksummarytenant_motor(string terncode, Nullable<System.DateTime> date1, Nullable<System.DateTime> date2, Nullable<int> type1)
        {
            var terncodeParameter = terncode != null ?
                new ObjectParameter("terncode", terncode) :
                new ObjectParameter("terncode", typeof(string));
    
            var date1Parameter = date1.HasValue ?
                new ObjectParameter("date1", date1) :
                new ObjectParameter("date1", typeof(System.DateTime));
    
            var date2Parameter = date2.HasValue ?
                new ObjectParameter("date2", date2) :
                new ObjectParameter("date2", typeof(System.DateTime));
    
            var type1Parameter = type1.HasValue ?
                new ObjectParameter("type1", type1) :
                new ObjectParameter("type1", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Pksummarytenant_motor_Result>("Pksummarytenant_motor", terncodeParameter, date1Parameter, date2Parameter, type1Parameter);
        }
    
        public virtual ObjectResult<Pksummarytenantbydepartment_Result> Pksummarytenantbydepartment(string terncode, string ternsubcode, Nullable<System.DateTime> date1, Nullable<System.DateTime> date2, Nullable<int> type1)
        {
            var terncodeParameter = terncode != null ?
                new ObjectParameter("terncode", terncode) :
                new ObjectParameter("terncode", typeof(string));
    
            var ternsubcodeParameter = ternsubcode != null ?
                new ObjectParameter("ternsubcode", ternsubcode) :
                new ObjectParameter("ternsubcode", typeof(string));
    
            var date1Parameter = date1.HasValue ?
                new ObjectParameter("date1", date1) :
                new ObjectParameter("date1", typeof(System.DateTime));
    
            var date2Parameter = date2.HasValue ?
                new ObjectParameter("date2", date2) :
                new ObjectParameter("date2", typeof(System.DateTime));
    
            var type1Parameter = type1.HasValue ?
                new ObjectParameter("type1", type1) :
                new ObjectParameter("type1", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Pksummarytenantbydepartment_Result>("Pksummarytenantbydepartment", terncodeParameter, ternsubcodeParameter, date1Parameter, date2Parameter, type1Parameter);
        }
    
        public virtual ObjectResult<Pksummarytenantbydepartment_car_Result> Pksummarytenantbydepartment_car(string terncode, string ternsubcode, Nullable<System.DateTime> date1, Nullable<System.DateTime> date2, Nullable<int> type1)
        {
            var terncodeParameter = terncode != null ?
                new ObjectParameter("terncode", terncode) :
                new ObjectParameter("terncode", typeof(string));
    
            var ternsubcodeParameter = ternsubcode != null ?
                new ObjectParameter("ternsubcode", ternsubcode) :
                new ObjectParameter("ternsubcode", typeof(string));
    
            var date1Parameter = date1.HasValue ?
                new ObjectParameter("date1", date1) :
                new ObjectParameter("date1", typeof(System.DateTime));
    
            var date2Parameter = date2.HasValue ?
                new ObjectParameter("date2", date2) :
                new ObjectParameter("date2", typeof(System.DateTime));
    
            var type1Parameter = type1.HasValue ?
                new ObjectParameter("type1", type1) :
                new ObjectParameter("type1", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Pksummarytenantbydepartment_car_Result>("Pksummarytenantbydepartment_car", terncodeParameter, ternsubcodeParameter, date1Parameter, date2Parameter, type1Parameter);
        }
    
        public virtual ObjectResult<Pksummarytenantbydepartment_motor_Result> Pksummarytenantbydepartment_motor(string terncode, string ternsubcode, Nullable<System.DateTime> date1, Nullable<System.DateTime> date2, Nullable<int> type1)
        {
            var terncodeParameter = terncode != null ?
                new ObjectParameter("terncode", terncode) :
                new ObjectParameter("terncode", typeof(string));
    
            var ternsubcodeParameter = ternsubcode != null ?
                new ObjectParameter("ternsubcode", ternsubcode) :
                new ObjectParameter("ternsubcode", typeof(string));
    
            var date1Parameter = date1.HasValue ?
                new ObjectParameter("date1", date1) :
                new ObjectParameter("date1", typeof(System.DateTime));
    
            var date2Parameter = date2.HasValue ?
                new ObjectParameter("date2", date2) :
                new ObjectParameter("date2", typeof(System.DateTime));
    
            var type1Parameter = type1.HasValue ?
                new ObjectParameter("type1", type1) :
                new ObjectParameter("type1", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Pksummarytenantbydepartment_motor_Result>("Pksummarytenantbydepartment_motor", terncodeParameter, ternsubcodeParameter, date1Parameter, date2Parameter, type1Parameter);
        }
    
        public virtual ObjectResult<Pksummarytenantbystamp_Result> Pksummarytenantbystamp(string terncode, Nullable<System.DateTime> date1, Nullable<System.DateTime> date2, Nullable<int> type1)
        {
            var terncodeParameter = terncode != null ?
                new ObjectParameter("terncode", terncode) :
                new ObjectParameter("terncode", typeof(string));
    
            var date1Parameter = date1.HasValue ?
                new ObjectParameter("date1", date1) :
                new ObjectParameter("date1", typeof(System.DateTime));
    
            var date2Parameter = date2.HasValue ?
                new ObjectParameter("date2", date2) :
                new ObjectParameter("date2", typeof(System.DateTime));
    
            var type1Parameter = type1.HasValue ?
                new ObjectParameter("type1", type1) :
                new ObjectParameter("type1", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Pksummarytenantbystamp_Result>("Pksummarytenantbystamp", terncodeParameter, date1Parameter, date2Parameter, type1Parameter);
        }
    
        public virtual ObjectResult<Pksummarytenantbystamp_car_Result> Pksummarytenantbystamp_car(string terncode, Nullable<System.DateTime> date1, Nullable<System.DateTime> date2, Nullable<int> type1)
        {
            var terncodeParameter = terncode != null ?
                new ObjectParameter("terncode", terncode) :
                new ObjectParameter("terncode", typeof(string));
    
            var date1Parameter = date1.HasValue ?
                new ObjectParameter("date1", date1) :
                new ObjectParameter("date1", typeof(System.DateTime));
    
            var date2Parameter = date2.HasValue ?
                new ObjectParameter("date2", date2) :
                new ObjectParameter("date2", typeof(System.DateTime));
    
            var type1Parameter = type1.HasValue ?
                new ObjectParameter("type1", type1) :
                new ObjectParameter("type1", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Pksummarytenantbystamp_car_Result>("Pksummarytenantbystamp_car", terncodeParameter, date1Parameter, date2Parameter, type1Parameter);
        }
    
        public virtual ObjectResult<Pksummarytenantbystamp_motor_Result> Pksummarytenantbystamp_motor(string terncode, Nullable<System.DateTime> date1, Nullable<System.DateTime> date2, Nullable<int> type1)
        {
            var terncodeParameter = terncode != null ?
                new ObjectParameter("terncode", terncode) :
                new ObjectParameter("terncode", typeof(string));
    
            var date1Parameter = date1.HasValue ?
                new ObjectParameter("date1", date1) :
                new ObjectParameter("date1", typeof(System.DateTime));
    
            var date2Parameter = date2.HasValue ?
                new ObjectParameter("date2", date2) :
                new ObjectParameter("date2", typeof(System.DateTime));
    
            var type1Parameter = type1.HasValue ?
                new ObjectParameter("type1", type1) :
                new ObjectParameter("type1", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Pksummarytenantbystamp_motor_Result>("Pksummarytenantbystamp_motor", terncodeParameter, date1Parameter, date2Parameter, type1Parameter);
        }
    
        public virtual int requestCancelMember(string no1, string terncode, Nullable<int> statustype, string custno, string fname, string lname, string memberType, Nullable<System.DateTime> dateactive, string updateby, string carID_Old, string carModel_Old, string carcolor_Old, string carID2_Old, string carModel2_Old, string carcolor2_Old, string carID3_Old, string carModel3_Old, string carcolor3_Old)
        {
            var no1Parameter = no1 != null ?
                new ObjectParameter("No1", no1) :
                new ObjectParameter("No1", typeof(string));
    
            var terncodeParameter = terncode != null ?
                new ObjectParameter("terncode", terncode) :
                new ObjectParameter("terncode", typeof(string));
    
            var statustypeParameter = statustype.HasValue ?
                new ObjectParameter("Statustype", statustype) :
                new ObjectParameter("Statustype", typeof(int));
    
            var custnoParameter = custno != null ?
                new ObjectParameter("Custno", custno) :
                new ObjectParameter("Custno", typeof(string));
    
            var fnameParameter = fname != null ?
                new ObjectParameter("Fname", fname) :
                new ObjectParameter("Fname", typeof(string));
    
            var lnameParameter = lname != null ?
                new ObjectParameter("Lname", lname) :
                new ObjectParameter("Lname", typeof(string));
    
            var memberTypeParameter = memberType != null ?
                new ObjectParameter("MemberType", memberType) :
                new ObjectParameter("MemberType", typeof(string));
    
            var dateactiveParameter = dateactive.HasValue ?
                new ObjectParameter("Dateactive", dateactive) :
                new ObjectParameter("Dateactive", typeof(System.DateTime));
    
            var updatebyParameter = updateby != null ?
                new ObjectParameter("Updateby", updateby) :
                new ObjectParameter("Updateby", typeof(string));
    
            var carID_OldParameter = carID_Old != null ?
                new ObjectParameter("CarID_Old", carID_Old) :
                new ObjectParameter("CarID_Old", typeof(string));
    
            var carModel_OldParameter = carModel_Old != null ?
                new ObjectParameter("CarModel_Old", carModel_Old) :
                new ObjectParameter("CarModel_Old", typeof(string));
    
            var carcolor_OldParameter = carcolor_Old != null ?
                new ObjectParameter("Carcolor_Old", carcolor_Old) :
                new ObjectParameter("Carcolor_Old", typeof(string));
    
            var carID2_OldParameter = carID2_Old != null ?
                new ObjectParameter("CarID2_Old", carID2_Old) :
                new ObjectParameter("CarID2_Old", typeof(string));
    
            var carModel2_OldParameter = carModel2_Old != null ?
                new ObjectParameter("CarModel2_Old", carModel2_Old) :
                new ObjectParameter("CarModel2_Old", typeof(string));
    
            var carcolor2_OldParameter = carcolor2_Old != null ?
                new ObjectParameter("Carcolor2_Old", carcolor2_Old) :
                new ObjectParameter("Carcolor2_Old", typeof(string));
    
            var carID3_OldParameter = carID3_Old != null ?
                new ObjectParameter("CarID3_Old", carID3_Old) :
                new ObjectParameter("CarID3_Old", typeof(string));
    
            var carModel3_OldParameter = carModel3_Old != null ?
                new ObjectParameter("CarModel3_Old", carModel3_Old) :
                new ObjectParameter("CarModel3_Old", typeof(string));
    
            var carcolor3_OldParameter = carcolor3_Old != null ?
                new ObjectParameter("Carcolor3_Old", carcolor3_Old) :
                new ObjectParameter("Carcolor3_Old", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("requestCancelMember", no1Parameter, terncodeParameter, statustypeParameter, custnoParameter, fnameParameter, lnameParameter, memberTypeParameter, dateactiveParameter, updatebyParameter, carID_OldParameter, carModel_OldParameter, carcolor_OldParameter, carID2_OldParameter, carModel2_OldParameter, carcolor2_OldParameter, carID3_OldParameter, carModel3_OldParameter, carcolor3_OldParameter);
        }
    
        public virtual int require_chaeng_member(string no1, string terncode, Nullable<int> statustype, string custno, string fname, string lname, string memberType, Nullable<int> changecontacttype, Nullable<int> contacttype_New, string contacttype_Old, string paytype, Nullable<int> changecarid, string carID_New, string carModel_New, string carcolor_New, string carID1_New, string carModel1_New, string carcolor1_New, string carID2_New, string carModel2_New, string carcolor2_New, string carID_Old, string carModel_Old, string carcolor_Old, string carID2_Old, string carModel2_Old, string carcolor2_Old, string carID3_Old, string carModel3_Old, string carcolor3_Old, Nullable<System.DateTime> dateactive, string updateby, string new_Name, string new_lastName, Nullable<int> changename)
        {
            var no1Parameter = no1 != null ?
                new ObjectParameter("No1", no1) :
                new ObjectParameter("No1", typeof(string));
    
            var terncodeParameter = terncode != null ?
                new ObjectParameter("terncode", terncode) :
                new ObjectParameter("terncode", typeof(string));
    
            var statustypeParameter = statustype.HasValue ?
                new ObjectParameter("Statustype", statustype) :
                new ObjectParameter("Statustype", typeof(int));
    
            var custnoParameter = custno != null ?
                new ObjectParameter("Custno", custno) :
                new ObjectParameter("Custno", typeof(string));
    
            var fnameParameter = fname != null ?
                new ObjectParameter("Fname", fname) :
                new ObjectParameter("Fname", typeof(string));
    
            var lnameParameter = lname != null ?
                new ObjectParameter("Lname", lname) :
                new ObjectParameter("Lname", typeof(string));
    
            var memberTypeParameter = memberType != null ?
                new ObjectParameter("MemberType", memberType) :
                new ObjectParameter("MemberType", typeof(string));
    
            var changecontacttypeParameter = changecontacttype.HasValue ?
                new ObjectParameter("Changecontacttype", changecontacttype) :
                new ObjectParameter("Changecontacttype", typeof(int));
    
            var contacttype_NewParameter = contacttype_New.HasValue ?
                new ObjectParameter("Contacttype_New", contacttype_New) :
                new ObjectParameter("Contacttype_New", typeof(int));
    
            var contacttype_OldParameter = contacttype_Old != null ?
                new ObjectParameter("Contacttype_Old", contacttype_Old) :
                new ObjectParameter("Contacttype_Old", typeof(string));
    
            var paytypeParameter = paytype != null ?
                new ObjectParameter("Paytype", paytype) :
                new ObjectParameter("Paytype", typeof(string));
    
            var changecaridParameter = changecarid.HasValue ?
                new ObjectParameter("Changecarid", changecarid) :
                new ObjectParameter("Changecarid", typeof(int));
    
            var carID_NewParameter = carID_New != null ?
                new ObjectParameter("CarID_New", carID_New) :
                new ObjectParameter("CarID_New", typeof(string));
    
            var carModel_NewParameter = carModel_New != null ?
                new ObjectParameter("CarModel_New", carModel_New) :
                new ObjectParameter("CarModel_New", typeof(string));
    
            var carcolor_NewParameter = carcolor_New != null ?
                new ObjectParameter("Carcolor_New", carcolor_New) :
                new ObjectParameter("Carcolor_New", typeof(string));
    
            var carID1_NewParameter = carID1_New != null ?
                new ObjectParameter("CarID1_New", carID1_New) :
                new ObjectParameter("CarID1_New", typeof(string));
    
            var carModel1_NewParameter = carModel1_New != null ?
                new ObjectParameter("CarModel1_New", carModel1_New) :
                new ObjectParameter("CarModel1_New", typeof(string));
    
            var carcolor1_NewParameter = carcolor1_New != null ?
                new ObjectParameter("Carcolor1_New", carcolor1_New) :
                new ObjectParameter("Carcolor1_New", typeof(string));
    
            var carID2_NewParameter = carID2_New != null ?
                new ObjectParameter("CarID2_New", carID2_New) :
                new ObjectParameter("CarID2_New", typeof(string));
    
            var carModel2_NewParameter = carModel2_New != null ?
                new ObjectParameter("CarModel2_New", carModel2_New) :
                new ObjectParameter("CarModel2_New", typeof(string));
    
            var carcolor2_NewParameter = carcolor2_New != null ?
                new ObjectParameter("Carcolor2_New", carcolor2_New) :
                new ObjectParameter("Carcolor2_New", typeof(string));
    
            var carID_OldParameter = carID_Old != null ?
                new ObjectParameter("CarID_Old", carID_Old) :
                new ObjectParameter("CarID_Old", typeof(string));
    
            var carModel_OldParameter = carModel_Old != null ?
                new ObjectParameter("CarModel_Old", carModel_Old) :
                new ObjectParameter("CarModel_Old", typeof(string));
    
            var carcolor_OldParameter = carcolor_Old != null ?
                new ObjectParameter("Carcolor_Old", carcolor_Old) :
                new ObjectParameter("Carcolor_Old", typeof(string));
    
            var carID2_OldParameter = carID2_Old != null ?
                new ObjectParameter("CarID2_Old", carID2_Old) :
                new ObjectParameter("CarID2_Old", typeof(string));
    
            var carModel2_OldParameter = carModel2_Old != null ?
                new ObjectParameter("CarModel2_Old", carModel2_Old) :
                new ObjectParameter("CarModel2_Old", typeof(string));
    
            var carcolor2_OldParameter = carcolor2_Old != null ?
                new ObjectParameter("Carcolor2_Old", carcolor2_Old) :
                new ObjectParameter("Carcolor2_Old", typeof(string));
    
            var carID3_OldParameter = carID3_Old != null ?
                new ObjectParameter("CarID3_Old", carID3_Old) :
                new ObjectParameter("CarID3_Old", typeof(string));
    
            var carModel3_OldParameter = carModel3_Old != null ?
                new ObjectParameter("CarModel3_Old", carModel3_Old) :
                new ObjectParameter("CarModel3_Old", typeof(string));
    
            var carcolor3_OldParameter = carcolor3_Old != null ?
                new ObjectParameter("Carcolor3_Old", carcolor3_Old) :
                new ObjectParameter("Carcolor3_Old", typeof(string));
    
            var dateactiveParameter = dateactive.HasValue ?
                new ObjectParameter("Dateactive", dateactive) :
                new ObjectParameter("Dateactive", typeof(System.DateTime));
    
            var updatebyParameter = updateby != null ?
                new ObjectParameter("Updateby", updateby) :
                new ObjectParameter("Updateby", typeof(string));
    
            var new_NameParameter = new_Name != null ?
                new ObjectParameter("New_Name", new_Name) :
                new ObjectParameter("New_Name", typeof(string));
    
            var new_lastNameParameter = new_lastName != null ?
                new ObjectParameter("New_lastName", new_lastName) :
                new ObjectParameter("New_lastName", typeof(string));
    
            var changenameParameter = changename.HasValue ?
                new ObjectParameter("Changename", changename) :
                new ObjectParameter("Changename", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("require_chaeng_member", no1Parameter, terncodeParameter, statustypeParameter, custnoParameter, fnameParameter, lnameParameter, memberTypeParameter, changecontacttypeParameter, contacttype_NewParameter, contacttype_OldParameter, paytypeParameter, changecaridParameter, carID_NewParameter, carModel_NewParameter, carcolor_NewParameter, carID1_NewParameter, carModel1_NewParameter, carcolor1_NewParameter, carID2_NewParameter, carModel2_NewParameter, carcolor2_NewParameter, carID_OldParameter, carModel_OldParameter, carcolor_OldParameter, carID2_OldParameter, carModel2_OldParameter, carcolor2_OldParameter, carID3_OldParameter, carModel3_OldParameter, carcolor3_OldParameter, dateactiveParameter, updatebyParameter, new_NameParameter, new_lastNameParameter, changenameParameter);
        }
    
        public virtual ObjectResult<rptReportMemberWebStamp_Result> rptReportMemberWebStamp(Nullable<int> cartype, string terncode, string ternSupcode)
        {
            var cartypeParameter = cartype.HasValue ?
                new ObjectParameter("Cartype", cartype) :
                new ObjectParameter("Cartype", typeof(int));
    
            var terncodeParameter = terncode != null ?
                new ObjectParameter("terncode", terncode) :
                new ObjectParameter("terncode", typeof(string));
    
            var ternSupcodeParameter = ternSupcode != null ?
                new ObjectParameter("ternSupcode", ternSupcode) :
                new ObjectParameter("ternSupcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptReportMemberWebStamp_Result>("rptReportMemberWebStamp", cartypeParameter, terncodeParameter, ternSupcodeParameter);
        }
    
        public virtual ObjectResult<select_adminlog_Result> select_adminlog()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<select_adminlog_Result>("select_adminlog");
        }
    
        public virtual ObjectResult<select_alarmeventtop200_Currentdate_Result> select_alarmeventtop200_Currentdate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<select_alarmeventtop200_Currentdate_Result>("select_alarmeventtop200_Currentdate");
        }
    
        public virtual ObjectResult<select_checkinout_Result> select_checkinout()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<select_checkinout_Result>("select_checkinout");
        }
    
        public virtual ObjectResult<select_checkinoutautotext_Result> select_checkinoutautotext(Nullable<System.DateTime> d1, Nullable<System.DateTime> d2, Nullable<int> autotype)
        {
            var d1Parameter = d1.HasValue ?
                new ObjectParameter("d1", d1) :
                new ObjectParameter("d1", typeof(System.DateTime));
    
            var d2Parameter = d2.HasValue ?
                new ObjectParameter("d2", d2) :
                new ObjectParameter("d2", typeof(System.DateTime));
    
            var autotypeParameter = autotype.HasValue ?
                new ObjectParameter("autotype", autotype) :
                new ObjectParameter("autotype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<select_checkinoutautotext_Result>("select_checkinoutautotext", d1Parameter, d2Parameter, autotypeParameter);
        }
    
        public virtual ObjectResult<select_checkinouttop200_currentdate_Result> select_checkinouttop200_currentdate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<select_checkinouttop200_currentdate_Result>("select_checkinouttop200_currentdate");
        }
    
        public virtual ObjectResult<Nullable<int>> select_ParkCountlog(Nullable<System.DateTime> d1, Nullable<System.DateTime> d2, Nullable<int> gate1, Nullable<int> autotype)
        {
            var d1Parameter = d1.HasValue ?
                new ObjectParameter("d1", d1) :
                new ObjectParameter("d1", typeof(System.DateTime));
    
            var d2Parameter = d2.HasValue ?
                new ObjectParameter("d2", d2) :
                new ObjectParameter("d2", typeof(System.DateTime));
    
            var gate1Parameter = gate1.HasValue ?
                new ObjectParameter("gate1", gate1) :
                new ObjectParameter("gate1", typeof(int));
    
            var autotypeParameter = autotype.HasValue ?
                new ObjectParameter("autotype", autotype) :
                new ObjectParameter("autotype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("select_ParkCountlog", d1Parameter, d2Parameter, gate1Parameter, autotypeParameter);
        }
    
        public virtual int select_ParkCountlog2(Nullable<System.DateTime> d1, Nullable<System.DateTime> d2, Nullable<int> gate1, Nullable<int> autotype, ObjectParameter c0, ObjectParameter c1, ObjectParameter c2, ObjectParameter c3, ObjectParameter c4, ObjectParameter c5, ObjectParameter c6, ObjectParameter c7, ObjectParameter c8, ObjectParameter c9, ObjectParameter c10, ObjectParameter c11, ObjectParameter c12, ObjectParameter c13, ObjectParameter c14, ObjectParameter c15, ObjectParameter c16, ObjectParameter c17, ObjectParameter c18, ObjectParameter c19, ObjectParameter c20, ObjectParameter c21, ObjectParameter c22, ObjectParameter c23)
        {
            var d1Parameter = d1.HasValue ?
                new ObjectParameter("d1", d1) :
                new ObjectParameter("d1", typeof(System.DateTime));
    
            var d2Parameter = d2.HasValue ?
                new ObjectParameter("d2", d2) :
                new ObjectParameter("d2", typeof(System.DateTime));
    
            var gate1Parameter = gate1.HasValue ?
                new ObjectParameter("gate1", gate1) :
                new ObjectParameter("gate1", typeof(int));
    
            var autotypeParameter = autotype.HasValue ?
                new ObjectParameter("autotype", autotype) :
                new ObjectParameter("autotype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("select_ParkCountlog2", d1Parameter, d2Parameter, gate1Parameter, autotypeParameter, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23);
        }
    
        public virtual int select_Parking_INVitemno(Nullable<System.DateTime> d1, Nullable<System.DateTime> d2, Nullable<int> b0, ObjectParameter a0)
        {
            var d1Parameter = d1.HasValue ?
                new ObjectParameter("d1", d1) :
                new ObjectParameter("d1", typeof(System.DateTime));
    
            var d2Parameter = d2.HasValue ?
                new ObjectParameter("d2", d2) :
                new ObjectParameter("d2", typeof(System.DateTime));
    
            var b0Parameter = b0.HasValue ?
                new ObjectParameter("b0", b0) :
                new ObjectParameter("b0", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("select_Parking_INVitemno", d1Parameter, d2Parameter, b0Parameter, a0);
        }
    
        public virtual int select_POS_Fooditemno(Nullable<System.DateTime> d1, Nullable<System.DateTime> d2, Nullable<int> b0, ObjectParameter a0)
        {
            var d1Parameter = d1.HasValue ?
                new ObjectParameter("d1", d1) :
                new ObjectParameter("d1", typeof(System.DateTime));
    
            var d2Parameter = d2.HasValue ?
                new ObjectParameter("d2", d2) :
                new ObjectParameter("d2", typeof(System.DateTime));
    
            var b0Parameter = b0.HasValue ?
                new ObjectParameter("b0", b0) :
                new ObjectParameter("b0", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("select_POS_Fooditemno", d1Parameter, d2Parameter, b0Parameter, a0);
        }
    
        public virtual ObjectResult<select_POS_MostSpend_Result> select_POS_MostSpend(Nullable<System.DateTime> d1, Nullable<System.DateTime> d2)
        {
            var d1Parameter = d1.HasValue ?
                new ObjectParameter("d1", d1) :
                new ObjectParameter("d1", typeof(System.DateTime));
    
            var d2Parameter = d2.HasValue ?
                new ObjectParameter("d2", d2) :
                new ObjectParameter("d2", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<select_POS_MostSpend_Result>("select_POS_MostSpend", d1Parameter, d2Parameter);
        }
    
        public virtual ObjectResult<select_user_Result> select_user()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<select_user_Result>("select_user");
        }
    
        public virtual int select_User_FoodCredit(Nullable<System.DateTime> d1, string u1, ObjectParameter a0)
        {
            var d1Parameter = d1.HasValue ?
                new ObjectParameter("d1", d1) :
                new ObjectParameter("d1", typeof(System.DateTime));
    
            var u1Parameter = u1 != null ?
                new ObjectParameter("U1", u1) :
                new ObjectParameter("U1", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("select_User_FoodCredit", d1Parameter, u1Parameter, a0);
        }
    
        public virtual ObjectResult<select_user_log_Result> select_user_log()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<select_user_log_Result>("select_user_log");
        }
    
        public virtual ObjectResult<select_user_log_top100currentdate_Result> select_user_log_top100currentdate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<select_user_log_top100currentdate_Result>("select_user_log_top100currentdate");
        }
    
        public virtual ObjectResult<select_user_log_top5currentdate_Result> select_user_log_top5currentdate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<select_user_log_top5currentdate_Result>("select_user_log_top5currentdate");
        }
    
        public virtual ObjectResult<select_useronly_Result> select_useronly()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<select_useronly_Result>("select_useronly");
        }
    
        public virtual ObjectResult<Nullable<int>> select_VisitorCountlog(Nullable<System.DateTime> d1, Nullable<System.DateTime> d2, Nullable<int> gate1, Nullable<int> autotype)
        {
            var d1Parameter = d1.HasValue ?
                new ObjectParameter("d1", d1) :
                new ObjectParameter("d1", typeof(System.DateTime));
    
            var d2Parameter = d2.HasValue ?
                new ObjectParameter("d2", d2) :
                new ObjectParameter("d2", typeof(System.DateTime));
    
            var gate1Parameter = gate1.HasValue ?
                new ObjectParameter("gate1", gate1) :
                new ObjectParameter("gate1", typeof(int));
    
            var autotypeParameter = autotype.HasValue ?
                new ObjectParameter("autotype", autotype) :
                new ObjectParameter("autotype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("select_VisitorCountlog", d1Parameter, d2Parameter, gate1Parameter, autotypeParameter);
        }
    
        public virtual int select_VisitorCountlog2(Nullable<System.DateTime> d1, Nullable<System.DateTime> d2, Nullable<int> gate1, Nullable<int> autotype, ObjectParameter c0, ObjectParameter c1, ObjectParameter c2, ObjectParameter c3, ObjectParameter c4, ObjectParameter c5, ObjectParameter c6, ObjectParameter c7, ObjectParameter c8, ObjectParameter c9, ObjectParameter c10, ObjectParameter c11, ObjectParameter c12, ObjectParameter c13, ObjectParameter c14, ObjectParameter c15, ObjectParameter c16, ObjectParameter c17, ObjectParameter c18, ObjectParameter c19, ObjectParameter c20, ObjectParameter c21, ObjectParameter c22, ObjectParameter c23)
        {
            var d1Parameter = d1.HasValue ?
                new ObjectParameter("d1", d1) :
                new ObjectParameter("d1", typeof(System.DateTime));
    
            var d2Parameter = d2.HasValue ?
                new ObjectParameter("d2", d2) :
                new ObjectParameter("d2", typeof(System.DateTime));
    
            var gate1Parameter = gate1.HasValue ?
                new ObjectParameter("gate1", gate1) :
                new ObjectParameter("gate1", typeof(int));
    
            var autotypeParameter = autotype.HasValue ?
                new ObjectParameter("autotype", autotype) :
                new ObjectParameter("autotype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("select_VisitorCountlog2", d1Parameter, d2Parameter, gate1Parameter, autotypeParameter, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23);
        }
    
        public virtual int select_VisitorCountlog3(Nullable<System.DateTime> d1, Nullable<System.DateTime> d2, Nullable<int> gate1, Nullable<int> autotype, ObjectParameter a0, ObjectParameter a1, ObjectParameter a2, ObjectParameter a3, ObjectParameter a4, ObjectParameter a5, ObjectParameter a6, ObjectParameter a7)
        {
            var d1Parameter = d1.HasValue ?
                new ObjectParameter("d1", d1) :
                new ObjectParameter("d1", typeof(System.DateTime));
    
            var d2Parameter = d2.HasValue ?
                new ObjectParameter("d2", d2) :
                new ObjectParameter("d2", typeof(System.DateTime));
    
            var gate1Parameter = gate1.HasValue ?
                new ObjectParameter("gate1", gate1) :
                new ObjectParameter("gate1", typeof(int));
    
            var autotypeParameter = autotype.HasValue ?
                new ObjectParameter("autotype", autotype) :
                new ObjectParameter("autotype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("select_VisitorCountlog3", d1Parameter, d2Parameter, gate1Parameter, autotypeParameter, a0, a1, a2, a3, a4, a5, a6, a7);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int Upadte_PkAdminsystem(Nullable<int> admin_level_id, string adminname, string password1, string name, string ternsubcode, string terncode, Nullable<int> loginflag, Nullable<System.DateTime> last_Upd, Nullable<int> person_ID, Nullable<System.DateTime> syndate)
        {
            var admin_level_idParameter = admin_level_id.HasValue ?
                new ObjectParameter("admin_level_id", admin_level_id) :
                new ObjectParameter("admin_level_id", typeof(int));
    
            var adminnameParameter = adminname != null ?
                new ObjectParameter("adminname", adminname) :
                new ObjectParameter("adminname", typeof(string));
    
            var password1Parameter = password1 != null ?
                new ObjectParameter("password1", password1) :
                new ObjectParameter("password1", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var ternsubcodeParameter = ternsubcode != null ?
                new ObjectParameter("Ternsubcode", ternsubcode) :
                new ObjectParameter("Ternsubcode", typeof(string));
    
            var terncodeParameter = terncode != null ?
                new ObjectParameter("Terncode", terncode) :
                new ObjectParameter("Terncode", typeof(string));
    
            var loginflagParameter = loginflag.HasValue ?
                new ObjectParameter("loginflag", loginflag) :
                new ObjectParameter("loginflag", typeof(int));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Upadte_PkAdminsystem", admin_level_idParameter, adminnameParameter, password1Parameter, nameParameter, ternsubcodeParameter, terncodeParameter, loginflagParameter, last_UpdParameter, person_IDParameter, syndateParameter);
        }
    
        public virtual int update_alarmevent_monitor()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("update_alarmevent_monitor");
        }
    
        public virtual int update_checktimetext(string userid, Nullable<System.DateTime> checktime, Nullable<int> verifycode, Nullable<int> tid, Nullable<short> door)
        {
            var useridParameter = userid != null ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(string));
    
            var checktimeParameter = checktime.HasValue ?
                new ObjectParameter("checktime", checktime) :
                new ObjectParameter("checktime", typeof(System.DateTime));
    
            var verifycodeParameter = verifycode.HasValue ?
                new ObjectParameter("verifycode", verifycode) :
                new ObjectParameter("verifycode", typeof(int));
    
            var tidParameter = tid.HasValue ?
                new ObjectParameter("tid", tid) :
                new ObjectParameter("tid", typeof(int));
    
            var doorParameter = door.HasValue ?
                new ObjectParameter("door", door) :
                new ObjectParameter("door", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("update_checktimetext", useridParameter, checktimeParameter, verifycodeParameter, tidParameter, doorParameter);
        }
    
        public virtual int Update_Equip(Nullable<int> equip_ID, string site_ID, Nullable<int> loc_ID, string zdesc, Nullable<int> mode, Nullable<int> status, string ipaddress, string servername, string username, string password1, Nullable<System.DateTime> last_Upd, Nullable<int> person_ID, Nullable<System.DateTime> syndate)
        {
            var equip_IDParameter = equip_ID.HasValue ?
                new ObjectParameter("Equip_ID", equip_ID) :
                new ObjectParameter("Equip_ID", typeof(int));
    
            var site_IDParameter = site_ID != null ?
                new ObjectParameter("Site_ID", site_ID) :
                new ObjectParameter("Site_ID", typeof(string));
    
            var loc_IDParameter = loc_ID.HasValue ?
                new ObjectParameter("Loc_ID", loc_ID) :
                new ObjectParameter("Loc_ID", typeof(int));
    
            var zdescParameter = zdesc != null ?
                new ObjectParameter("Zdesc", zdesc) :
                new ObjectParameter("Zdesc", typeof(string));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var ipaddressParameter = ipaddress != null ?
                new ObjectParameter("Ipaddress", ipaddress) :
                new ObjectParameter("Ipaddress", typeof(string));
    
            var servernameParameter = servername != null ?
                new ObjectParameter("Servername", servername) :
                new ObjectParameter("Servername", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var password1Parameter = password1 != null ?
                new ObjectParameter("password1", password1) :
                new ObjectParameter("password1", typeof(string));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_Equip", equip_IDParameter, site_IDParameter, loc_IDParameter, zdescParameter, modeParameter, statusParameter, ipaddressParameter, servernameParameter, usernameParameter, password1Parameter, last_UpdParameter, person_IDParameter, syndateParameter);
        }
    
        public virtual int Update_InOutTran(string inOutTran_ID, string scr_No, string cscMain_ID, string rabbit_ID, Nullable<int> useMin, string carID, Nullable<int> site_Id, Nullable<int> loc_ID, Nullable<int> equip_ID, Nullable<short> trans_Event, Nullable<int> lastLoc_ID, Nullable<int> lastEquip_id, Nullable<int> rides_Remain, Nullable<decimal> addDeduct_Val, Nullable<decimal> parkingTime_Val, Nullable<System.DateTime> indate, Nullable<System.DateTime> outdate, Nullable<decimal> sumTotal, Nullable<int> hourTotal, string custNo, Nullable<int> typecard, string zUser, string eUser, string flagPost, string flagStatus, Nullable<System.DateTime> parkTime, string paymonth, Nullable<int> person_ID, Nullable<System.DateTime> last_Upd, string customerID, string lost_Card, string lost_Slip, Nullable<decimal> vStamp1, Nullable<decimal> vStamp2, Nullable<decimal> vStamp3, Nullable<decimal> vStamp4, string mark_rec, Nullable<int> stampMin1, Nullable<int> stampMin2, Nullable<int> stampMin3, Nullable<int> stampMin4, Nullable<decimal> lost_Card_Fine, Nullable<decimal> lost_Slip_Fine, Nullable<System.DateTime> dateIn1, Nullable<System.DateTime> dateOut1, Nullable<System.TimeSpan> timeIn1, Nullable<System.TimeSpan> timeOut1, string picin1, string picin2, string picin3, string picout1, string picout2, string picout3, Nullable<int> completeFlag, Nullable<int> person_ID1, Nullable<System.DateTime> last_Upd1, Nullable<int> serviceStatus, Nullable<System.DateTime> syndate, Nullable<int> sf)
        {
            var inOutTran_IDParameter = inOutTran_ID != null ?
                new ObjectParameter("InOutTran_ID", inOutTran_ID) :
                new ObjectParameter("InOutTran_ID", typeof(string));
    
            var scr_NoParameter = scr_No != null ?
                new ObjectParameter("Scr_No", scr_No) :
                new ObjectParameter("Scr_No", typeof(string));
    
            var cscMain_IDParameter = cscMain_ID != null ?
                new ObjectParameter("CscMain_ID", cscMain_ID) :
                new ObjectParameter("CscMain_ID", typeof(string));
    
            var rabbit_IDParameter = rabbit_ID != null ?
                new ObjectParameter("Rabbit_ID", rabbit_ID) :
                new ObjectParameter("Rabbit_ID", typeof(string));
    
            var useMinParameter = useMin.HasValue ?
                new ObjectParameter("UseMin", useMin) :
                new ObjectParameter("UseMin", typeof(int));
    
            var carIDParameter = carID != null ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(string));
    
            var site_IdParameter = site_Id.HasValue ?
                new ObjectParameter("Site_Id", site_Id) :
                new ObjectParameter("Site_Id", typeof(int));
    
            var loc_IDParameter = loc_ID.HasValue ?
                new ObjectParameter("Loc_ID", loc_ID) :
                new ObjectParameter("Loc_ID", typeof(int));
    
            var equip_IDParameter = equip_ID.HasValue ?
                new ObjectParameter("Equip_ID", equip_ID) :
                new ObjectParameter("Equip_ID", typeof(int));
    
            var trans_EventParameter = trans_Event.HasValue ?
                new ObjectParameter("Trans_Event", trans_Event) :
                new ObjectParameter("Trans_Event", typeof(short));
    
            var lastLoc_IDParameter = lastLoc_ID.HasValue ?
                new ObjectParameter("LastLoc_ID", lastLoc_ID) :
                new ObjectParameter("LastLoc_ID", typeof(int));
    
            var lastEquip_idParameter = lastEquip_id.HasValue ?
                new ObjectParameter("LastEquip_id", lastEquip_id) :
                new ObjectParameter("LastEquip_id", typeof(int));
    
            var rides_RemainParameter = rides_Remain.HasValue ?
                new ObjectParameter("Rides_Remain", rides_Remain) :
                new ObjectParameter("Rides_Remain", typeof(int));
    
            var addDeduct_ValParameter = addDeduct_Val.HasValue ?
                new ObjectParameter("AddDeduct_Val", addDeduct_Val) :
                new ObjectParameter("AddDeduct_Val", typeof(decimal));
    
            var parkingTime_ValParameter = parkingTime_Val.HasValue ?
                new ObjectParameter("ParkingTime_Val", parkingTime_Val) :
                new ObjectParameter("ParkingTime_Val", typeof(decimal));
    
            var indateParameter = indate.HasValue ?
                new ObjectParameter("Indate", indate) :
                new ObjectParameter("Indate", typeof(System.DateTime));
    
            var outdateParameter = outdate.HasValue ?
                new ObjectParameter("Outdate", outdate) :
                new ObjectParameter("Outdate", typeof(System.DateTime));
    
            var sumTotalParameter = sumTotal.HasValue ?
                new ObjectParameter("SumTotal", sumTotal) :
                new ObjectParameter("SumTotal", typeof(decimal));
    
            var hourTotalParameter = hourTotal.HasValue ?
                new ObjectParameter("HourTotal", hourTotal) :
                new ObjectParameter("HourTotal", typeof(int));
    
            var custNoParameter = custNo != null ?
                new ObjectParameter("CustNo", custNo) :
                new ObjectParameter("CustNo", typeof(string));
    
            var typecardParameter = typecard.HasValue ?
                new ObjectParameter("Typecard", typecard) :
                new ObjectParameter("Typecard", typeof(int));
    
            var zUserParameter = zUser != null ?
                new ObjectParameter("ZUser", zUser) :
                new ObjectParameter("ZUser", typeof(string));
    
            var eUserParameter = eUser != null ?
                new ObjectParameter("EUser", eUser) :
                new ObjectParameter("EUser", typeof(string));
    
            var flagPostParameter = flagPost != null ?
                new ObjectParameter("FlagPost", flagPost) :
                new ObjectParameter("FlagPost", typeof(string));
    
            var flagStatusParameter = flagStatus != null ?
                new ObjectParameter("FlagStatus", flagStatus) :
                new ObjectParameter("FlagStatus", typeof(string));
    
            var parkTimeParameter = parkTime.HasValue ?
                new ObjectParameter("ParkTime", parkTime) :
                new ObjectParameter("ParkTime", typeof(System.DateTime));
    
            var paymonthParameter = paymonth != null ?
                new ObjectParameter("Paymonth", paymonth) :
                new ObjectParameter("Paymonth", typeof(string));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            var lost_CardParameter = lost_Card != null ?
                new ObjectParameter("Lost_Card", lost_Card) :
                new ObjectParameter("Lost_Card", typeof(string));
    
            var lost_SlipParameter = lost_Slip != null ?
                new ObjectParameter("Lost_Slip", lost_Slip) :
                new ObjectParameter("Lost_Slip", typeof(string));
    
            var vStamp1Parameter = vStamp1.HasValue ?
                new ObjectParameter("VStamp1", vStamp1) :
                new ObjectParameter("VStamp1", typeof(decimal));
    
            var vStamp2Parameter = vStamp2.HasValue ?
                new ObjectParameter("VStamp2", vStamp2) :
                new ObjectParameter("VStamp2", typeof(decimal));
    
            var vStamp3Parameter = vStamp3.HasValue ?
                new ObjectParameter("VStamp3", vStamp3) :
                new ObjectParameter("VStamp3", typeof(decimal));
    
            var vStamp4Parameter = vStamp4.HasValue ?
                new ObjectParameter("VStamp4", vStamp4) :
                new ObjectParameter("VStamp4", typeof(decimal));
    
            var mark_recParameter = mark_rec != null ?
                new ObjectParameter("Mark_rec", mark_rec) :
                new ObjectParameter("Mark_rec", typeof(string));
    
            var stampMin1Parameter = stampMin1.HasValue ?
                new ObjectParameter("StampMin1", stampMin1) :
                new ObjectParameter("StampMin1", typeof(int));
    
            var stampMin2Parameter = stampMin2.HasValue ?
                new ObjectParameter("StampMin2", stampMin2) :
                new ObjectParameter("StampMin2", typeof(int));
    
            var stampMin3Parameter = stampMin3.HasValue ?
                new ObjectParameter("StampMin3", stampMin3) :
                new ObjectParameter("StampMin3", typeof(int));
    
            var stampMin4Parameter = stampMin4.HasValue ?
                new ObjectParameter("StampMin4", stampMin4) :
                new ObjectParameter("StampMin4", typeof(int));
    
            var lost_Card_FineParameter = lost_Card_Fine.HasValue ?
                new ObjectParameter("Lost_Card_Fine", lost_Card_Fine) :
                new ObjectParameter("Lost_Card_Fine", typeof(decimal));
    
            var lost_Slip_FineParameter = lost_Slip_Fine.HasValue ?
                new ObjectParameter("Lost_Slip_Fine", lost_Slip_Fine) :
                new ObjectParameter("Lost_Slip_Fine", typeof(decimal));
    
            var dateIn1Parameter = dateIn1.HasValue ?
                new ObjectParameter("DateIn1", dateIn1) :
                new ObjectParameter("DateIn1", typeof(System.DateTime));
    
            var dateOut1Parameter = dateOut1.HasValue ?
                new ObjectParameter("DateOut1", dateOut1) :
                new ObjectParameter("DateOut1", typeof(System.DateTime));
    
            var timeIn1Parameter = timeIn1.HasValue ?
                new ObjectParameter("TimeIn1", timeIn1) :
                new ObjectParameter("TimeIn1", typeof(System.TimeSpan));
    
            var timeOut1Parameter = timeOut1.HasValue ?
                new ObjectParameter("TimeOut1", timeOut1) :
                new ObjectParameter("TimeOut1", typeof(System.TimeSpan));
    
            var picin1Parameter = picin1 != null ?
                new ObjectParameter("Picin1", picin1) :
                new ObjectParameter("Picin1", typeof(string));
    
            var picin2Parameter = picin2 != null ?
                new ObjectParameter("Picin2", picin2) :
                new ObjectParameter("Picin2", typeof(string));
    
            var picin3Parameter = picin3 != null ?
                new ObjectParameter("Picin3", picin3) :
                new ObjectParameter("Picin3", typeof(string));
    
            var picout1Parameter = picout1 != null ?
                new ObjectParameter("Picout1", picout1) :
                new ObjectParameter("Picout1", typeof(string));
    
            var picout2Parameter = picout2 != null ?
                new ObjectParameter("Picout2", picout2) :
                new ObjectParameter("Picout2", typeof(string));
    
            var picout3Parameter = picout3 != null ?
                new ObjectParameter("Picout3", picout3) :
                new ObjectParameter("Picout3", typeof(string));
    
            var completeFlagParameter = completeFlag.HasValue ?
                new ObjectParameter("CompleteFlag", completeFlag) :
                new ObjectParameter("CompleteFlag", typeof(int));
    
            var person_ID1Parameter = person_ID1.HasValue ?
                new ObjectParameter("Person_ID1", person_ID1) :
                new ObjectParameter("Person_ID1", typeof(int));
    
            var last_Upd1Parameter = last_Upd1.HasValue ?
                new ObjectParameter("Last_Upd1", last_Upd1) :
                new ObjectParameter("Last_Upd1", typeof(System.DateTime));
    
            var serviceStatusParameter = serviceStatus.HasValue ?
                new ObjectParameter("ServiceStatus", serviceStatus) :
                new ObjectParameter("ServiceStatus", typeof(int));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            var sfParameter = sf.HasValue ?
                new ObjectParameter("sf", sf) :
                new ObjectParameter("sf", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_InOutTran", inOutTran_IDParameter, scr_NoParameter, cscMain_IDParameter, rabbit_IDParameter, useMinParameter, carIDParameter, site_IdParameter, loc_IDParameter, equip_IDParameter, trans_EventParameter, lastLoc_IDParameter, lastEquip_idParameter, rides_RemainParameter, addDeduct_ValParameter, parkingTime_ValParameter, indateParameter, outdateParameter, sumTotalParameter, hourTotalParameter, custNoParameter, typecardParameter, zUserParameter, eUserParameter, flagPostParameter, flagStatusParameter, parkTimeParameter, paymonthParameter, person_IDParameter, last_UpdParameter, customerIDParameter, lost_CardParameter, lost_SlipParameter, vStamp1Parameter, vStamp2Parameter, vStamp3Parameter, vStamp4Parameter, mark_recParameter, stampMin1Parameter, stampMin2Parameter, stampMin3Parameter, stampMin4Parameter, lost_Card_FineParameter, lost_Slip_FineParameter, dateIn1Parameter, dateOut1Parameter, timeIn1Parameter, timeOut1Parameter, picin1Parameter, picin2Parameter, picin3Parameter, picout1Parameter, picout2Parameter, picout3Parameter, completeFlagParameter, person_ID1Parameter, last_Upd1Parameter, serviceStatusParameter, syndateParameter, sfParameter);
        }
    
        public virtual int Update_Licenseplate_card(string custno, string carid, string carmodel, string carid2, string carmodel2, string fname, string lname, Nullable<int> sf, Nullable<System.DateTime> last_upd)
        {
            var custnoParameter = custno != null ?
                new ObjectParameter("custno", custno) :
                new ObjectParameter("custno", typeof(string));
    
            var caridParameter = carid != null ?
                new ObjectParameter("carid", carid) :
                new ObjectParameter("carid", typeof(string));
    
            var carmodelParameter = carmodel != null ?
                new ObjectParameter("carmodel", carmodel) :
                new ObjectParameter("carmodel", typeof(string));
    
            var carid2Parameter = carid2 != null ?
                new ObjectParameter("carid2", carid2) :
                new ObjectParameter("carid2", typeof(string));
    
            var carmodel2Parameter = carmodel2 != null ?
                new ObjectParameter("carmodel2", carmodel2) :
                new ObjectParameter("carmodel2", typeof(string));
    
            var fnameParameter = fname != null ?
                new ObjectParameter("fname", fname) :
                new ObjectParameter("fname", typeof(string));
    
            var lnameParameter = lname != null ?
                new ObjectParameter("lname", lname) :
                new ObjectParameter("lname", typeof(string));
    
            var sfParameter = sf.HasValue ?
                new ObjectParameter("sf", sf) :
                new ObjectParameter("sf", typeof(int));
    
            var last_updParameter = last_upd.HasValue ?
                new ObjectParameter("last_upd", last_upd) :
                new ObjectParameter("last_upd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_Licenseplate_card", custnoParameter, caridParameter, carmodelParameter, carid2Parameter, carmodel2Parameter, fnameParameter, lnameParameter, sfParameter, last_updParameter);
        }
    
        public virtual int Update_Licenseplate_card_V1(string custno, string fname, string lname, Nullable<System.DateTime> firstuser, Nullable<System.DateTime> expdate, string cardcontact, string occupied, string groupmember, string statuspay, string pay, Nullable<System.DateTime> dateactive, Nullable<int> activecard, Nullable<int> issueloc_id, Nullable<int> issueLoc_ID2, Nullable<System.DateTime> firstusermotor, Nullable<System.DateTime> expdatemotor, string cardcontactmotor, string occupiedmotor, string groupmembermotor, string statuspaymotor, string paymotor, Nullable<System.DateTime> dateactivemotor, Nullable<int> activecardmotor, Nullable<int> issueloc_idmotor, Nullable<int> issueLoc_ID2motor, Nullable<int> sf, Nullable<System.DateTime> last_upd)
        {
            var custnoParameter = custno != null ?
                new ObjectParameter("custno", custno) :
                new ObjectParameter("custno", typeof(string));
    
            var fnameParameter = fname != null ?
                new ObjectParameter("fname", fname) :
                new ObjectParameter("fname", typeof(string));
    
            var lnameParameter = lname != null ?
                new ObjectParameter("lname", lname) :
                new ObjectParameter("lname", typeof(string));
    
            var firstuserParameter = firstuser.HasValue ?
                new ObjectParameter("firstuser", firstuser) :
                new ObjectParameter("firstuser", typeof(System.DateTime));
    
            var expdateParameter = expdate.HasValue ?
                new ObjectParameter("expdate", expdate) :
                new ObjectParameter("expdate", typeof(System.DateTime));
    
            var cardcontactParameter = cardcontact != null ?
                new ObjectParameter("cardcontact", cardcontact) :
                new ObjectParameter("cardcontact", typeof(string));
    
            var occupiedParameter = occupied != null ?
                new ObjectParameter("occupied", occupied) :
                new ObjectParameter("occupied", typeof(string));
    
            var groupmemberParameter = groupmember != null ?
                new ObjectParameter("groupmember", groupmember) :
                new ObjectParameter("groupmember", typeof(string));
    
            var statuspayParameter = statuspay != null ?
                new ObjectParameter("statuspay", statuspay) :
                new ObjectParameter("statuspay", typeof(string));
    
            var payParameter = pay != null ?
                new ObjectParameter("pay", pay) :
                new ObjectParameter("pay", typeof(string));
    
            var dateactiveParameter = dateactive.HasValue ?
                new ObjectParameter("dateactive", dateactive) :
                new ObjectParameter("dateactive", typeof(System.DateTime));
    
            var activecardParameter = activecard.HasValue ?
                new ObjectParameter("activecard", activecard) :
                new ObjectParameter("activecard", typeof(int));
    
            var issueloc_idParameter = issueloc_id.HasValue ?
                new ObjectParameter("issueloc_id", issueloc_id) :
                new ObjectParameter("issueloc_id", typeof(int));
    
            var issueLoc_ID2Parameter = issueLoc_ID2.HasValue ?
                new ObjectParameter("IssueLoc_ID2", issueLoc_ID2) :
                new ObjectParameter("IssueLoc_ID2", typeof(int));
    
            var firstusermotorParameter = firstusermotor.HasValue ?
                new ObjectParameter("firstusermotor", firstusermotor) :
                new ObjectParameter("firstusermotor", typeof(System.DateTime));
    
            var expdatemotorParameter = expdatemotor.HasValue ?
                new ObjectParameter("expdatemotor", expdatemotor) :
                new ObjectParameter("expdatemotor", typeof(System.DateTime));
    
            var cardcontactmotorParameter = cardcontactmotor != null ?
                new ObjectParameter("cardcontactmotor", cardcontactmotor) :
                new ObjectParameter("cardcontactmotor", typeof(string));
    
            var occupiedmotorParameter = occupiedmotor != null ?
                new ObjectParameter("occupiedmotor", occupiedmotor) :
                new ObjectParameter("occupiedmotor", typeof(string));
    
            var groupmembermotorParameter = groupmembermotor != null ?
                new ObjectParameter("groupmembermotor", groupmembermotor) :
                new ObjectParameter("groupmembermotor", typeof(string));
    
            var statuspaymotorParameter = statuspaymotor != null ?
                new ObjectParameter("statuspaymotor", statuspaymotor) :
                new ObjectParameter("statuspaymotor", typeof(string));
    
            var paymotorParameter = paymotor != null ?
                new ObjectParameter("paymotor", paymotor) :
                new ObjectParameter("paymotor", typeof(string));
    
            var dateactivemotorParameter = dateactivemotor.HasValue ?
                new ObjectParameter("dateactivemotor", dateactivemotor) :
                new ObjectParameter("dateactivemotor", typeof(System.DateTime));
    
            var activecardmotorParameter = activecardmotor.HasValue ?
                new ObjectParameter("activecardmotor", activecardmotor) :
                new ObjectParameter("activecardmotor", typeof(int));
    
            var issueloc_idmotorParameter = issueloc_idmotor.HasValue ?
                new ObjectParameter("issueloc_idmotor", issueloc_idmotor) :
                new ObjectParameter("issueloc_idmotor", typeof(int));
    
            var issueLoc_ID2motorParameter = issueLoc_ID2motor.HasValue ?
                new ObjectParameter("IssueLoc_ID2motor", issueLoc_ID2motor) :
                new ObjectParameter("IssueLoc_ID2motor", typeof(int));
    
            var sfParameter = sf.HasValue ?
                new ObjectParameter("sf", sf) :
                new ObjectParameter("sf", typeof(int));
    
            var last_updParameter = last_upd.HasValue ?
                new ObjectParameter("last_upd", last_upd) :
                new ObjectParameter("last_upd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_Licenseplate_card_V1", custnoParameter, fnameParameter, lnameParameter, firstuserParameter, expdateParameter, cardcontactParameter, occupiedParameter, groupmemberParameter, statuspayParameter, payParameter, dateactiveParameter, activecardParameter, issueloc_idParameter, issueLoc_ID2Parameter, firstusermotorParameter, expdatemotorParameter, cardcontactmotorParameter, occupiedmotorParameter, groupmembermotorParameter, statuspaymotorParameter, paymotorParameter, dateactivemotorParameter, activecardmotorParameter, issueloc_idmotorParameter, issueLoc_ID2motorParameter, sfParameter, last_updParameter);
        }
    
        public virtual int Update_Licenseplate_userinfo(string badgenumber, string carid, string carmodel)
        {
            var badgenumberParameter = badgenumber != null ?
                new ObjectParameter("badgenumber", badgenumber) :
                new ObjectParameter("badgenumber", typeof(string));
    
            var caridParameter = carid != null ?
                new ObjectParameter("carid", carid) :
                new ObjectParameter("carid", typeof(string));
    
            var carmodelParameter = carmodel != null ?
                new ObjectParameter("carmodel", carmodel) :
                new ObjectParameter("carmodel", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_Licenseplate_userinfo", badgenumberParameter, caridParameter, carmodelParameter);
        }
    
        public virtual int Update_PKAdminsystem_levelsub(Nullable<int> admin_level_id, Nullable<int> htag1, Nullable<int> tag1, string topic1, Nullable<int> active1, Nullable<System.DateTime> last_Upd, Nullable<int> person_ID, Nullable<System.DateTime> syndate)
        {
            var admin_level_idParameter = admin_level_id.HasValue ?
                new ObjectParameter("admin_level_id", admin_level_id) :
                new ObjectParameter("admin_level_id", typeof(int));
    
            var htag1Parameter = htag1.HasValue ?
                new ObjectParameter("Htag1", htag1) :
                new ObjectParameter("Htag1", typeof(int));
    
            var tag1Parameter = tag1.HasValue ?
                new ObjectParameter("Tag1", tag1) :
                new ObjectParameter("Tag1", typeof(int));
    
            var topic1Parameter = topic1 != null ?
                new ObjectParameter("Topic1", topic1) :
                new ObjectParameter("Topic1", typeof(string));
    
            var active1Parameter = active1.HasValue ?
                new ObjectParameter("Active1", active1) :
                new ObjectParameter("Active1", typeof(int));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_PKAdminsystem_levelsub", admin_level_idParameter, htag1Parameter, tag1Parameter, topic1Parameter, active1Parameter, last_UpdParameter, person_IDParameter, syndateParameter);
        }
    
        public virtual int Update_PkAdminweb(Nullable<int> admin_level_id, string adminname, string password1, string name, string ternsubcode, string terncode, string iplogin, Nullable<System.DateTime> last_Upd, Nullable<int> person_ID, Nullable<System.DateTime> syndate)
        {
            var admin_level_idParameter = admin_level_id.HasValue ?
                new ObjectParameter("admin_level_id", admin_level_id) :
                new ObjectParameter("admin_level_id", typeof(int));
    
            var adminnameParameter = adminname != null ?
                new ObjectParameter("adminname", adminname) :
                new ObjectParameter("adminname", typeof(string));
    
            var password1Parameter = password1 != null ?
                new ObjectParameter("password1", password1) :
                new ObjectParameter("password1", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var ternsubcodeParameter = ternsubcode != null ?
                new ObjectParameter("Ternsubcode", ternsubcode) :
                new ObjectParameter("Ternsubcode", typeof(string));
    
            var terncodeParameter = terncode != null ?
                new ObjectParameter("Terncode", terncode) :
                new ObjectParameter("Terncode", typeof(string));
    
            var iploginParameter = iplogin != null ?
                new ObjectParameter("Iplogin", iplogin) :
                new ObjectParameter("Iplogin", typeof(string));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_PkAdminweb", admin_level_idParameter, adminnameParameter, password1Parameter, nameParameter, ternsubcodeParameter, terncodeParameter, iploginParameter, last_UpdParameter, person_IDParameter, syndateParameter);
        }
    
        public virtual int Update_Pkadminweb_levelsub(Nullable<int> admin_level_id, Nullable<int> htag1, Nullable<int> tag1, string topic1, Nullable<int> active1, Nullable<System.DateTime> last_Upd, Nullable<int> person_ID, Nullable<System.DateTime> syndate)
        {
            var admin_level_idParameter = admin_level_id.HasValue ?
                new ObjectParameter("admin_level_id", admin_level_id) :
                new ObjectParameter("admin_level_id", typeof(int));
    
            var htag1Parameter = htag1.HasValue ?
                new ObjectParameter("Htag1", htag1) :
                new ObjectParameter("Htag1", typeof(int));
    
            var tag1Parameter = tag1.HasValue ?
                new ObjectParameter("Tag1", tag1) :
                new ObjectParameter("Tag1", typeof(int));
    
            var topic1Parameter = topic1 != null ?
                new ObjectParameter("Topic1", topic1) :
                new ObjectParameter("Topic1", typeof(string));
    
            var active1Parameter = active1.HasValue ?
                new ObjectParameter("Active1", active1) :
                new ObjectParameter("Active1", typeof(int));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_Pkadminweb_levelsub", admin_level_idParameter, htag1Parameter, tag1Parameter, topic1Parameter, active1Parameter, last_UpdParameter, person_IDParameter, syndateParameter);
        }
    
        public virtual int Update_PkCard(string scr_No, string cscMain_ID, string rabbit_ID, string custNo, string fname, string lname, string sex, string tel, Nullable<System.DateTime> birthday, string terncode, string ternSubCode, Nullable<int> cardType_ID, string carId, string carModel, Nullable<System.DateTime> issueDate, Nullable<int> issuesite_id, Nullable<int> issueLoc_ID, Nullable<int> issueEquip_ID, Nullable<System.DateTime> expDate, Nullable<System.DateTime> firstUse, Nullable<System.DateTime> lastUse, Nullable<int> lastLoc_ID, string last_Equip_ID, Nullable<int> status, string initCredit, Nullable<decimal> remainCredit, Nullable<decimal> earnest, Nullable<int> totalUse, Nullable<int> totalRides, Nullable<decimal> totalDeductCredit, Nullable<decimal> totalAddCredit, Nullable<decimal> totalBonusCredit, string occupied, string remark, string lastcscmain_id, string cardContact, string cartype, string cardType, string activecard, Nullable<System.DateTime> last_Upd, Nullable<int> person_ID, Nullable<System.DateTime> dateActive, string pay, string statuspay, string lastscr_no, Nullable<System.DateTime> syndate)
        {
            var scr_NoParameter = scr_No != null ?
                new ObjectParameter("Scr_No", scr_No) :
                new ObjectParameter("Scr_No", typeof(string));
    
            var cscMain_IDParameter = cscMain_ID != null ?
                new ObjectParameter("CscMain_ID", cscMain_ID) :
                new ObjectParameter("CscMain_ID", typeof(string));
    
            var rabbit_IDParameter = rabbit_ID != null ?
                new ObjectParameter("Rabbit_ID", rabbit_ID) :
                new ObjectParameter("Rabbit_ID", typeof(string));
    
            var custNoParameter = custNo != null ?
                new ObjectParameter("CustNo", custNo) :
                new ObjectParameter("CustNo", typeof(string));
    
            var fnameParameter = fname != null ?
                new ObjectParameter("Fname", fname) :
                new ObjectParameter("Fname", typeof(string));
    
            var lnameParameter = lname != null ?
                new ObjectParameter("Lname", lname) :
                new ObjectParameter("Lname", typeof(string));
    
            var sexParameter = sex != null ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(string));
    
            var telParameter = tel != null ?
                new ObjectParameter("Tel", tel) :
                new ObjectParameter("Tel", typeof(string));
    
            var birthdayParameter = birthday.HasValue ?
                new ObjectParameter("Birthday", birthday) :
                new ObjectParameter("Birthday", typeof(System.DateTime));
    
            var terncodeParameter = terncode != null ?
                new ObjectParameter("Terncode", terncode) :
                new ObjectParameter("Terncode", typeof(string));
    
            var ternSubCodeParameter = ternSubCode != null ?
                new ObjectParameter("TernSubCode", ternSubCode) :
                new ObjectParameter("TernSubCode", typeof(string));
    
            var cardType_IDParameter = cardType_ID.HasValue ?
                new ObjectParameter("CardType_ID", cardType_ID) :
                new ObjectParameter("CardType_ID", typeof(int));
    
            var carIdParameter = carId != null ?
                new ObjectParameter("CarId", carId) :
                new ObjectParameter("CarId", typeof(string));
    
            var carModelParameter = carModel != null ?
                new ObjectParameter("CarModel", carModel) :
                new ObjectParameter("CarModel", typeof(string));
    
            var issueDateParameter = issueDate.HasValue ?
                new ObjectParameter("IssueDate", issueDate) :
                new ObjectParameter("IssueDate", typeof(System.DateTime));
    
            var issuesite_idParameter = issuesite_id.HasValue ?
                new ObjectParameter("Issuesite_id", issuesite_id) :
                new ObjectParameter("Issuesite_id", typeof(int));
    
            var issueLoc_IDParameter = issueLoc_ID.HasValue ?
                new ObjectParameter("IssueLoc_ID", issueLoc_ID) :
                new ObjectParameter("IssueLoc_ID", typeof(int));
    
            var issueEquip_IDParameter = issueEquip_ID.HasValue ?
                new ObjectParameter("IssueEquip_ID", issueEquip_ID) :
                new ObjectParameter("IssueEquip_ID", typeof(int));
    
            var expDateParameter = expDate.HasValue ?
                new ObjectParameter("ExpDate", expDate) :
                new ObjectParameter("ExpDate", typeof(System.DateTime));
    
            var firstUseParameter = firstUse.HasValue ?
                new ObjectParameter("FirstUse", firstUse) :
                new ObjectParameter("FirstUse", typeof(System.DateTime));
    
            var lastUseParameter = lastUse.HasValue ?
                new ObjectParameter("LastUse", lastUse) :
                new ObjectParameter("LastUse", typeof(System.DateTime));
    
            var lastLoc_IDParameter = lastLoc_ID.HasValue ?
                new ObjectParameter("LastLoc_ID", lastLoc_ID) :
                new ObjectParameter("LastLoc_ID", typeof(int));
    
            var last_Equip_IDParameter = last_Equip_ID != null ?
                new ObjectParameter("Last_Equip_ID", last_Equip_ID) :
                new ObjectParameter("Last_Equip_ID", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var initCreditParameter = initCredit != null ?
                new ObjectParameter("InitCredit", initCredit) :
                new ObjectParameter("InitCredit", typeof(string));
    
            var remainCreditParameter = remainCredit.HasValue ?
                new ObjectParameter("RemainCredit", remainCredit) :
                new ObjectParameter("RemainCredit", typeof(decimal));
    
            var earnestParameter = earnest.HasValue ?
                new ObjectParameter("Earnest", earnest) :
                new ObjectParameter("Earnest", typeof(decimal));
    
            var totalUseParameter = totalUse.HasValue ?
                new ObjectParameter("TotalUse", totalUse) :
                new ObjectParameter("TotalUse", typeof(int));
    
            var totalRidesParameter = totalRides.HasValue ?
                new ObjectParameter("TotalRides", totalRides) :
                new ObjectParameter("TotalRides", typeof(int));
    
            var totalDeductCreditParameter = totalDeductCredit.HasValue ?
                new ObjectParameter("TotalDeductCredit", totalDeductCredit) :
                new ObjectParameter("TotalDeductCredit", typeof(decimal));
    
            var totalAddCreditParameter = totalAddCredit.HasValue ?
                new ObjectParameter("TotalAddCredit", totalAddCredit) :
                new ObjectParameter("TotalAddCredit", typeof(decimal));
    
            var totalBonusCreditParameter = totalBonusCredit.HasValue ?
                new ObjectParameter("TotalBonusCredit", totalBonusCredit) :
                new ObjectParameter("TotalBonusCredit", typeof(decimal));
    
            var occupiedParameter = occupied != null ?
                new ObjectParameter("Occupied", occupied) :
                new ObjectParameter("Occupied", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var lastcscmain_idParameter = lastcscmain_id != null ?
                new ObjectParameter("Lastcscmain_id", lastcscmain_id) :
                new ObjectParameter("Lastcscmain_id", typeof(string));
    
            var cardContactParameter = cardContact != null ?
                new ObjectParameter("CardContact", cardContact) :
                new ObjectParameter("CardContact", typeof(string));
    
            var cartypeParameter = cartype != null ?
                new ObjectParameter("Cartype", cartype) :
                new ObjectParameter("Cartype", typeof(string));
    
            var cardTypeParameter = cardType != null ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(string));
    
            var activecardParameter = activecard != null ?
                new ObjectParameter("Activecard", activecard) :
                new ObjectParameter("Activecard", typeof(string));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var dateActiveParameter = dateActive.HasValue ?
                new ObjectParameter("DateActive", dateActive) :
                new ObjectParameter("DateActive", typeof(System.DateTime));
    
            var payParameter = pay != null ?
                new ObjectParameter("Pay", pay) :
                new ObjectParameter("Pay", typeof(string));
    
            var statuspayParameter = statuspay != null ?
                new ObjectParameter("Statuspay", statuspay) :
                new ObjectParameter("Statuspay", typeof(string));
    
            var lastscr_noParameter = lastscr_no != null ?
                new ObjectParameter("Lastscr_no", lastscr_no) :
                new ObjectParameter("Lastscr_no", typeof(string));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_PkCard", scr_NoParameter, cscMain_IDParameter, rabbit_IDParameter, custNoParameter, fnameParameter, lnameParameter, sexParameter, telParameter, birthdayParameter, terncodeParameter, ternSubCodeParameter, cardType_IDParameter, carIdParameter, carModelParameter, issueDateParameter, issuesite_idParameter, issueLoc_IDParameter, issueEquip_IDParameter, expDateParameter, firstUseParameter, lastUseParameter, lastLoc_IDParameter, last_Equip_IDParameter, statusParameter, initCreditParameter, remainCreditParameter, earnestParameter, totalUseParameter, totalRidesParameter, totalDeductCreditParameter, totalAddCreditParameter, totalBonusCreditParameter, occupiedParameter, remarkParameter, lastcscmain_idParameter, cardContactParameter, cartypeParameter, cardTypeParameter, activecardParameter, last_UpdParameter, person_IDParameter, dateActiveParameter, payParameter, statuspayParameter, lastscr_noParameter, syndateParameter);
        }
    
        public virtual int Update_PkCardType(Nullable<int> cardType_Id, string zdesc, Nullable<int> cashpay, string cartype, Nullable<System.DateTime> last_Upd, Nullable<int> person_ID, Nullable<System.DateTime> syndate)
        {
            var cardType_IdParameter = cardType_Id.HasValue ?
                new ObjectParameter("CardType_Id", cardType_Id) :
                new ObjectParameter("CardType_Id", typeof(int));
    
            var zdescParameter = zdesc != null ?
                new ObjectParameter("Zdesc", zdesc) :
                new ObjectParameter("Zdesc", typeof(string));
    
            var cashpayParameter = cashpay.HasValue ?
                new ObjectParameter("cashpay", cashpay) :
                new ObjectParameter("cashpay", typeof(int));
    
            var cartypeParameter = cartype != null ?
                new ObjectParameter("cartype", cartype) :
                new ObjectParameter("cartype", typeof(string));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_PkCardType", cardType_IdParameter, zdescParameter, cashpayParameter, cartypeParameter, last_UpdParameter, person_IDParameter, syndateParameter);
        }
    
        public virtual int Update_PkCustomer(string custNo, string ternCode, string ternSubCode, string fName, string lName, string addr1, string addr2, string zipcode, string tel, string mobile, byte[] pic, string carID, string carModel, string carID1, string carModel1, string carID2, string carModel2, string sex, Nullable<System.DateTime> birthday, Nullable<decimal> payMonth, string ctzID, Nullable<System.DateTime> last_Upd, Nullable<int> person_ID, string imagepaths, Nullable<System.DateTime> syndate)
        {
            var custNoParameter = custNo != null ?
                new ObjectParameter("CustNo", custNo) :
                new ObjectParameter("CustNo", typeof(string));
    
            var ternCodeParameter = ternCode != null ?
                new ObjectParameter("TernCode", ternCode) :
                new ObjectParameter("TernCode", typeof(string));
    
            var ternSubCodeParameter = ternSubCode != null ?
                new ObjectParameter("TernSubCode", ternSubCode) :
                new ObjectParameter("TernSubCode", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var lNameParameter = lName != null ?
                new ObjectParameter("LName", lName) :
                new ObjectParameter("LName", typeof(string));
    
            var addr1Parameter = addr1 != null ?
                new ObjectParameter("Addr1", addr1) :
                new ObjectParameter("Addr1", typeof(string));
    
            var addr2Parameter = addr2 != null ?
                new ObjectParameter("Addr2", addr2) :
                new ObjectParameter("Addr2", typeof(string));
    
            var zipcodeParameter = zipcode != null ?
                new ObjectParameter("Zipcode", zipcode) :
                new ObjectParameter("Zipcode", typeof(string));
    
            var telParameter = tel != null ?
                new ObjectParameter("Tel", tel) :
                new ObjectParameter("Tel", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var picParameter = pic != null ?
                new ObjectParameter("Pic", pic) :
                new ObjectParameter("Pic", typeof(byte[]));
    
            var carIDParameter = carID != null ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(string));
    
            var carModelParameter = carModel != null ?
                new ObjectParameter("CarModel", carModel) :
                new ObjectParameter("CarModel", typeof(string));
    
            var carID1Parameter = carID1 != null ?
                new ObjectParameter("CarID1", carID1) :
                new ObjectParameter("CarID1", typeof(string));
    
            var carModel1Parameter = carModel1 != null ?
                new ObjectParameter("CarModel1", carModel1) :
                new ObjectParameter("CarModel1", typeof(string));
    
            var carID2Parameter = carID2 != null ?
                new ObjectParameter("CarID2", carID2) :
                new ObjectParameter("CarID2", typeof(string));
    
            var carModel2Parameter = carModel2 != null ?
                new ObjectParameter("CarModel2", carModel2) :
                new ObjectParameter("CarModel2", typeof(string));
    
            var sexParameter = sex != null ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(string));
    
            var birthdayParameter = birthday.HasValue ?
                new ObjectParameter("Birthday", birthday) :
                new ObjectParameter("Birthday", typeof(System.DateTime));
    
            var payMonthParameter = payMonth.HasValue ?
                new ObjectParameter("PayMonth", payMonth) :
                new ObjectParameter("PayMonth", typeof(decimal));
    
            var ctzIDParameter = ctzID != null ?
                new ObjectParameter("CtzID", ctzID) :
                new ObjectParameter("CtzID", typeof(string));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var imagepathsParameter = imagepaths != null ?
                new ObjectParameter("Imagepaths", imagepaths) :
                new ObjectParameter("Imagepaths", typeof(string));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_PkCustomer", custNoParameter, ternCodeParameter, ternSubCodeParameter, fNameParameter, lNameParameter, addr1Parameter, addr2Parameter, zipcodeParameter, telParameter, mobileParameter, picParameter, carIDParameter, carModelParameter, carID1Parameter, carModel1Parameter, carID2Parameter, carModel2Parameter, sexParameter, birthdayParameter, payMonthParameter, ctzIDParameter, last_UpdParameter, person_IDParameter, imagepathsParameter, syndateParameter);
        }
    
        public virtual int Update_PkDepartment(string companyID, string terncode, string deptID, string deptName, string zdesc, string supDepID, Nullable<int> level1, Nullable<System.DateTime> last_Upd, Nullable<int> person_ID, string memo, string no1, string moo, string soi, string street, string subdistrict, string district, string province, string zipcode, string tel1, string tel2, string floor, string taxID, Nullable<int> loc_ID, Nullable<int> typeCompany, string typebill, string groupbill, Nullable<System.DateTime> syndate, Nullable<int> gdoorID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            var terncodeParameter = terncode != null ?
                new ObjectParameter("Terncode", terncode) :
                new ObjectParameter("Terncode", typeof(string));
    
            var deptIDParameter = deptID != null ?
                new ObjectParameter("DeptID", deptID) :
                new ObjectParameter("DeptID", typeof(string));
    
            var deptNameParameter = deptName != null ?
                new ObjectParameter("DeptName", deptName) :
                new ObjectParameter("DeptName", typeof(string));
    
            var zdescParameter = zdesc != null ?
                new ObjectParameter("Zdesc", zdesc) :
                new ObjectParameter("Zdesc", typeof(string));
    
            var supDepIDParameter = supDepID != null ?
                new ObjectParameter("SupDepID", supDepID) :
                new ObjectParameter("SupDepID", typeof(string));
    
            var level1Parameter = level1.HasValue ?
                new ObjectParameter("Level1", level1) :
                new ObjectParameter("Level1", typeof(int));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var memoParameter = memo != null ?
                new ObjectParameter("Memo", memo) :
                new ObjectParameter("Memo", typeof(string));
    
            var no1Parameter = no1 != null ?
                new ObjectParameter("No1", no1) :
                new ObjectParameter("No1", typeof(string));
    
            var mooParameter = moo != null ?
                new ObjectParameter("Moo", moo) :
                new ObjectParameter("Moo", typeof(string));
    
            var soiParameter = soi != null ?
                new ObjectParameter("Soi", soi) :
                new ObjectParameter("Soi", typeof(string));
    
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var subdistrictParameter = subdistrict != null ?
                new ObjectParameter("Subdistrict", subdistrict) :
                new ObjectParameter("Subdistrict", typeof(string));
    
            var districtParameter = district != null ?
                new ObjectParameter("District", district) :
                new ObjectParameter("District", typeof(string));
    
            var provinceParameter = province != null ?
                new ObjectParameter("Province", province) :
                new ObjectParameter("Province", typeof(string));
    
            var zipcodeParameter = zipcode != null ?
                new ObjectParameter("Zipcode", zipcode) :
                new ObjectParameter("Zipcode", typeof(string));
    
            var tel1Parameter = tel1 != null ?
                new ObjectParameter("Tel1", tel1) :
                new ObjectParameter("Tel1", typeof(string));
    
            var tel2Parameter = tel2 != null ?
                new ObjectParameter("Tel2", tel2) :
                new ObjectParameter("Tel2", typeof(string));
    
            var floorParameter = floor != null ?
                new ObjectParameter("Floor", floor) :
                new ObjectParameter("Floor", typeof(string));
    
            var taxIDParameter = taxID != null ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(string));
    
            var loc_IDParameter = loc_ID.HasValue ?
                new ObjectParameter("Loc_ID", loc_ID) :
                new ObjectParameter("Loc_ID", typeof(int));
    
            var typeCompanyParameter = typeCompany.HasValue ?
                new ObjectParameter("TypeCompany", typeCompany) :
                new ObjectParameter("TypeCompany", typeof(int));
    
            var typebillParameter = typebill != null ?
                new ObjectParameter("Typebill", typebill) :
                new ObjectParameter("Typebill", typeof(string));
    
            var groupbillParameter = groupbill != null ?
                new ObjectParameter("Groupbill", groupbill) :
                new ObjectParameter("Groupbill", typeof(string));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            var gdoorIDParameter = gdoorID.HasValue ?
                new ObjectParameter("GdoorID", gdoorID) :
                new ObjectParameter("GdoorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_PkDepartment", companyIDParameter, terncodeParameter, deptIDParameter, deptNameParameter, zdescParameter, supDepIDParameter, level1Parameter, last_UpdParameter, person_IDParameter, memoParameter, no1Parameter, mooParameter, soiParameter, streetParameter, subdistrictParameter, districtParameter, provinceParameter, zipcodeParameter, tel1Parameter, tel2Parameter, floorParameter, taxIDParameter, loc_IDParameter, typeCompanyParameter, typebillParameter, groupbillParameter, syndateParameter, gdoorIDParameter);
        }
    
        public virtual int Update_PkFareMedia(Nullable<int> faremedia_ID, Nullable<int> loc_Id, string zdesc, Nullable<decimal> lostCard_Fine, Nullable<decimal> notEnoughCredit_Fine, Nullable<decimal> wrongInOut_Fine, Nullable<decimal> earnest, Nullable<decimal> lostSlip_Fine, Nullable<short> overDay_Hr, Nullable<short> minute2Hour, Nullable<short> freeMinute, Nullable<System.DateTime> last_Upd, Nullable<int> person_ID, Nullable<System.DateTime> startUse, Nullable<System.DateTime> stopUse, Nullable<decimal> issuecard_fee, Nullable<decimal> feeperday, Nullable<short> hourpackageperday, Nullable<System.DateTime> syndate, Nullable<decimal> lostCard_motor_Fine)
        {
            var faremedia_IDParameter = faremedia_ID.HasValue ?
                new ObjectParameter("Faremedia_ID", faremedia_ID) :
                new ObjectParameter("Faremedia_ID", typeof(int));
    
            var loc_IdParameter = loc_Id.HasValue ?
                new ObjectParameter("Loc_Id", loc_Id) :
                new ObjectParameter("Loc_Id", typeof(int));
    
            var zdescParameter = zdesc != null ?
                new ObjectParameter("Zdesc", zdesc) :
                new ObjectParameter("Zdesc", typeof(string));
    
            var lostCard_FineParameter = lostCard_Fine.HasValue ?
                new ObjectParameter("LostCard_Fine", lostCard_Fine) :
                new ObjectParameter("LostCard_Fine", typeof(decimal));
    
            var notEnoughCredit_FineParameter = notEnoughCredit_Fine.HasValue ?
                new ObjectParameter("NotEnoughCredit_Fine", notEnoughCredit_Fine) :
                new ObjectParameter("NotEnoughCredit_Fine", typeof(decimal));
    
            var wrongInOut_FineParameter = wrongInOut_Fine.HasValue ?
                new ObjectParameter("WrongInOut_Fine", wrongInOut_Fine) :
                new ObjectParameter("WrongInOut_Fine", typeof(decimal));
    
            var earnestParameter = earnest.HasValue ?
                new ObjectParameter("Earnest", earnest) :
                new ObjectParameter("Earnest", typeof(decimal));
    
            var lostSlip_FineParameter = lostSlip_Fine.HasValue ?
                new ObjectParameter("LostSlip_Fine", lostSlip_Fine) :
                new ObjectParameter("LostSlip_Fine", typeof(decimal));
    
            var overDay_HrParameter = overDay_Hr.HasValue ?
                new ObjectParameter("OverDay_Hr", overDay_Hr) :
                new ObjectParameter("OverDay_Hr", typeof(short));
    
            var minute2HourParameter = minute2Hour.HasValue ?
                new ObjectParameter("Minute2Hour", minute2Hour) :
                new ObjectParameter("Minute2Hour", typeof(short));
    
            var freeMinuteParameter = freeMinute.HasValue ?
                new ObjectParameter("FreeMinute", freeMinute) :
                new ObjectParameter("FreeMinute", typeof(short));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var startUseParameter = startUse.HasValue ?
                new ObjectParameter("StartUse", startUse) :
                new ObjectParameter("StartUse", typeof(System.DateTime));
    
            var stopUseParameter = stopUse.HasValue ?
                new ObjectParameter("StopUse", stopUse) :
                new ObjectParameter("StopUse", typeof(System.DateTime));
    
            var issuecard_feeParameter = issuecard_fee.HasValue ?
                new ObjectParameter("Issuecard_fee", issuecard_fee) :
                new ObjectParameter("Issuecard_fee", typeof(decimal));
    
            var feeperdayParameter = feeperday.HasValue ?
                new ObjectParameter("Feeperday", feeperday) :
                new ObjectParameter("Feeperday", typeof(decimal));
    
            var hourpackageperdayParameter = hourpackageperday.HasValue ?
                new ObjectParameter("Hourpackageperday", hourpackageperday) :
                new ObjectParameter("Hourpackageperday", typeof(short));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            var lostCard_motor_FineParameter = lostCard_motor_Fine.HasValue ?
                new ObjectParameter("LostCard_motor_Fine", lostCard_motor_Fine) :
                new ObjectParameter("LostCard_motor_Fine", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_PkFareMedia", faremedia_IDParameter, loc_IdParameter, zdescParameter, lostCard_FineParameter, notEnoughCredit_FineParameter, wrongInOut_FineParameter, earnestParameter, lostSlip_FineParameter, overDay_HrParameter, minute2HourParameter, freeMinuteParameter, last_UpdParameter, person_IDParameter, startUseParameter, stopUseParameter, issuecard_feeParameter, feeperdayParameter, hourpackageperdayParameter, syndateParameter, lostCard_motor_FineParameter);
        }
    
        public virtual int Update_PkFaremedia_Cardtype(Nullable<int> fareMedia_ID, Nullable<int> loc_ID, Nullable<int> cardType_ID, string payMonthFlg, string printSlipFlg, Nullable<int> validPeriod, Nullable<int> specialPeriod, string eventAccept, string eventCode, string eventPrice, string holAccept, string holCode, string holPrice, string weekAccept, string weekCode, string weekPrice, string normalAccept, string normalPrice, Nullable<short> validWarnDay, string useCount, Nullable<System.DateTime> last_Upd, string person_ID, string addCreditFlag, string minCreditFlag, string negCreditFlag, string initCredit, Nullable<int> purchaseType, string oneDayFlag, string alarmFlag, string bonusFlag, Nullable<int> bonustype, Nullable<System.DateTime> syndate)
        {
            var fareMedia_IDParameter = fareMedia_ID.HasValue ?
                new ObjectParameter("FareMedia_ID", fareMedia_ID) :
                new ObjectParameter("FareMedia_ID", typeof(int));
    
            var loc_IDParameter = loc_ID.HasValue ?
                new ObjectParameter("Loc_ID", loc_ID) :
                new ObjectParameter("Loc_ID", typeof(int));
    
            var cardType_IDParameter = cardType_ID.HasValue ?
                new ObjectParameter("CardType_ID", cardType_ID) :
                new ObjectParameter("CardType_ID", typeof(int));
    
            var payMonthFlgParameter = payMonthFlg != null ?
                new ObjectParameter("PayMonthFlg", payMonthFlg) :
                new ObjectParameter("PayMonthFlg", typeof(string));
    
            var printSlipFlgParameter = printSlipFlg != null ?
                new ObjectParameter("PrintSlipFlg", printSlipFlg) :
                new ObjectParameter("PrintSlipFlg", typeof(string));
    
            var validPeriodParameter = validPeriod.HasValue ?
                new ObjectParameter("ValidPeriod", validPeriod) :
                new ObjectParameter("ValidPeriod", typeof(int));
    
            var specialPeriodParameter = specialPeriod.HasValue ?
                new ObjectParameter("SpecialPeriod", specialPeriod) :
                new ObjectParameter("SpecialPeriod", typeof(int));
    
            var eventAcceptParameter = eventAccept != null ?
                new ObjectParameter("EventAccept", eventAccept) :
                new ObjectParameter("EventAccept", typeof(string));
    
            var eventCodeParameter = eventCode != null ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(string));
    
            var eventPriceParameter = eventPrice != null ?
                new ObjectParameter("EventPrice", eventPrice) :
                new ObjectParameter("EventPrice", typeof(string));
    
            var holAcceptParameter = holAccept != null ?
                new ObjectParameter("HolAccept", holAccept) :
                new ObjectParameter("HolAccept", typeof(string));
    
            var holCodeParameter = holCode != null ?
                new ObjectParameter("HolCode", holCode) :
                new ObjectParameter("HolCode", typeof(string));
    
            var holPriceParameter = holPrice != null ?
                new ObjectParameter("HolPrice", holPrice) :
                new ObjectParameter("HolPrice", typeof(string));
    
            var weekAcceptParameter = weekAccept != null ?
                new ObjectParameter("WeekAccept", weekAccept) :
                new ObjectParameter("WeekAccept", typeof(string));
    
            var weekCodeParameter = weekCode != null ?
                new ObjectParameter("WeekCode", weekCode) :
                new ObjectParameter("WeekCode", typeof(string));
    
            var weekPriceParameter = weekPrice != null ?
                new ObjectParameter("WeekPrice", weekPrice) :
                new ObjectParameter("WeekPrice", typeof(string));
    
            var normalAcceptParameter = normalAccept != null ?
                new ObjectParameter("NormalAccept", normalAccept) :
                new ObjectParameter("NormalAccept", typeof(string));
    
            var normalPriceParameter = normalPrice != null ?
                new ObjectParameter("NormalPrice", normalPrice) :
                new ObjectParameter("NormalPrice", typeof(string));
    
            var validWarnDayParameter = validWarnDay.HasValue ?
                new ObjectParameter("ValidWarnDay", validWarnDay) :
                new ObjectParameter("ValidWarnDay", typeof(short));
    
            var useCountParameter = useCount != null ?
                new ObjectParameter("UseCount", useCount) :
                new ObjectParameter("UseCount", typeof(string));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID != null ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(string));
    
            var addCreditFlagParameter = addCreditFlag != null ?
                new ObjectParameter("AddCreditFlag", addCreditFlag) :
                new ObjectParameter("AddCreditFlag", typeof(string));
    
            var minCreditFlagParameter = minCreditFlag != null ?
                new ObjectParameter("MinCreditFlag", minCreditFlag) :
                new ObjectParameter("MinCreditFlag", typeof(string));
    
            var negCreditFlagParameter = negCreditFlag != null ?
                new ObjectParameter("NegCreditFlag", negCreditFlag) :
                new ObjectParameter("NegCreditFlag", typeof(string));
    
            var initCreditParameter = initCredit != null ?
                new ObjectParameter("InitCredit", initCredit) :
                new ObjectParameter("InitCredit", typeof(string));
    
            var purchaseTypeParameter = purchaseType.HasValue ?
                new ObjectParameter("PurchaseType", purchaseType) :
                new ObjectParameter("PurchaseType", typeof(int));
    
            var oneDayFlagParameter = oneDayFlag != null ?
                new ObjectParameter("OneDayFlag", oneDayFlag) :
                new ObjectParameter("OneDayFlag", typeof(string));
    
            var alarmFlagParameter = alarmFlag != null ?
                new ObjectParameter("AlarmFlag", alarmFlag) :
                new ObjectParameter("AlarmFlag", typeof(string));
    
            var bonusFlagParameter = bonusFlag != null ?
                new ObjectParameter("BonusFlag", bonusFlag) :
                new ObjectParameter("BonusFlag", typeof(string));
    
            var bonustypeParameter = bonustype.HasValue ?
                new ObjectParameter("Bonustype", bonustype) :
                new ObjectParameter("Bonustype", typeof(int));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_PkFaremedia_Cardtype", fareMedia_IDParameter, loc_IDParameter, cardType_IDParameter, payMonthFlgParameter, printSlipFlgParameter, validPeriodParameter, specialPeriodParameter, eventAcceptParameter, eventCodeParameter, eventPriceParameter, holAcceptParameter, holCodeParameter, holPriceParameter, weekAcceptParameter, weekCodeParameter, weekPriceParameter, normalAcceptParameter, normalPriceParameter, validWarnDayParameter, useCountParameter, last_UpdParameter, person_IDParameter, addCreditFlagParameter, minCreditFlagParameter, negCreditFlagParameter, initCreditParameter, purchaseTypeParameter, oneDayFlagParameter, alarmFlagParameter, bonusFlagParameter, bonustypeParameter, syndateParameter);
        }
    
        public virtual int Update_PkHoliday(string holCode, string zDesc, Nullable<System.DateTime> last_Upd, Nullable<int> person_ID, Nullable<System.DateTime> syndate)
        {
            var holCodeParameter = holCode != null ?
                new ObjectParameter("HolCode", holCode) :
                new ObjectParameter("HolCode", typeof(string));
    
            var zDescParameter = zDesc != null ?
                new ObjectParameter("ZDesc", zDesc) :
                new ObjectParameter("ZDesc", typeof(string));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_PkHoliday", holCodeParameter, zDescParameter, last_UpdParameter, person_IDParameter, syndateParameter);
        }
    
        public virtual int Update_PkHolidayD(string holCode, string itemCode, Nullable<System.DateTime> zDate, string zDesc, Nullable<System.DateTime> last_Upd, Nullable<int> person_ID, Nullable<System.DateTime> syndate)
        {
            var holCodeParameter = holCode != null ?
                new ObjectParameter("HolCode", holCode) :
                new ObjectParameter("HolCode", typeof(string));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var zDateParameter = zDate.HasValue ?
                new ObjectParameter("ZDate", zDate) :
                new ObjectParameter("ZDate", typeof(System.DateTime));
    
            var zDescParameter = zDesc != null ?
                new ObjectParameter("ZDesc", zDesc) :
                new ObjectParameter("ZDesc", typeof(string));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_PkHolidayD", holCodeParameter, itemCodeParameter, zDateParameter, zDescParameter, last_UpdParameter, person_IDParameter, syndateParameter);
        }
    
        public virtual int Update_pkinouttranstamp(string inOutTranstamp_ID, string inOutTran_ID, string stampCode, string terncode, string ternsubcode, Nullable<System.DateTime> datetimestamp, Nullable<int> mintenant, Nullable<decimal> feeTenant, Nullable<decimal> feevisitor, Nullable<int> singleStampFlg, Nullable<int> active1, Nullable<int> adminlevel, Nullable<System.DateTime> last_Upd, Nullable<int> person_ID, string adminname, Nullable<System.DateTime> syndate)
        {
            var inOutTranstamp_IDParameter = inOutTranstamp_ID != null ?
                new ObjectParameter("InOutTranstamp_ID", inOutTranstamp_ID) :
                new ObjectParameter("InOutTranstamp_ID", typeof(string));
    
            var inOutTran_IDParameter = inOutTran_ID != null ?
                new ObjectParameter("InOutTran_ID", inOutTran_ID) :
                new ObjectParameter("InOutTran_ID", typeof(string));
    
            var stampCodeParameter = stampCode != null ?
                new ObjectParameter("StampCode", stampCode) :
                new ObjectParameter("StampCode", typeof(string));
    
            var terncodeParameter = terncode != null ?
                new ObjectParameter("Terncode", terncode) :
                new ObjectParameter("Terncode", typeof(string));
    
            var ternsubcodeParameter = ternsubcode != null ?
                new ObjectParameter("Ternsubcode", ternsubcode) :
                new ObjectParameter("Ternsubcode", typeof(string));
    
            var datetimestampParameter = datetimestamp.HasValue ?
                new ObjectParameter("datetimestamp", datetimestamp) :
                new ObjectParameter("datetimestamp", typeof(System.DateTime));
    
            var mintenantParameter = mintenant.HasValue ?
                new ObjectParameter("Mintenant", mintenant) :
                new ObjectParameter("Mintenant", typeof(int));
    
            var feeTenantParameter = feeTenant.HasValue ?
                new ObjectParameter("FeeTenant", feeTenant) :
                new ObjectParameter("FeeTenant", typeof(decimal));
    
            var feevisitorParameter = feevisitor.HasValue ?
                new ObjectParameter("Feevisitor", feevisitor) :
                new ObjectParameter("Feevisitor", typeof(decimal));
    
            var singleStampFlgParameter = singleStampFlg.HasValue ?
                new ObjectParameter("SingleStampFlg", singleStampFlg) :
                new ObjectParameter("SingleStampFlg", typeof(int));
    
            var active1Parameter = active1.HasValue ?
                new ObjectParameter("Active1", active1) :
                new ObjectParameter("Active1", typeof(int));
    
            var adminlevelParameter = adminlevel.HasValue ?
                new ObjectParameter("adminlevel", adminlevel) :
                new ObjectParameter("adminlevel", typeof(int));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var adminnameParameter = adminname != null ?
                new ObjectParameter("Adminname", adminname) :
                new ObjectParameter("Adminname", typeof(string));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_pkinouttranstamp", inOutTranstamp_IDParameter, inOutTran_IDParameter, stampCodeParameter, terncodeParameter, ternsubcodeParameter, datetimestampParameter, mintenantParameter, feeTenantParameter, feevisitorParameter, singleStampFlgParameter, active1Parameter, adminlevelParameter, last_UpdParameter, person_IDParameter, adminnameParameter, syndateParameter);
        }
    
        public virtual int Update_PkLocation(Nullable<int> loc_ID, Nullable<int> site_ID, string zDesc, string addr1, Nullable<int> spaceparking, Nullable<System.DateTime> last_Upd, Nullable<int> person_ID)
        {
            var loc_IDParameter = loc_ID.HasValue ?
                new ObjectParameter("Loc_ID", loc_ID) :
                new ObjectParameter("Loc_ID", typeof(int));
    
            var site_IDParameter = site_ID.HasValue ?
                new ObjectParameter("Site_ID", site_ID) :
                new ObjectParameter("Site_ID", typeof(int));
    
            var zDescParameter = zDesc != null ?
                new ObjectParameter("ZDesc", zDesc) :
                new ObjectParameter("ZDesc", typeof(string));
    
            var addr1Parameter = addr1 != null ?
                new ObjectParameter("Addr1", addr1) :
                new ObjectParameter("Addr1", typeof(string));
    
            var spaceparkingParameter = spaceparking.HasValue ?
                new ObjectParameter("Spaceparking", spaceparking) :
                new ObjectParameter("Spaceparking", typeof(int));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_PkLocation", loc_IDParameter, site_IDParameter, zDescParameter, addr1Parameter, spaceparkingParameter, last_UpdParameter, person_IDParameter);
        }
    
        public virtual int Update_PkNegativeCard(string scr_No, string cscMain_ID, string rabbit_ID, string neg_IN, string neg_Out, string pass, string note, Nullable<System.DateTime> last_Upd, Nullable<int> person_ID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> syndate)
        {
            var scr_NoParameter = scr_No != null ?
                new ObjectParameter("Scr_No", scr_No) :
                new ObjectParameter("Scr_No", typeof(string));
    
            var cscMain_IDParameter = cscMain_ID != null ?
                new ObjectParameter("CscMain_ID", cscMain_ID) :
                new ObjectParameter("CscMain_ID", typeof(string));
    
            var rabbit_IDParameter = rabbit_ID != null ?
                new ObjectParameter("Rabbit_ID", rabbit_ID) :
                new ObjectParameter("Rabbit_ID", typeof(string));
    
            var neg_INParameter = neg_IN != null ?
                new ObjectParameter("Neg_IN", neg_IN) :
                new ObjectParameter("Neg_IN", typeof(string));
    
            var neg_OutParameter = neg_Out != null ?
                new ObjectParameter("Neg_Out", neg_Out) :
                new ObjectParameter("Neg_Out", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("Pass", pass) :
                new ObjectParameter("Pass", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_PkNegativeCard", scr_NoParameter, cscMain_IDParameter, rabbit_IDParameter, neg_INParameter, neg_OutParameter, passParameter, noteParameter, last_UpdParameter, person_IDParameter, startDateParameter, syndateParameter);
        }
    
        public virtual int Update_Pksite(Nullable<int> site_ID, string zDesc, string taxID, string addr1, string zipCode, string tel, string fax, Nullable<decimal> vat, Nullable<int> taxFlg, Nullable<int> taxType, Nullable<decimal> withholdingtax, Nullable<System.DateTime> last_Upd, Nullable<int> person_ID, Nullable<int> spaceparking, string dateMonthFare, string dateHalfMonthFare, Nullable<decimal> issuecard_fee, Nullable<decimal> deposit_fee, string precis1, Nullable<decimal> issuecard_deposit, Nullable<System.DateTime> syndate, string adr1, string adr2)
        {
            var site_IDParameter = site_ID.HasValue ?
                new ObjectParameter("Site_ID", site_ID) :
                new ObjectParameter("Site_ID", typeof(int));
    
            var zDescParameter = zDesc != null ?
                new ObjectParameter("ZDesc", zDesc) :
                new ObjectParameter("ZDesc", typeof(string));
    
            var taxIDParameter = taxID != null ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(string));
    
            var addr1Parameter = addr1 != null ?
                new ObjectParameter("Addr1", addr1) :
                new ObjectParameter("Addr1", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var telParameter = tel != null ?
                new ObjectParameter("Tel", tel) :
                new ObjectParameter("Tel", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var vatParameter = vat.HasValue ?
                new ObjectParameter("Vat", vat) :
                new ObjectParameter("Vat", typeof(decimal));
    
            var taxFlgParameter = taxFlg.HasValue ?
                new ObjectParameter("TaxFlg", taxFlg) :
                new ObjectParameter("TaxFlg", typeof(int));
    
            var taxTypeParameter = taxType.HasValue ?
                new ObjectParameter("TaxType", taxType) :
                new ObjectParameter("TaxType", typeof(int));
    
            var withholdingtaxParameter = withholdingtax.HasValue ?
                new ObjectParameter("withholdingtax", withholdingtax) :
                new ObjectParameter("withholdingtax", typeof(decimal));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var spaceparkingParameter = spaceparking.HasValue ?
                new ObjectParameter("Spaceparking", spaceparking) :
                new ObjectParameter("Spaceparking", typeof(int));
    
            var dateMonthFareParameter = dateMonthFare != null ?
                new ObjectParameter("DateMonthFare", dateMonthFare) :
                new ObjectParameter("DateMonthFare", typeof(string));
    
            var dateHalfMonthFareParameter = dateHalfMonthFare != null ?
                new ObjectParameter("DateHalfMonthFare", dateHalfMonthFare) :
                new ObjectParameter("DateHalfMonthFare", typeof(string));
    
            var issuecard_feeParameter = issuecard_fee.HasValue ?
                new ObjectParameter("Issuecard_fee", issuecard_fee) :
                new ObjectParameter("Issuecard_fee", typeof(decimal));
    
            var deposit_feeParameter = deposit_fee.HasValue ?
                new ObjectParameter("deposit_fee", deposit_fee) :
                new ObjectParameter("deposit_fee", typeof(decimal));
    
            var precis1Parameter = precis1 != null ?
                new ObjectParameter("precis1", precis1) :
                new ObjectParameter("precis1", typeof(string));
    
            var issuecard_depositParameter = issuecard_deposit.HasValue ?
                new ObjectParameter("Issuecard_deposit", issuecard_deposit) :
                new ObjectParameter("Issuecard_deposit", typeof(decimal));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            var adr1Parameter = adr1 != null ?
                new ObjectParameter("Adr1", adr1) :
                new ObjectParameter("Adr1", typeof(string));
    
            var adr2Parameter = adr2 != null ?
                new ObjectParameter("Adr2", adr2) :
                new ObjectParameter("Adr2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_Pksite", site_IDParameter, zDescParameter, taxIDParameter, addr1Parameter, zipCodeParameter, telParameter, faxParameter, vatParameter, taxFlgParameter, taxTypeParameter, withholdingtaxParameter, last_UpdParameter, person_IDParameter, spaceparkingParameter, dateMonthFareParameter, dateHalfMonthFareParameter, issuecard_feeParameter, deposit_feeParameter, precis1Parameter, issuecard_depositParameter, syndateParameter, adr1Parameter, adr2Parameter);
        }
    
        public virtual int Update_PkStampCode(string stampCode, string stampno, string cartype, string stampAbbr, string zDesc, string flg, string ternCode, string ternSubCode, string payMonthFlg, Nullable<int> coverDay, Nullable<System.DateTime> coverTime, string eventAccept, string eventCode, string ternEventPrice, string custEventPrice, string holAccept, string holCode, string ternHolPrice, string custHolPrice, string weekAccept, string weekCode, string ternWeekPrice, string custWeekPrice, string normalAccept, string ternNormalPrice, string custNormalPrice, string onePriceFlag, Nullable<decimal> onePriceTern, Nullable<decimal> onePriceCust, Nullable<System.DateTime> last_Upd, Nullable<int> person_ID, Nullable<int> singleStampFlg, Nullable<int> admin_level_id, Nullable<System.DateTime> syndate)
        {
            var stampCodeParameter = stampCode != null ?
                new ObjectParameter("StampCode", stampCode) :
                new ObjectParameter("StampCode", typeof(string));
    
            var stampnoParameter = stampno != null ?
                new ObjectParameter("stampno", stampno) :
                new ObjectParameter("stampno", typeof(string));
    
            var cartypeParameter = cartype != null ?
                new ObjectParameter("cartype", cartype) :
                new ObjectParameter("cartype", typeof(string));
    
            var stampAbbrParameter = stampAbbr != null ?
                new ObjectParameter("StampAbbr", stampAbbr) :
                new ObjectParameter("StampAbbr", typeof(string));
    
            var zDescParameter = zDesc != null ?
                new ObjectParameter("ZDesc", zDesc) :
                new ObjectParameter("ZDesc", typeof(string));
    
            var flgParameter = flg != null ?
                new ObjectParameter("Flg", flg) :
                new ObjectParameter("Flg", typeof(string));
    
            var ternCodeParameter = ternCode != null ?
                new ObjectParameter("TernCode", ternCode) :
                new ObjectParameter("TernCode", typeof(string));
    
            var ternSubCodeParameter = ternSubCode != null ?
                new ObjectParameter("TernSubCode", ternSubCode) :
                new ObjectParameter("TernSubCode", typeof(string));
    
            var payMonthFlgParameter = payMonthFlg != null ?
                new ObjectParameter("PayMonthFlg", payMonthFlg) :
                new ObjectParameter("PayMonthFlg", typeof(string));
    
            var coverDayParameter = coverDay.HasValue ?
                new ObjectParameter("CoverDay", coverDay) :
                new ObjectParameter("CoverDay", typeof(int));
    
            var coverTimeParameter = coverTime.HasValue ?
                new ObjectParameter("CoverTime", coverTime) :
                new ObjectParameter("CoverTime", typeof(System.DateTime));
    
            var eventAcceptParameter = eventAccept != null ?
                new ObjectParameter("EventAccept", eventAccept) :
                new ObjectParameter("EventAccept", typeof(string));
    
            var eventCodeParameter = eventCode != null ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(string));
    
            var ternEventPriceParameter = ternEventPrice != null ?
                new ObjectParameter("TernEventPrice", ternEventPrice) :
                new ObjectParameter("TernEventPrice", typeof(string));
    
            var custEventPriceParameter = custEventPrice != null ?
                new ObjectParameter("CustEventPrice", custEventPrice) :
                new ObjectParameter("CustEventPrice", typeof(string));
    
            var holAcceptParameter = holAccept != null ?
                new ObjectParameter("HolAccept", holAccept) :
                new ObjectParameter("HolAccept", typeof(string));
    
            var holCodeParameter = holCode != null ?
                new ObjectParameter("HolCode", holCode) :
                new ObjectParameter("HolCode", typeof(string));
    
            var ternHolPriceParameter = ternHolPrice != null ?
                new ObjectParameter("TernHolPrice", ternHolPrice) :
                new ObjectParameter("TernHolPrice", typeof(string));
    
            var custHolPriceParameter = custHolPrice != null ?
                new ObjectParameter("CustHolPrice", custHolPrice) :
                new ObjectParameter("CustHolPrice", typeof(string));
    
            var weekAcceptParameter = weekAccept != null ?
                new ObjectParameter("WeekAccept", weekAccept) :
                new ObjectParameter("WeekAccept", typeof(string));
    
            var weekCodeParameter = weekCode != null ?
                new ObjectParameter("WeekCode", weekCode) :
                new ObjectParameter("WeekCode", typeof(string));
    
            var ternWeekPriceParameter = ternWeekPrice != null ?
                new ObjectParameter("TernWeekPrice", ternWeekPrice) :
                new ObjectParameter("TernWeekPrice", typeof(string));
    
            var custWeekPriceParameter = custWeekPrice != null ?
                new ObjectParameter("CustWeekPrice", custWeekPrice) :
                new ObjectParameter("CustWeekPrice", typeof(string));
    
            var normalAcceptParameter = normalAccept != null ?
                new ObjectParameter("NormalAccept", normalAccept) :
                new ObjectParameter("NormalAccept", typeof(string));
    
            var ternNormalPriceParameter = ternNormalPrice != null ?
                new ObjectParameter("TernNormalPrice", ternNormalPrice) :
                new ObjectParameter("TernNormalPrice", typeof(string));
    
            var custNormalPriceParameter = custNormalPrice != null ?
                new ObjectParameter("CustNormalPrice", custNormalPrice) :
                new ObjectParameter("CustNormalPrice", typeof(string));
    
            var onePriceFlagParameter = onePriceFlag != null ?
                new ObjectParameter("OnePriceFlag", onePriceFlag) :
                new ObjectParameter("OnePriceFlag", typeof(string));
    
            var onePriceTernParameter = onePriceTern.HasValue ?
                new ObjectParameter("OnePriceTern", onePriceTern) :
                new ObjectParameter("OnePriceTern", typeof(decimal));
    
            var onePriceCustParameter = onePriceCust.HasValue ?
                new ObjectParameter("OnePriceCust", onePriceCust) :
                new ObjectParameter("OnePriceCust", typeof(decimal));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var singleStampFlgParameter = singleStampFlg.HasValue ?
                new ObjectParameter("SingleStampFlg", singleStampFlg) :
                new ObjectParameter("SingleStampFlg", typeof(int));
    
            var admin_level_idParameter = admin_level_id.HasValue ?
                new ObjectParameter("admin_level_id", admin_level_id) :
                new ObjectParameter("admin_level_id", typeof(int));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_PkStampCode", stampCodeParameter, stampnoParameter, cartypeParameter, stampAbbrParameter, zDescParameter, flgParameter, ternCodeParameter, ternSubCodeParameter, payMonthFlgParameter, coverDayParameter, coverTimeParameter, eventAcceptParameter, eventCodeParameter, ternEventPriceParameter, custEventPriceParameter, holAcceptParameter, holCodeParameter, ternHolPriceParameter, custHolPriceParameter, weekAcceptParameter, weekCodeParameter, ternWeekPriceParameter, custWeekPriceParameter, normalAcceptParameter, ternNormalPriceParameter, custNormalPriceParameter, onePriceFlagParameter, onePriceTernParameter, onePriceCustParameter, last_UpdParameter, person_IDParameter, singleStampFlgParameter, admin_level_idParameter, syndateParameter);
        }
    
        public virtual int Update_PkTimetable(string tabletype, string tablecode, string tabledesc, string flag, Nullable<double> h00_15, Nullable<double> h00_30, Nullable<double> h00_45, Nullable<double> h00_60, Nullable<double> h01_15, Nullable<double> h01_30, Nullable<double> h01_45, Nullable<double> h01_60, Nullable<double> h02_15, Nullable<double> h02_30, Nullable<double> h02_45, Nullable<double> h02_60, Nullable<double> h03_15, Nullable<double> h03_30, Nullable<double> h03_45, Nullable<double> h03_60, Nullable<double> h04_15, Nullable<double> h04_30, Nullable<double> h04_45, Nullable<double> h04_60, Nullable<double> h05_15, Nullable<double> h05_30, Nullable<double> h05_45, Nullable<double> h05_60, Nullable<double> h06_15, Nullable<double> h06_30, Nullable<double> h06_45, Nullable<double> h06_60, Nullable<double> h07_15, Nullable<double> h07_30, Nullable<double> h07_45, Nullable<double> h07_60, Nullable<double> h08_15, Nullable<double> h08_30, Nullable<double> h08_45, Nullable<double> h08_60, Nullable<double> h09_15, Nullable<double> h09_30, Nullable<double> h09_45, Nullable<double> h09_60, Nullable<double> h10_15, Nullable<double> h10_30, Nullable<double> h10_45, Nullable<double> h10_60, Nullable<double> h11_15, Nullable<double> h11_30, Nullable<double> h11_45, Nullable<double> h11_60, Nullable<double> h12_15, Nullable<double> h12_30, Nullable<double> h12_45, Nullable<double> h12_60, Nullable<double> h13_15, Nullable<double> h13_30, Nullable<double> h13_45, Nullable<double> h13_60, Nullable<double> h14_15, Nullable<double> h14_30, Nullable<double> h14_45, Nullable<double> h14_60, Nullable<double> h15_15, Nullable<double> h15_30, Nullable<double> h15_45, Nullable<double> h15_60, Nullable<double> h16_15, Nullable<double> h16_30, Nullable<double> h16_45, Nullable<double> h16_60, Nullable<double> h17_15, Nullable<double> h17_30, Nullable<double> h17_45, Nullable<double> h17_60, Nullable<double> h18_15, Nullable<double> h18_30, Nullable<double> h18_45, Nullable<double> h18_60, Nullable<double> h19_15, Nullable<double> h19_30, Nullable<double> h19_45, Nullable<double> h19_60, Nullable<double> h20_15, Nullable<double> h20_30, Nullable<double> h20_45, Nullable<double> h20_60, Nullable<double> h21_15, Nullable<double> h21_30, Nullable<double> h21_45, Nullable<double> h21_60, Nullable<double> h22_15, Nullable<double> h22_30, Nullable<double> h22_45, Nullable<double> h22_60, Nullable<double> h23_15, Nullable<double> h23_30, Nullable<double> h23_45, Nullable<double> h23_60, string priceTableCode1, string priceTableCode2, string priceTableCode3, string priceTableCode4, string priceTableCode5, Nullable<System.DateTime> last_Upd, Nullable<int> person_ID, Nullable<System.DateTime> syndate)
        {
            var tabletypeParameter = tabletype != null ?
                new ObjectParameter("Tabletype", tabletype) :
                new ObjectParameter("Tabletype", typeof(string));
    
            var tablecodeParameter = tablecode != null ?
                new ObjectParameter("Tablecode", tablecode) :
                new ObjectParameter("Tablecode", typeof(string));
    
            var tabledescParameter = tabledesc != null ?
                new ObjectParameter("Tabledesc", tabledesc) :
                new ObjectParameter("Tabledesc", typeof(string));
    
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var h00_15Parameter = h00_15.HasValue ?
                new ObjectParameter("H00_15", h00_15) :
                new ObjectParameter("H00_15", typeof(double));
    
            var h00_30Parameter = h00_30.HasValue ?
                new ObjectParameter("H00_30", h00_30) :
                new ObjectParameter("H00_30", typeof(double));
    
            var h00_45Parameter = h00_45.HasValue ?
                new ObjectParameter("H00_45", h00_45) :
                new ObjectParameter("H00_45", typeof(double));
    
            var h00_60Parameter = h00_60.HasValue ?
                new ObjectParameter("H00_60", h00_60) :
                new ObjectParameter("H00_60", typeof(double));
    
            var h01_15Parameter = h01_15.HasValue ?
                new ObjectParameter("H01_15", h01_15) :
                new ObjectParameter("H01_15", typeof(double));
    
            var h01_30Parameter = h01_30.HasValue ?
                new ObjectParameter("H01_30", h01_30) :
                new ObjectParameter("H01_30", typeof(double));
    
            var h01_45Parameter = h01_45.HasValue ?
                new ObjectParameter("H01_45", h01_45) :
                new ObjectParameter("H01_45", typeof(double));
    
            var h01_60Parameter = h01_60.HasValue ?
                new ObjectParameter("H01_60", h01_60) :
                new ObjectParameter("H01_60", typeof(double));
    
            var h02_15Parameter = h02_15.HasValue ?
                new ObjectParameter("H02_15", h02_15) :
                new ObjectParameter("H02_15", typeof(double));
    
            var h02_30Parameter = h02_30.HasValue ?
                new ObjectParameter("H02_30", h02_30) :
                new ObjectParameter("H02_30", typeof(double));
    
            var h02_45Parameter = h02_45.HasValue ?
                new ObjectParameter("H02_45", h02_45) :
                new ObjectParameter("H02_45", typeof(double));
    
            var h02_60Parameter = h02_60.HasValue ?
                new ObjectParameter("H02_60", h02_60) :
                new ObjectParameter("H02_60", typeof(double));
    
            var h03_15Parameter = h03_15.HasValue ?
                new ObjectParameter("H03_15", h03_15) :
                new ObjectParameter("H03_15", typeof(double));
    
            var h03_30Parameter = h03_30.HasValue ?
                new ObjectParameter("H03_30", h03_30) :
                new ObjectParameter("H03_30", typeof(double));
    
            var h03_45Parameter = h03_45.HasValue ?
                new ObjectParameter("H03_45", h03_45) :
                new ObjectParameter("H03_45", typeof(double));
    
            var h03_60Parameter = h03_60.HasValue ?
                new ObjectParameter("H03_60", h03_60) :
                new ObjectParameter("H03_60", typeof(double));
    
            var h04_15Parameter = h04_15.HasValue ?
                new ObjectParameter("H04_15", h04_15) :
                new ObjectParameter("H04_15", typeof(double));
    
            var h04_30Parameter = h04_30.HasValue ?
                new ObjectParameter("H04_30", h04_30) :
                new ObjectParameter("H04_30", typeof(double));
    
            var h04_45Parameter = h04_45.HasValue ?
                new ObjectParameter("H04_45", h04_45) :
                new ObjectParameter("H04_45", typeof(double));
    
            var h04_60Parameter = h04_60.HasValue ?
                new ObjectParameter("H04_60", h04_60) :
                new ObjectParameter("H04_60", typeof(double));
    
            var h05_15Parameter = h05_15.HasValue ?
                new ObjectParameter("H05_15", h05_15) :
                new ObjectParameter("H05_15", typeof(double));
    
            var h05_30Parameter = h05_30.HasValue ?
                new ObjectParameter("H05_30", h05_30) :
                new ObjectParameter("H05_30", typeof(double));
    
            var h05_45Parameter = h05_45.HasValue ?
                new ObjectParameter("H05_45", h05_45) :
                new ObjectParameter("H05_45", typeof(double));
    
            var h05_60Parameter = h05_60.HasValue ?
                new ObjectParameter("H05_60", h05_60) :
                new ObjectParameter("H05_60", typeof(double));
    
            var h06_15Parameter = h06_15.HasValue ?
                new ObjectParameter("H06_15", h06_15) :
                new ObjectParameter("H06_15", typeof(double));
    
            var h06_30Parameter = h06_30.HasValue ?
                new ObjectParameter("H06_30", h06_30) :
                new ObjectParameter("H06_30", typeof(double));
    
            var h06_45Parameter = h06_45.HasValue ?
                new ObjectParameter("H06_45", h06_45) :
                new ObjectParameter("H06_45", typeof(double));
    
            var h06_60Parameter = h06_60.HasValue ?
                new ObjectParameter("H06_60", h06_60) :
                new ObjectParameter("H06_60", typeof(double));
    
            var h07_15Parameter = h07_15.HasValue ?
                new ObjectParameter("H07_15", h07_15) :
                new ObjectParameter("H07_15", typeof(double));
    
            var h07_30Parameter = h07_30.HasValue ?
                new ObjectParameter("H07_30", h07_30) :
                new ObjectParameter("H07_30", typeof(double));
    
            var h07_45Parameter = h07_45.HasValue ?
                new ObjectParameter("H07_45", h07_45) :
                new ObjectParameter("H07_45", typeof(double));
    
            var h07_60Parameter = h07_60.HasValue ?
                new ObjectParameter("H07_60", h07_60) :
                new ObjectParameter("H07_60", typeof(double));
    
            var h08_15Parameter = h08_15.HasValue ?
                new ObjectParameter("H08_15", h08_15) :
                new ObjectParameter("H08_15", typeof(double));
    
            var h08_30Parameter = h08_30.HasValue ?
                new ObjectParameter("H08_30", h08_30) :
                new ObjectParameter("H08_30", typeof(double));
    
            var h08_45Parameter = h08_45.HasValue ?
                new ObjectParameter("H08_45", h08_45) :
                new ObjectParameter("H08_45", typeof(double));
    
            var h08_60Parameter = h08_60.HasValue ?
                new ObjectParameter("H08_60", h08_60) :
                new ObjectParameter("H08_60", typeof(double));
    
            var h09_15Parameter = h09_15.HasValue ?
                new ObjectParameter("H09_15", h09_15) :
                new ObjectParameter("H09_15", typeof(double));
    
            var h09_30Parameter = h09_30.HasValue ?
                new ObjectParameter("H09_30", h09_30) :
                new ObjectParameter("H09_30", typeof(double));
    
            var h09_45Parameter = h09_45.HasValue ?
                new ObjectParameter("H09_45", h09_45) :
                new ObjectParameter("H09_45", typeof(double));
    
            var h09_60Parameter = h09_60.HasValue ?
                new ObjectParameter("H09_60", h09_60) :
                new ObjectParameter("H09_60", typeof(double));
    
            var h10_15Parameter = h10_15.HasValue ?
                new ObjectParameter("H10_15", h10_15) :
                new ObjectParameter("H10_15", typeof(double));
    
            var h10_30Parameter = h10_30.HasValue ?
                new ObjectParameter("H10_30", h10_30) :
                new ObjectParameter("H10_30", typeof(double));
    
            var h10_45Parameter = h10_45.HasValue ?
                new ObjectParameter("H10_45", h10_45) :
                new ObjectParameter("H10_45", typeof(double));
    
            var h10_60Parameter = h10_60.HasValue ?
                new ObjectParameter("H10_60", h10_60) :
                new ObjectParameter("H10_60", typeof(double));
    
            var h11_15Parameter = h11_15.HasValue ?
                new ObjectParameter("H11_15", h11_15) :
                new ObjectParameter("H11_15", typeof(double));
    
            var h11_30Parameter = h11_30.HasValue ?
                new ObjectParameter("H11_30", h11_30) :
                new ObjectParameter("H11_30", typeof(double));
    
            var h11_45Parameter = h11_45.HasValue ?
                new ObjectParameter("H11_45", h11_45) :
                new ObjectParameter("H11_45", typeof(double));
    
            var h11_60Parameter = h11_60.HasValue ?
                new ObjectParameter("H11_60", h11_60) :
                new ObjectParameter("H11_60", typeof(double));
    
            var h12_15Parameter = h12_15.HasValue ?
                new ObjectParameter("H12_15", h12_15) :
                new ObjectParameter("H12_15", typeof(double));
    
            var h12_30Parameter = h12_30.HasValue ?
                new ObjectParameter("H12_30", h12_30) :
                new ObjectParameter("H12_30", typeof(double));
    
            var h12_45Parameter = h12_45.HasValue ?
                new ObjectParameter("H12_45", h12_45) :
                new ObjectParameter("H12_45", typeof(double));
    
            var h12_60Parameter = h12_60.HasValue ?
                new ObjectParameter("H12_60", h12_60) :
                new ObjectParameter("H12_60", typeof(double));
    
            var h13_15Parameter = h13_15.HasValue ?
                new ObjectParameter("H13_15", h13_15) :
                new ObjectParameter("H13_15", typeof(double));
    
            var h13_30Parameter = h13_30.HasValue ?
                new ObjectParameter("H13_30", h13_30) :
                new ObjectParameter("H13_30", typeof(double));
    
            var h13_45Parameter = h13_45.HasValue ?
                new ObjectParameter("H13_45", h13_45) :
                new ObjectParameter("H13_45", typeof(double));
    
            var h13_60Parameter = h13_60.HasValue ?
                new ObjectParameter("H13_60", h13_60) :
                new ObjectParameter("H13_60", typeof(double));
    
            var h14_15Parameter = h14_15.HasValue ?
                new ObjectParameter("H14_15", h14_15) :
                new ObjectParameter("H14_15", typeof(double));
    
            var h14_30Parameter = h14_30.HasValue ?
                new ObjectParameter("H14_30", h14_30) :
                new ObjectParameter("H14_30", typeof(double));
    
            var h14_45Parameter = h14_45.HasValue ?
                new ObjectParameter("H14_45", h14_45) :
                new ObjectParameter("H14_45", typeof(double));
    
            var h14_60Parameter = h14_60.HasValue ?
                new ObjectParameter("H14_60", h14_60) :
                new ObjectParameter("H14_60", typeof(double));
    
            var h15_15Parameter = h15_15.HasValue ?
                new ObjectParameter("H15_15", h15_15) :
                new ObjectParameter("H15_15", typeof(double));
    
            var h15_30Parameter = h15_30.HasValue ?
                new ObjectParameter("H15_30", h15_30) :
                new ObjectParameter("H15_30", typeof(double));
    
            var h15_45Parameter = h15_45.HasValue ?
                new ObjectParameter("H15_45", h15_45) :
                new ObjectParameter("H15_45", typeof(double));
    
            var h15_60Parameter = h15_60.HasValue ?
                new ObjectParameter("H15_60", h15_60) :
                new ObjectParameter("H15_60", typeof(double));
    
            var h16_15Parameter = h16_15.HasValue ?
                new ObjectParameter("H16_15", h16_15) :
                new ObjectParameter("H16_15", typeof(double));
    
            var h16_30Parameter = h16_30.HasValue ?
                new ObjectParameter("H16_30", h16_30) :
                new ObjectParameter("H16_30", typeof(double));
    
            var h16_45Parameter = h16_45.HasValue ?
                new ObjectParameter("H16_45", h16_45) :
                new ObjectParameter("H16_45", typeof(double));
    
            var h16_60Parameter = h16_60.HasValue ?
                new ObjectParameter("H16_60", h16_60) :
                new ObjectParameter("H16_60", typeof(double));
    
            var h17_15Parameter = h17_15.HasValue ?
                new ObjectParameter("H17_15", h17_15) :
                new ObjectParameter("H17_15", typeof(double));
    
            var h17_30Parameter = h17_30.HasValue ?
                new ObjectParameter("H17_30", h17_30) :
                new ObjectParameter("H17_30", typeof(double));
    
            var h17_45Parameter = h17_45.HasValue ?
                new ObjectParameter("H17_45", h17_45) :
                new ObjectParameter("H17_45", typeof(double));
    
            var h17_60Parameter = h17_60.HasValue ?
                new ObjectParameter("H17_60", h17_60) :
                new ObjectParameter("H17_60", typeof(double));
    
            var h18_15Parameter = h18_15.HasValue ?
                new ObjectParameter("H18_15", h18_15) :
                new ObjectParameter("H18_15", typeof(double));
    
            var h18_30Parameter = h18_30.HasValue ?
                new ObjectParameter("H18_30", h18_30) :
                new ObjectParameter("H18_30", typeof(double));
    
            var h18_45Parameter = h18_45.HasValue ?
                new ObjectParameter("H18_45", h18_45) :
                new ObjectParameter("H18_45", typeof(double));
    
            var h18_60Parameter = h18_60.HasValue ?
                new ObjectParameter("H18_60", h18_60) :
                new ObjectParameter("H18_60", typeof(double));
    
            var h19_15Parameter = h19_15.HasValue ?
                new ObjectParameter("H19_15", h19_15) :
                new ObjectParameter("H19_15", typeof(double));
    
            var h19_30Parameter = h19_30.HasValue ?
                new ObjectParameter("H19_30", h19_30) :
                new ObjectParameter("H19_30", typeof(double));
    
            var h19_45Parameter = h19_45.HasValue ?
                new ObjectParameter("H19_45", h19_45) :
                new ObjectParameter("H19_45", typeof(double));
    
            var h19_60Parameter = h19_60.HasValue ?
                new ObjectParameter("H19_60", h19_60) :
                new ObjectParameter("H19_60", typeof(double));
    
            var h20_15Parameter = h20_15.HasValue ?
                new ObjectParameter("H20_15", h20_15) :
                new ObjectParameter("H20_15", typeof(double));
    
            var h20_30Parameter = h20_30.HasValue ?
                new ObjectParameter("H20_30", h20_30) :
                new ObjectParameter("H20_30", typeof(double));
    
            var h20_45Parameter = h20_45.HasValue ?
                new ObjectParameter("H20_45", h20_45) :
                new ObjectParameter("H20_45", typeof(double));
    
            var h20_60Parameter = h20_60.HasValue ?
                new ObjectParameter("H20_60", h20_60) :
                new ObjectParameter("H20_60", typeof(double));
    
            var h21_15Parameter = h21_15.HasValue ?
                new ObjectParameter("H21_15", h21_15) :
                new ObjectParameter("H21_15", typeof(double));
    
            var h21_30Parameter = h21_30.HasValue ?
                new ObjectParameter("H21_30", h21_30) :
                new ObjectParameter("H21_30", typeof(double));
    
            var h21_45Parameter = h21_45.HasValue ?
                new ObjectParameter("H21_45", h21_45) :
                new ObjectParameter("H21_45", typeof(double));
    
            var h21_60Parameter = h21_60.HasValue ?
                new ObjectParameter("H21_60", h21_60) :
                new ObjectParameter("H21_60", typeof(double));
    
            var h22_15Parameter = h22_15.HasValue ?
                new ObjectParameter("H22_15", h22_15) :
                new ObjectParameter("H22_15", typeof(double));
    
            var h22_30Parameter = h22_30.HasValue ?
                new ObjectParameter("H22_30", h22_30) :
                new ObjectParameter("H22_30", typeof(double));
    
            var h22_45Parameter = h22_45.HasValue ?
                new ObjectParameter("H22_45", h22_45) :
                new ObjectParameter("H22_45", typeof(double));
    
            var h22_60Parameter = h22_60.HasValue ?
                new ObjectParameter("H22_60", h22_60) :
                new ObjectParameter("H22_60", typeof(double));
    
            var h23_15Parameter = h23_15.HasValue ?
                new ObjectParameter("H23_15", h23_15) :
                new ObjectParameter("H23_15", typeof(double));
    
            var h23_30Parameter = h23_30.HasValue ?
                new ObjectParameter("H23_30", h23_30) :
                new ObjectParameter("H23_30", typeof(double));
    
            var h23_45Parameter = h23_45.HasValue ?
                new ObjectParameter("H23_45", h23_45) :
                new ObjectParameter("H23_45", typeof(double));
    
            var h23_60Parameter = h23_60.HasValue ?
                new ObjectParameter("H23_60", h23_60) :
                new ObjectParameter("H23_60", typeof(double));
    
            var priceTableCode1Parameter = priceTableCode1 != null ?
                new ObjectParameter("PriceTableCode1", priceTableCode1) :
                new ObjectParameter("PriceTableCode1", typeof(string));
    
            var priceTableCode2Parameter = priceTableCode2 != null ?
                new ObjectParameter("PriceTableCode2", priceTableCode2) :
                new ObjectParameter("PriceTableCode2", typeof(string));
    
            var priceTableCode3Parameter = priceTableCode3 != null ?
                new ObjectParameter("PriceTableCode3", priceTableCode3) :
                new ObjectParameter("PriceTableCode3", typeof(string));
    
            var priceTableCode4Parameter = priceTableCode4 != null ?
                new ObjectParameter("PriceTableCode4", priceTableCode4) :
                new ObjectParameter("PriceTableCode4", typeof(string));
    
            var priceTableCode5Parameter = priceTableCode5 != null ?
                new ObjectParameter("PriceTableCode5", priceTableCode5) :
                new ObjectParameter("PriceTableCode5", typeof(string));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_PkTimetable", tabletypeParameter, tablecodeParameter, tabledescParameter, flagParameter, h00_15Parameter, h00_30Parameter, h00_45Parameter, h00_60Parameter, h01_15Parameter, h01_30Parameter, h01_45Parameter, h01_60Parameter, h02_15Parameter, h02_30Parameter, h02_45Parameter, h02_60Parameter, h03_15Parameter, h03_30Parameter, h03_45Parameter, h03_60Parameter, h04_15Parameter, h04_30Parameter, h04_45Parameter, h04_60Parameter, h05_15Parameter, h05_30Parameter, h05_45Parameter, h05_60Parameter, h06_15Parameter, h06_30Parameter, h06_45Parameter, h06_60Parameter, h07_15Parameter, h07_30Parameter, h07_45Parameter, h07_60Parameter, h08_15Parameter, h08_30Parameter, h08_45Parameter, h08_60Parameter, h09_15Parameter, h09_30Parameter, h09_45Parameter, h09_60Parameter, h10_15Parameter, h10_30Parameter, h10_45Parameter, h10_60Parameter, h11_15Parameter, h11_30Parameter, h11_45Parameter, h11_60Parameter, h12_15Parameter, h12_30Parameter, h12_45Parameter, h12_60Parameter, h13_15Parameter, h13_30Parameter, h13_45Parameter, h13_60Parameter, h14_15Parameter, h14_30Parameter, h14_45Parameter, h14_60Parameter, h15_15Parameter, h15_30Parameter, h15_45Parameter, h15_60Parameter, h16_15Parameter, h16_30Parameter, h16_45Parameter, h16_60Parameter, h17_15Parameter, h17_30Parameter, h17_45Parameter, h17_60Parameter, h18_15Parameter, h18_30Parameter, h18_45Parameter, h18_60Parameter, h19_15Parameter, h19_30Parameter, h19_45Parameter, h19_60Parameter, h20_15Parameter, h20_30Parameter, h20_45Parameter, h20_60Parameter, h21_15Parameter, h21_30Parameter, h21_45Parameter, h21_60Parameter, h22_15Parameter, h22_30Parameter, h22_45Parameter, h22_60Parameter, h23_15Parameter, h23_30Parameter, h23_45Parameter, h23_60Parameter, priceTableCode1Parameter, priceTableCode2Parameter, priceTableCode3Parameter, priceTableCode4Parameter, priceTableCode5Parameter, last_UpdParameter, person_IDParameter, syndateParameter);
        }
    
        public virtual int Update_PkWeekend(string weekCode, string zDesc, string mon, string tue, string wed, string thu, string fri, string sat, string sun, Nullable<System.DateTime> last_Upd, Nullable<int> person_ID, Nullable<System.DateTime> syndate)
        {
            var weekCodeParameter = weekCode != null ?
                new ObjectParameter("WeekCode", weekCode) :
                new ObjectParameter("WeekCode", typeof(string));
    
            var zDescParameter = zDesc != null ?
                new ObjectParameter("ZDesc", zDesc) :
                new ObjectParameter("ZDesc", typeof(string));
    
            var monParameter = mon != null ?
                new ObjectParameter("Mon", mon) :
                new ObjectParameter("Mon", typeof(string));
    
            var tueParameter = tue != null ?
                new ObjectParameter("Tue", tue) :
                new ObjectParameter("Tue", typeof(string));
    
            var wedParameter = wed != null ?
                new ObjectParameter("Wed", wed) :
                new ObjectParameter("Wed", typeof(string));
    
            var thuParameter = thu != null ?
                new ObjectParameter("Thu", thu) :
                new ObjectParameter("Thu", typeof(string));
    
            var friParameter = fri != null ?
                new ObjectParameter("Fri", fri) :
                new ObjectParameter("Fri", typeof(string));
    
            var satParameter = sat != null ?
                new ObjectParameter("Sat", sat) :
                new ObjectParameter("Sat", typeof(string));
    
            var sunParameter = sun != null ?
                new ObjectParameter("Sun", sun) :
                new ObjectParameter("Sun", typeof(string));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_PkWeekend", weekCodeParameter, zDescParameter, monParameter, tueParameter, wedParameter, thuParameter, friParameter, satParameter, sunParameter, last_UpdParameter, person_IDParameter, syndateParameter);
        }
    
        public virtual int Update_USERINFO(string uSERID, string bADGENUMBER, string sSN, string refNo, string gENDER, string tITLE, Nullable<int> nTitle, Nullable<System.DateTime> bIRTHDAY, Nullable<System.DateTime> hIREDDAY, string addr1, string zIP, string tel, string mobile, Nullable<int> sECURITYFLAGS, byte[] pHOTO, string firstName, string lastname, string tFirstname, string tLastname, string ternCode, string ternSubcode, Nullable<int> positioninfo, string verity_Type, string passwords, string activePass, string iDCard, string cardActive, Nullable<System.DateTime> cardStartDate, Nullable<System.DateTime> cardExpireDate, string passwordweb, Nullable<int> status, Nullable<int> workmode, Nullable<int> group, Nullable<int> fPC, Nullable<int> nF, Nullable<int> mCGourp, Nullable<System.DateTime> expireCard, Nullable<int> workStartH, Nullable<int> workStartM, Nullable<int> workEndH, Nullable<int> workEndM, Nullable<int> groupTime, string faceauthority, Nullable<int> facecalid, string faceopenmode, string facecheckmode, string faceidcard, Nullable<int> ncardno, Nullable<int> vein_Access, string vein_Timezone, Nullable<int> vein_userspecial, Nullable<int> vein_usertype, Nullable<int> vein_userLevel, Nullable<int> vein_user1toN, Nullable<int> vein_Active, Nullable<int> vein_Blockuser, Nullable<int> vein_BlockDate, Nullable<int> vein_Accessmode, string vein_Schedule, Nullable<int> vein_batchadmin, Nullable<int> usertype, string groupdevicetime, string carID, string carModel, string carID1, string carModel1, string carID2, string carModel2, Nullable<System.DateTime> last_Upd, Nullable<int> person_ID, string imagepaths, Nullable<System.DateTime> syndate, Nullable<int> nSecurityLevel, Nullable<int> sf)
        {
            var uSERIDParameter = uSERID != null ?
                new ObjectParameter("USERID", uSERID) :
                new ObjectParameter("USERID", typeof(string));
    
            var bADGENUMBERParameter = bADGENUMBER != null ?
                new ObjectParameter("BADGENUMBER", bADGENUMBER) :
                new ObjectParameter("BADGENUMBER", typeof(string));
    
            var sSNParameter = sSN != null ?
                new ObjectParameter("SSN", sSN) :
                new ObjectParameter("SSN", typeof(string));
    
            var refNoParameter = refNo != null ?
                new ObjectParameter("RefNo", refNo) :
                new ObjectParameter("RefNo", typeof(string));
    
            var gENDERParameter = gENDER != null ?
                new ObjectParameter("GENDER", gENDER) :
                new ObjectParameter("GENDER", typeof(string));
    
            var tITLEParameter = tITLE != null ?
                new ObjectParameter("TITLE", tITLE) :
                new ObjectParameter("TITLE", typeof(string));
    
            var nTitleParameter = nTitle.HasValue ?
                new ObjectParameter("nTitle", nTitle) :
                new ObjectParameter("nTitle", typeof(int));
    
            var bIRTHDAYParameter = bIRTHDAY.HasValue ?
                new ObjectParameter("BIRTHDAY", bIRTHDAY) :
                new ObjectParameter("BIRTHDAY", typeof(System.DateTime));
    
            var hIREDDAYParameter = hIREDDAY.HasValue ?
                new ObjectParameter("HIREDDAY", hIREDDAY) :
                new ObjectParameter("HIREDDAY", typeof(System.DateTime));
    
            var addr1Parameter = addr1 != null ?
                new ObjectParameter("Addr1", addr1) :
                new ObjectParameter("Addr1", typeof(string));
    
            var zIPParameter = zIP != null ?
                new ObjectParameter("ZIP", zIP) :
                new ObjectParameter("ZIP", typeof(string));
    
            var telParameter = tel != null ?
                new ObjectParameter("Tel", tel) :
                new ObjectParameter("Tel", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var sECURITYFLAGSParameter = sECURITYFLAGS.HasValue ?
                new ObjectParameter("SECURITYFLAGS", sECURITYFLAGS) :
                new ObjectParameter("SECURITYFLAGS", typeof(int));
    
            var pHOTOParameter = pHOTO != null ?
                new ObjectParameter("PHOTO", pHOTO) :
                new ObjectParameter("PHOTO", typeof(byte[]));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("Lastname", lastname) :
                new ObjectParameter("Lastname", typeof(string));
    
            var tFirstnameParameter = tFirstname != null ?
                new ObjectParameter("TFirstname", tFirstname) :
                new ObjectParameter("TFirstname", typeof(string));
    
            var tLastnameParameter = tLastname != null ?
                new ObjectParameter("TLastname", tLastname) :
                new ObjectParameter("TLastname", typeof(string));
    
            var ternCodeParameter = ternCode != null ?
                new ObjectParameter("TernCode", ternCode) :
                new ObjectParameter("TernCode", typeof(string));
    
            var ternSubcodeParameter = ternSubcode != null ?
                new ObjectParameter("TernSubcode", ternSubcode) :
                new ObjectParameter("TernSubcode", typeof(string));
    
            var positioninfoParameter = positioninfo.HasValue ?
                new ObjectParameter("Positioninfo", positioninfo) :
                new ObjectParameter("Positioninfo", typeof(int));
    
            var verity_TypeParameter = verity_Type != null ?
                new ObjectParameter("Verity_Type", verity_Type) :
                new ObjectParameter("Verity_Type", typeof(string));
    
            var passwordsParameter = passwords != null ?
                new ObjectParameter("Passwords", passwords) :
                new ObjectParameter("Passwords", typeof(string));
    
            var activePassParameter = activePass != null ?
                new ObjectParameter("ActivePass", activePass) :
                new ObjectParameter("ActivePass", typeof(string));
    
            var iDCardParameter = iDCard != null ?
                new ObjectParameter("IDCard", iDCard) :
                new ObjectParameter("IDCard", typeof(string));
    
            var cardActiveParameter = cardActive != null ?
                new ObjectParameter("CardActive", cardActive) :
                new ObjectParameter("CardActive", typeof(string));
    
            var cardStartDateParameter = cardStartDate.HasValue ?
                new ObjectParameter("CardStartDate", cardStartDate) :
                new ObjectParameter("CardStartDate", typeof(System.DateTime));
    
            var cardExpireDateParameter = cardExpireDate.HasValue ?
                new ObjectParameter("CardExpireDate", cardExpireDate) :
                new ObjectParameter("CardExpireDate", typeof(System.DateTime));
    
            var passwordwebParameter = passwordweb != null ?
                new ObjectParameter("Passwordweb", passwordweb) :
                new ObjectParameter("Passwordweb", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var workmodeParameter = workmode.HasValue ?
                new ObjectParameter("workmode", workmode) :
                new ObjectParameter("workmode", typeof(int));
    
            var groupParameter = group.HasValue ?
                new ObjectParameter("group", group) :
                new ObjectParameter("group", typeof(int));
    
            var fPCParameter = fPC.HasValue ?
                new ObjectParameter("FPC", fPC) :
                new ObjectParameter("FPC", typeof(int));
    
            var nFParameter = nF.HasValue ?
                new ObjectParameter("NF", nF) :
                new ObjectParameter("NF", typeof(int));
    
            var mCGourpParameter = mCGourp.HasValue ?
                new ObjectParameter("MCGourp", mCGourp) :
                new ObjectParameter("MCGourp", typeof(int));
    
            var expireCardParameter = expireCard.HasValue ?
                new ObjectParameter("ExpireCard", expireCard) :
                new ObjectParameter("ExpireCard", typeof(System.DateTime));
    
            var workStartHParameter = workStartH.HasValue ?
                new ObjectParameter("WorkStartH", workStartH) :
                new ObjectParameter("WorkStartH", typeof(int));
    
            var workStartMParameter = workStartM.HasValue ?
                new ObjectParameter("workStartM", workStartM) :
                new ObjectParameter("workStartM", typeof(int));
    
            var workEndHParameter = workEndH.HasValue ?
                new ObjectParameter("WorkEndH", workEndH) :
                new ObjectParameter("WorkEndH", typeof(int));
    
            var workEndMParameter = workEndM.HasValue ?
                new ObjectParameter("WorkEndM", workEndM) :
                new ObjectParameter("WorkEndM", typeof(int));
    
            var groupTimeParameter = groupTime.HasValue ?
                new ObjectParameter("GroupTime", groupTime) :
                new ObjectParameter("GroupTime", typeof(int));
    
            var faceauthorityParameter = faceauthority != null ?
                new ObjectParameter("faceauthority", faceauthority) :
                new ObjectParameter("faceauthority", typeof(string));
    
            var facecalidParameter = facecalid.HasValue ?
                new ObjectParameter("Facecalid", facecalid) :
                new ObjectParameter("Facecalid", typeof(int));
    
            var faceopenmodeParameter = faceopenmode != null ?
                new ObjectParameter("Faceopenmode", faceopenmode) :
                new ObjectParameter("Faceopenmode", typeof(string));
    
            var facecheckmodeParameter = facecheckmode != null ?
                new ObjectParameter("Facecheckmode", facecheckmode) :
                new ObjectParameter("Facecheckmode", typeof(string));
    
            var faceidcardParameter = faceidcard != null ?
                new ObjectParameter("Faceidcard", faceidcard) :
                new ObjectParameter("Faceidcard", typeof(string));
    
            var ncardnoParameter = ncardno.HasValue ?
                new ObjectParameter("ncardno", ncardno) :
                new ObjectParameter("ncardno", typeof(int));
    
            var vein_AccessParameter = vein_Access.HasValue ?
                new ObjectParameter("Vein_Access", vein_Access) :
                new ObjectParameter("Vein_Access", typeof(int));
    
            var vein_TimezoneParameter = vein_Timezone != null ?
                new ObjectParameter("Vein_Timezone", vein_Timezone) :
                new ObjectParameter("Vein_Timezone", typeof(string));
    
            var vein_userspecialParameter = vein_userspecial.HasValue ?
                new ObjectParameter("Vein_userspecial", vein_userspecial) :
                new ObjectParameter("Vein_userspecial", typeof(int));
    
            var vein_usertypeParameter = vein_usertype.HasValue ?
                new ObjectParameter("Vein_usertype", vein_usertype) :
                new ObjectParameter("Vein_usertype", typeof(int));
    
            var vein_userLevelParameter = vein_userLevel.HasValue ?
                new ObjectParameter("Vein_userLevel", vein_userLevel) :
                new ObjectParameter("Vein_userLevel", typeof(int));
    
            var vein_user1toNParameter = vein_user1toN.HasValue ?
                new ObjectParameter("Vein_user1toN", vein_user1toN) :
                new ObjectParameter("Vein_user1toN", typeof(int));
    
            var vein_ActiveParameter = vein_Active.HasValue ?
                new ObjectParameter("Vein_Active", vein_Active) :
                new ObjectParameter("Vein_Active", typeof(int));
    
            var vein_BlockuserParameter = vein_Blockuser.HasValue ?
                new ObjectParameter("Vein_Blockuser", vein_Blockuser) :
                new ObjectParameter("Vein_Blockuser", typeof(int));
    
            var vein_BlockDateParameter = vein_BlockDate.HasValue ?
                new ObjectParameter("Vein_BlockDate", vein_BlockDate) :
                new ObjectParameter("Vein_BlockDate", typeof(int));
    
            var vein_AccessmodeParameter = vein_Accessmode.HasValue ?
                new ObjectParameter("Vein_Accessmode", vein_Accessmode) :
                new ObjectParameter("Vein_Accessmode", typeof(int));
    
            var vein_ScheduleParameter = vein_Schedule != null ?
                new ObjectParameter("Vein_Schedule", vein_Schedule) :
                new ObjectParameter("Vein_Schedule", typeof(string));
    
            var vein_batchadminParameter = vein_batchadmin.HasValue ?
                new ObjectParameter("Vein_batchadmin", vein_batchadmin) :
                new ObjectParameter("Vein_batchadmin", typeof(int));
    
            var usertypeParameter = usertype.HasValue ?
                new ObjectParameter("usertype", usertype) :
                new ObjectParameter("usertype", typeof(int));
    
            var groupdevicetimeParameter = groupdevicetime != null ?
                new ObjectParameter("Groupdevicetime", groupdevicetime) :
                new ObjectParameter("Groupdevicetime", typeof(string));
    
            var carIDParameter = carID != null ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(string));
    
            var carModelParameter = carModel != null ?
                new ObjectParameter("CarModel", carModel) :
                new ObjectParameter("CarModel", typeof(string));
    
            var carID1Parameter = carID1 != null ?
                new ObjectParameter("CarID1", carID1) :
                new ObjectParameter("CarID1", typeof(string));
    
            var carModel1Parameter = carModel1 != null ?
                new ObjectParameter("CarModel1", carModel1) :
                new ObjectParameter("CarModel1", typeof(string));
    
            var carID2Parameter = carID2 != null ?
                new ObjectParameter("CarID2", carID2) :
                new ObjectParameter("CarID2", typeof(string));
    
            var carModel2Parameter = carModel2 != null ?
                new ObjectParameter("CarModel2", carModel2) :
                new ObjectParameter("CarModel2", typeof(string));
    
            var last_UpdParameter = last_Upd.HasValue ?
                new ObjectParameter("Last_Upd", last_Upd) :
                new ObjectParameter("Last_Upd", typeof(System.DateTime));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var imagepathsParameter = imagepaths != null ?
                new ObjectParameter("Imagepaths", imagepaths) :
                new ObjectParameter("Imagepaths", typeof(string));
    
            var syndateParameter = syndate.HasValue ?
                new ObjectParameter("syndate", syndate) :
                new ObjectParameter("syndate", typeof(System.DateTime));
    
            var nSecurityLevelParameter = nSecurityLevel.HasValue ?
                new ObjectParameter("nSecurityLevel", nSecurityLevel) :
                new ObjectParameter("nSecurityLevel", typeof(int));
    
            var sfParameter = sf.HasValue ?
                new ObjectParameter("sf", sf) :
                new ObjectParameter("sf", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_USERINFO", uSERIDParameter, bADGENUMBERParameter, sSNParameter, refNoParameter, gENDERParameter, tITLEParameter, nTitleParameter, bIRTHDAYParameter, hIREDDAYParameter, addr1Parameter, zIPParameter, telParameter, mobileParameter, sECURITYFLAGSParameter, pHOTOParameter, firstNameParameter, lastnameParameter, tFirstnameParameter, tLastnameParameter, ternCodeParameter, ternSubcodeParameter, positioninfoParameter, verity_TypeParameter, passwordsParameter, activePassParameter, iDCardParameter, cardActiveParameter, cardStartDateParameter, cardExpireDateParameter, passwordwebParameter, statusParameter, workmodeParameter, groupParameter, fPCParameter, nFParameter, mCGourpParameter, expireCardParameter, workStartHParameter, workStartMParameter, workEndHParameter, workEndMParameter, groupTimeParameter, faceauthorityParameter, facecalidParameter, faceopenmodeParameter, facecheckmodeParameter, faceidcardParameter, ncardnoParameter, vein_AccessParameter, vein_TimezoneParameter, vein_userspecialParameter, vein_usertypeParameter, vein_userLevelParameter, vein_user1toNParameter, vein_ActiveParameter, vein_BlockuserParameter, vein_BlockDateParameter, vein_AccessmodeParameter, vein_ScheduleParameter, vein_batchadminParameter, usertypeParameter, groupdevicetimeParameter, carIDParameter, carModelParameter, carID1Parameter, carModel1Parameter, carID2Parameter, carModel2Parameter, last_UpdParameter, person_IDParameter, imagepathsParameter, syndateParameter, nSecurityLevelParameter, sfParameter);
        }
    
        public virtual int update_VClog(Nullable<int> clearing, Nullable<System.DateTime> dateout, string uSERID)
        {
            var clearingParameter = clearing.HasValue ?
                new ObjectParameter("Clearing", clearing) :
                new ObjectParameter("Clearing", typeof(int));
    
            var dateoutParameter = dateout.HasValue ?
                new ObjectParameter("dateout", dateout) :
                new ObjectParameter("dateout", typeof(System.DateTime));
    
            var uSERIDParameter = uSERID != null ?
                new ObjectParameter("USERID", uSERID) :
                new ObjectParameter("USERID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("update_VClog", clearingParameter, dateoutParameter, uSERIDParameter);
        }
    
        public virtual int update_VClog2(Nullable<int> clearing, Nullable<System.DateTime> dateout, string cscmain_id, string totaltime)
        {
            var clearingParameter = clearing.HasValue ?
                new ObjectParameter("Clearing", clearing) :
                new ObjectParameter("Clearing", typeof(int));
    
            var dateoutParameter = dateout.HasValue ?
                new ObjectParameter("dateout", dateout) :
                new ObjectParameter("dateout", typeof(System.DateTime));
    
            var cscmain_idParameter = cscmain_id != null ?
                new ObjectParameter("cscmain_id", cscmain_id) :
                new ObjectParameter("cscmain_id", typeof(string));
    
            var totaltimeParameter = totaltime != null ?
                new ObjectParameter("Totaltime", totaltime) :
                new ObjectParameter("Totaltime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("update_VClog2", clearingParameter, dateoutParameter, cscmain_idParameter, totaltimeParameter);
        }
    
        public virtual int Vcsummary_Visitor(string date1, string date2)
        {
            var date1Parameter = date1 != null ?
                new ObjectParameter("date1", date1) :
                new ObjectParameter("date1", typeof(string));
    
            var date2Parameter = date2 != null ?
                new ObjectParameter("date2", date2) :
                new ObjectParameter("date2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Vcsummary_Visitor", date1Parameter, date2Parameter);
        }
    
        public virtual ObjectResult<Vcsummary_Visitor_all_Result> Vcsummary_Visitor_all(string date1, string date2)
        {
            var date1Parameter = date1 != null ?
                new ObjectParameter("date1", date1) :
                new ObjectParameter("date1", typeof(string));
    
            var date2Parameter = date2 != null ?
                new ObjectParameter("date2", date2) :
                new ObjectParameter("date2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Vcsummary_Visitor_all_Result>("Vcsummary_Visitor_all", date1Parameter, date2Parameter);
        }
    
        public virtual int Webmember_Addmember(string no1, string terncode, string fname, string lname, string efname, string eLname, string mobile, string emailaddress, string dateactive, Nullable<int> statustype, string updateBy, string custno, string usertype, string slifeID)
        {
            var no1Parameter = no1 != null ?
                new ObjectParameter("No1", no1) :
                new ObjectParameter("No1", typeof(string));
    
            var terncodeParameter = terncode != null ?
                new ObjectParameter("terncode", terncode) :
                new ObjectParameter("terncode", typeof(string));
    
            var fnameParameter = fname != null ?
                new ObjectParameter("Fname", fname) :
                new ObjectParameter("Fname", typeof(string));
    
            var lnameParameter = lname != null ?
                new ObjectParameter("Lname", lname) :
                new ObjectParameter("Lname", typeof(string));
    
            var efnameParameter = efname != null ?
                new ObjectParameter("Efname", efname) :
                new ObjectParameter("Efname", typeof(string));
    
            var eLnameParameter = eLname != null ?
                new ObjectParameter("ELname", eLname) :
                new ObjectParameter("ELname", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var emailaddressParameter = emailaddress != null ?
                new ObjectParameter("Emailaddress", emailaddress) :
                new ObjectParameter("Emailaddress", typeof(string));
    
            var dateactiveParameter = dateactive != null ?
                new ObjectParameter("Dateactive", dateactive) :
                new ObjectParameter("Dateactive", typeof(string));
    
            var statustypeParameter = statustype.HasValue ?
                new ObjectParameter("Statustype", statustype) :
                new ObjectParameter("Statustype", typeof(int));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("updateBy", updateBy) :
                new ObjectParameter("updateBy", typeof(string));
    
            var custnoParameter = custno != null ?
                new ObjectParameter("Custno", custno) :
                new ObjectParameter("Custno", typeof(string));
    
            var usertypeParameter = usertype != null ?
                new ObjectParameter("usertype", usertype) :
                new ObjectParameter("usertype", typeof(string));
    
            var slifeIDParameter = slifeID != null ?
                new ObjectParameter("SlifeID", slifeID) :
                new ObjectParameter("SlifeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Webmember_Addmember", no1Parameter, terncodeParameter, fnameParameter, lnameParameter, efnameParameter, eLnameParameter, mobileParameter, emailaddressParameter, dateactiveParameter, statustypeParameter, updateByParameter, custnoParameter, usertypeParameter, slifeIDParameter);
        }
    
        public virtual ObjectResult<ActiveStampList_Result> ActiveStampList(string ternCode, string terSubCode, string adminLevel)
        {
            var ternCodeParameter = ternCode != null ?
                new ObjectParameter("ternCode", ternCode) :
                new ObjectParameter("ternCode", typeof(string));
    
            var terSubCodeParameter = terSubCode != null ?
                new ObjectParameter("terSubCode", terSubCode) :
                new ObjectParameter("terSubCode", typeof(string));
    
            var adminLevelParameter = adminLevel != null ?
                new ObjectParameter("adminLevel", adminLevel) :
                new ObjectParameter("adminLevel", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ActiveStampList_Result>("ActiveStampList", ternCodeParameter, terSubCodeParameter, adminLevelParameter);
        }
    
        public virtual ObjectResult<Change_Stamp_Detail_Result> Change_Stamp_Detail(string inoutTranstamp)
        {
            var inoutTranstampParameter = inoutTranstamp != null ?
                new ObjectParameter("inoutTranstamp", inoutTranstamp) :
                new ObjectParameter("inoutTranstamp", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Change_Stamp_Detail_Result>("Change_Stamp_Detail", inoutTranstampParameter);
        }
    
        public virtual int ChangeStampProsess(string stampCode, string inouttranID, string inoutTranStampID)
        {
            var stampCodeParameter = stampCode != null ?
                new ObjectParameter("stampCode", stampCode) :
                new ObjectParameter("stampCode", typeof(string));
    
            var inouttranIDParameter = inouttranID != null ?
                new ObjectParameter("inouttranID", inouttranID) :
                new ObjectParameter("inouttranID", typeof(string));
    
            var inoutTranStampIDParameter = inoutTranStampID != null ?
                new ObjectParameter("inoutTranStampID", inoutTranStampID) :
                new ObjectParameter("inoutTranStampID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeStampProsess", stampCodeParameter, inouttranIDParameter, inoutTranStampIDParameter);
        }
    
        public virtual int delete_stamp(string stampcode, string inouttranstamp, string inouttran)
        {
            var stampcodeParameter = stampcode != null ?
                new ObjectParameter("stampcode", stampcode) :
                new ObjectParameter("stampcode", typeof(string));
    
            var inouttranstampParameter = inouttranstamp != null ?
                new ObjectParameter("inouttranstamp", inouttranstamp) :
                new ObjectParameter("inouttranstamp", typeof(string));
    
            var inouttranParameter = inouttran != null ?
                new ObjectParameter("inouttran", inouttran) :
                new ObjectParameter("inouttran", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("delete_stamp", stampcodeParameter, inouttranstampParameter, inouttranParameter);
        }
    
        public virtual ObjectResult<PkStampCodeList_Result> PkStampCodeList(string visitorId, string ternCode, string terSubCode, string adminLevel_Id)
        {
            var visitorIdParameter = visitorId != null ?
                new ObjectParameter("visitorId", visitorId) :
                new ObjectParameter("visitorId", typeof(string));
    
            var ternCodeParameter = ternCode != null ?
                new ObjectParameter("ternCode", ternCode) :
                new ObjectParameter("ternCode", typeof(string));
    
            var terSubCodeParameter = terSubCode != null ?
                new ObjectParameter("terSubCode", terSubCode) :
                new ObjectParameter("terSubCode", typeof(string));
    
            var adminLevel_IdParameter = adminLevel_Id != null ?
                new ObjectParameter("adminLevel_Id", adminLevel_Id) :
                new ObjectParameter("adminLevel_Id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PkStampCodeList_Result>("PkStampCodeList", visitorIdParameter, ternCodeParameter, terSubCodeParameter, adminLevel_IdParameter);
        }
    
        public virtual int StampProsess(string stampCode, string inout_tran, string ternCode, string ternsubCode, Nullable<int> level, string custom, string admin_name, string custom_stamp)
        {
            var stampCodeParameter = stampCode != null ?
                new ObjectParameter("stampCode", stampCode) :
                new ObjectParameter("stampCode", typeof(string));
    
            var inout_tranParameter = inout_tran != null ?
                new ObjectParameter("inout_tran", inout_tran) :
                new ObjectParameter("inout_tran", typeof(string));
    
            var ternCodeParameter = ternCode != null ?
                new ObjectParameter("ternCode", ternCode) :
                new ObjectParameter("ternCode", typeof(string));
    
            var ternsubCodeParameter = ternsubCode != null ?
                new ObjectParameter("ternsubCode", ternsubCode) :
                new ObjectParameter("ternsubCode", typeof(string));
    
            var levelParameter = level.HasValue ?
                new ObjectParameter("level", level) :
                new ObjectParameter("level", typeof(int));
    
            var customParameter = custom != null ?
                new ObjectParameter("custom", custom) :
                new ObjectParameter("custom", typeof(string));
    
            var admin_nameParameter = admin_name != null ?
                new ObjectParameter("admin_name", admin_name) :
                new ObjectParameter("admin_name", typeof(string));
    
            var custom_stampParameter = custom_stamp != null ?
                new ObjectParameter("custom_stamp", custom_stamp) :
                new ObjectParameter("custom_stamp", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StampProsess", stampCodeParameter, inout_tranParameter, ternCodeParameter, ternsubCodeParameter, levelParameter, customParameter, admin_nameParameter, custom_stampParameter);
        }
    }
}
